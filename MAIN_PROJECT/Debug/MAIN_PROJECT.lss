
MAIN_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000055da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000055da  0000566e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006e  0080006e  0000567c  2**0
                  ALLOC
  3 .stab         0000471c  00000000  00000000  0000567c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010af  00000000  00000000  00009d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000ae47  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000afa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000b136  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000d17b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000e27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000f200  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000f380  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000f642  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fed0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f8 28 	jmp	0x51f0	; 0x51f0 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a2 29 	jmp	0x5344	; 0x5344 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f5 e5       	ldi	r31, 0x55	; 85
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <main>
      8a:	0c 94 eb 2a 	jmp	0x55d6	; 0x55d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b4 2a 	jmp	0x5568	; 0x5568 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d0 2a 	jmp	0x55a0	; 0x55a0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c0 2a 	jmp	0x5580	; 0x5580 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 dc 2a 	jmp	0x55b8	; 0x55b8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c0 2a 	jmp	0x5580	; 0x5580 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 dc 2a 	jmp	0x55b8	; 0x55b8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b4 2a 	jmp	0x5568	; 0x5568 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d0 2a 	jmp	0x55a0	; 0x55a0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bc 2a 	jmp	0x5578	; 0x5578 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d8 2a 	jmp	0x55b0	; 0x55b0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c0 2a 	jmp	0x5580	; 0x5580 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 dc 2a 	jmp	0x55b8	; 0x55b8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c0 2a 	jmp	0x5580	; 0x5580 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 dc 2a 	jmp	0x55b8	; 0x55b8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c0 2a 	jmp	0x5580	; 0x5580 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 dc 2a 	jmp	0x55b8	; 0x55b8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c4 2a 	jmp	0x5588	; 0x5588 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e0 2a 	jmp	0x55c0	; 0x55c0 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_u8SetPinDirection>:
#include "avr/io.h"



u8 DIO_u8SetPinDirection(u8 Copy_u8PinNumber , u8 Copy_u8PortNumber , u8 Copy_u8Direction)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_u8SetPinDirection+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_u8SetPinDirection+0x8>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <DIO_u8SetPinDirection+0xa>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	8a 83       	std	Y+2, r24	; 0x02
     cae:	6b 83       	std	Y+3, r22	; 0x03
     cb0:	4c 83       	std	Y+4, r20	; 0x04
	  u8 Error_state = OK;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	89 83       	std	Y+1, r24	; 0x01

	 if(Copy_u8PinNumber<8)
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	88 30       	cpi	r24, 0x08	; 8
     cba:	08 f0       	brcs	.+2      	; 0xcbe <DIO_u8SetPinDirection+0x20>
     cbc:	e8 c0       	rjmp	.+464    	; 0xe8e <DIO_u8SetPinDirection+0x1f0>
	  {
  switch (Copy_u8PortNumber)
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	3e 83       	std	Y+6, r19	; 0x06
     cc6:	2d 83       	std	Y+5, r18	; 0x05
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
     cca:	9e 81       	ldd	r25, Y+6	; 0x06
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	91 05       	cpc	r25, r1
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <DIO_u8SetPinDirection+0x36>
     cd2:	48 c0       	rjmp	.+144    	; 0xd64 <DIO_u8SetPinDirection+0xc6>
     cd4:	2d 81       	ldd	r18, Y+5	; 0x05
     cd6:	3e 81       	ldd	r19, Y+6	; 0x06
     cd8:	22 30       	cpi	r18, 0x02	; 2
     cda:	31 05       	cpc	r19, r1
     cdc:	2c f4       	brge	.+10     	; 0xce8 <DIO_u8SetPinDirection+0x4a>
     cde:	8d 81       	ldd	r24, Y+5	; 0x05
     ce0:	9e 81       	ldd	r25, Y+6	; 0x06
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	71 f0       	breq	.+28     	; 0xd02 <DIO_u8SetPinDirection+0x64>
     ce6:	d1 c0       	rjmp	.+418    	; 0xe8a <DIO_u8SetPinDirection+0x1ec>
     ce8:	2d 81       	ldd	r18, Y+5	; 0x05
     cea:	3e 81       	ldd	r19, Y+6	; 0x06
     cec:	22 30       	cpi	r18, 0x02	; 2
     cee:	31 05       	cpc	r19, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <DIO_u8SetPinDirection+0x56>
     cf2:	69 c0       	rjmp	.+210    	; 0xdc6 <DIO_u8SetPinDirection+0x128>
     cf4:	8d 81       	ldd	r24, Y+5	; 0x05
     cf6:	9e 81       	ldd	r25, Y+6	; 0x06
     cf8:	83 30       	cpi	r24, 0x03	; 3
     cfa:	91 05       	cpc	r25, r1
     cfc:	09 f4       	brne	.+2      	; 0xd00 <DIO_u8SetPinDirection+0x62>
     cfe:	94 c0       	rjmp	.+296    	; 0xe28 <DIO_u8SetPinDirection+0x18a>
     d00:	c4 c0       	rjmp	.+392    	; 0xe8a <DIO_u8SetPinDirection+0x1ec>
  {
  case DIO_PORTA:
	  if(Copy_u8Direction == PIN_OUTPUT)
     d02:	8c 81       	ldd	r24, Y+4	; 0x04
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	a1 f4       	brne	.+40     	; 0xd30 <DIO_u8SetPinDirection+0x92>
	  {
		 SETBITvalue(DDRA, Copy_u8PinNumber);
     d08:	aa e3       	ldi	r26, 0x3A	; 58
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ea e3       	ldi	r30, 0x3A	; 58
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	8a 81       	ldd	r24, Y+2	; 0x02
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_u8SetPinDirection+0x88>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_u8SetPinDirection+0x84>
     d2a:	84 2b       	or	r24, r20
     d2c:	8c 93       	st	X, r24
     d2e:	b0 c0       	rjmp	.+352    	; 0xe90 <DIO_u8SetPinDirection+0x1f2>

	  }
	  else if(Copy_u8Direction == PIN_INPUT)
     d30:	8c 81       	ldd	r24, Y+4	; 0x04
     d32:	88 23       	and	r24, r24
     d34:	a9 f4       	brne	.+42     	; 0xd60 <DIO_u8SetPinDirection+0xc2>
	  {
		  CLRBITvalue(DDRA, Copy_u8PinNumber);
     d36:	aa e3       	ldi	r26, 0x3A	; 58
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	ea e3       	ldi	r30, 0x3A	; 58
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	48 2f       	mov	r20, r24
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 2e       	mov	r0, r18
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <DIO_u8SetPinDirection+0xb6>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	0a 94       	dec	r0
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <DIO_u8SetPinDirection+0xb2>
     d58:	80 95       	com	r24
     d5a:	84 23       	and	r24, r20
     d5c:	8c 93       	st	X, r24
     d5e:	98 c0       	rjmp	.+304    	; 0xe90 <DIO_u8SetPinDirection+0x1f2>

	  }
	  else{  Error_state = NOK;}
     d60:	19 82       	std	Y+1, r1	; 0x01
     d62:	96 c0       	rjmp	.+300    	; 0xe90 <DIO_u8SetPinDirection+0x1f2>
	  break;
  case DIO_PORTB:

	  if(Copy_u8Direction == PIN_OUTPUT)
     d64:	8c 81       	ldd	r24, Y+4	; 0x04
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	a1 f4       	brne	.+40     	; 0xd92 <DIO_u8SetPinDirection+0xf4>
	  	  {
	  		 SETBITvalue(DDRB, Copy_u8PinNumber);
     d6a:	a7 e3       	ldi	r26, 0x37	; 55
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e7 e3       	ldi	r30, 0x37	; 55
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	48 2f       	mov	r20, r24
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <DIO_u8SetPinDirection+0xea>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <DIO_u8SetPinDirection+0xe6>
     d8c:	84 2b       	or	r24, r20
     d8e:	8c 93       	st	X, r24
     d90:	7f c0       	rjmp	.+254    	; 0xe90 <DIO_u8SetPinDirection+0x1f2>

	  	  }
	  	  else if(Copy_u8Direction == PIN_INPUT)
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	88 23       	and	r24, r24
     d96:	a9 f4       	brne	.+42     	; 0xdc2 <DIO_u8SetPinDirection+0x124>
	  	  {
	  		  CLRBITvalue(DDRB, Copy_u8PinNumber);
     d98:	a7 e3       	ldi	r26, 0x37	; 55
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e7 e3       	ldi	r30, 0x37	; 55
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <DIO_u8SetPinDirection+0x118>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <DIO_u8SetPinDirection+0x114>
     dba:	80 95       	com	r24
     dbc:	84 23       	and	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	67 c0       	rjmp	.+206    	; 0xe90 <DIO_u8SetPinDirection+0x1f2>

	  	  }
	  	  else{  Error_state = NOK;}
     dc2:	19 82       	std	Y+1, r1	; 0x01
     dc4:	65 c0       	rjmp	.+202    	; 0xe90 <DIO_u8SetPinDirection+0x1f2>


  	  break;
  case DIO_PORTC:

	  if(Copy_u8Direction == PIN_OUTPUT)
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	a1 f4       	brne	.+40     	; 0xdf4 <DIO_u8SetPinDirection+0x156>
	  	  {
	  		 SETBITvalue(DDRC, Copy_u8PinNumber);
     dcc:	a4 e3       	ldi	r26, 0x34	; 52
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e4 e3       	ldi	r30, 0x34	; 52
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	48 2f       	mov	r20, r24
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	02 2e       	mov	r0, r18
     de4:	02 c0       	rjmp	.+4      	; 0xdea <DIO_u8SetPinDirection+0x14c>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	0a 94       	dec	r0
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <DIO_u8SetPinDirection+0x148>
     dee:	84 2b       	or	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	4e c0       	rjmp	.+156    	; 0xe90 <DIO_u8SetPinDirection+0x1f2>

	  	  }
	  	  else if(Copy_u8Direction == PIN_INPUT)
     df4:	8c 81       	ldd	r24, Y+4	; 0x04
     df6:	88 23       	and	r24, r24
     df8:	a9 f4       	brne	.+42     	; 0xe24 <DIO_u8SetPinDirection+0x186>
	  	  {
	  		  CLRBITvalue(DDRC, Copy_u8PinNumber);
     dfa:	a4 e3       	ldi	r26, 0x34	; 52
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e4 e3       	ldi	r30, 0x34	; 52
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <DIO_u8SetPinDirection+0x17a>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <DIO_u8SetPinDirection+0x176>
     e1c:	80 95       	com	r24
     e1e:	84 23       	and	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	36 c0       	rjmp	.+108    	; 0xe90 <DIO_u8SetPinDirection+0x1f2>

	  	  }
	  	  else{  Error_state = NOK;}
     e24:	19 82       	std	Y+1, r1	; 0x01
     e26:	34 c0       	rjmp	.+104    	; 0xe90 <DIO_u8SetPinDirection+0x1f2>


  	  break;
  case DIO_PORTD:

	  if(Copy_u8Direction == PIN_OUTPUT)
     e28:	8c 81       	ldd	r24, Y+4	; 0x04
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	a1 f4       	brne	.+40     	; 0xe56 <DIO_u8SetPinDirection+0x1b8>
	  	  {
	  		 SETBITvalue(DDRD, Copy_u8PinNumber);
     e2e:	a1 e3       	ldi	r26, 0x31	; 49
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e1 e3       	ldi	r30, 0x31	; 49
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_u8SetPinDirection+0x1ae>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_u8SetPinDirection+0x1aa>
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	1d c0       	rjmp	.+58     	; 0xe90 <DIO_u8SetPinDirection+0x1f2>

	  	  }
	  	  else if(Copy_u8Direction == PIN_INPUT)
     e56:	8c 81       	ldd	r24, Y+4	; 0x04
     e58:	88 23       	and	r24, r24
     e5a:	a9 f4       	brne	.+42     	; 0xe86 <DIO_u8SetPinDirection+0x1e8>
	  	  {
	  		  CLRBITvalue(DDRD, Copy_u8PinNumber);
     e5c:	a1 e3       	ldi	r26, 0x31	; 49
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e1 e3       	ldi	r30, 0x31	; 49
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	48 2f       	mov	r20, r24
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	02 2e       	mov	r0, r18
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <DIO_u8SetPinDirection+0x1dc>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	0a 94       	dec	r0
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <DIO_u8SetPinDirection+0x1d8>
     e7e:	80 95       	com	r24
     e80:	84 23       	and	r24, r20
     e82:	8c 93       	st	X, r24
     e84:	05 c0       	rjmp	.+10     	; 0xe90 <DIO_u8SetPinDirection+0x1f2>

	  	  }
	  	  else{  Error_state = NOK;}
     e86:	19 82       	std	Y+1, r1	; 0x01
     e88:	03 c0       	rjmp	.+6      	; 0xe90 <DIO_u8SetPinDirection+0x1f2>


  	  break;
  default:
	  Error_state = NOK;
     e8a:	19 82       	std	Y+1, r1	; 0x01
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <DIO_u8SetPinDirection+0x1f2>
	  }
	  }
  else
  {
	  Error_state = NOK;
     e8e:	19 82       	std	Y+1, r1	; 0x01

  }
	 return Error_state;
     e90:	89 81       	ldd	r24, Y+1	; 0x01

}
     e92:	26 96       	adiw	r28, 0x06	; 6
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8PinNumber , u8 Copy_u8PortNumber , u8 Copy_u8Value)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <DIO_u8SetPinValue+0x6>
     eaa:	00 d0       	rcall	.+0      	; 0xeac <DIO_u8SetPinValue+0x8>
     eac:	00 d0       	rcall	.+0      	; 0xeae <DIO_u8SetPinValue+0xa>
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	8a 83       	std	Y+2, r24	; 0x02
     eb4:	6b 83       	std	Y+3, r22	; 0x03
     eb6:	4c 83       	std	Y+4, r20	; 0x04
	  u8 Error_state = OK;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	89 83       	std	Y+1, r24	; 0x01

	 if(Copy_u8PinNumber<8)
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	88 30       	cpi	r24, 0x08	; 8
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <DIO_u8SetPinValue+0x20>
     ec2:	e8 c0       	rjmp	.+464    	; 0x1094 <DIO_u8SetPinValue+0x1f0>
	  {
switch (Copy_u8PortNumber)
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	3e 83       	std	Y+6, r19	; 0x06
     ecc:	2d 83       	std	Y+5, r18	; 0x05
     ece:	8d 81       	ldd	r24, Y+5	; 0x05
     ed0:	9e 81       	ldd	r25, Y+6	; 0x06
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	91 05       	cpc	r25, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <DIO_u8SetPinValue+0x36>
     ed8:	48 c0       	rjmp	.+144    	; 0xf6a <DIO_u8SetPinValue+0xc6>
     eda:	2d 81       	ldd	r18, Y+5	; 0x05
     edc:	3e 81       	ldd	r19, Y+6	; 0x06
     ede:	22 30       	cpi	r18, 0x02	; 2
     ee0:	31 05       	cpc	r19, r1
     ee2:	2c f4       	brge	.+10     	; 0xeee <DIO_u8SetPinValue+0x4a>
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	71 f0       	breq	.+28     	; 0xf08 <DIO_u8SetPinValue+0x64>
     eec:	d1 c0       	rjmp	.+418    	; 0x1090 <DIO_u8SetPinValue+0x1ec>
     eee:	2d 81       	ldd	r18, Y+5	; 0x05
     ef0:	3e 81       	ldd	r19, Y+6	; 0x06
     ef2:	22 30       	cpi	r18, 0x02	; 2
     ef4:	31 05       	cpc	r19, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <DIO_u8SetPinValue+0x56>
     ef8:	69 c0       	rjmp	.+210    	; 0xfcc <DIO_u8SetPinValue+0x128>
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	83 30       	cpi	r24, 0x03	; 3
     f00:	91 05       	cpc	r25, r1
     f02:	09 f4       	brne	.+2      	; 0xf06 <DIO_u8SetPinValue+0x62>
     f04:	94 c0       	rjmp	.+296    	; 0x102e <DIO_u8SetPinValue+0x18a>
     f06:	c4 c0       	rjmp	.+392    	; 0x1090 <DIO_u8SetPinValue+0x1ec>
{
case DIO_PORTA:
	  if(Copy_u8Value == HIGH)
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	a1 f4       	brne	.+40     	; 0xf36 <DIO_u8SetPinValue+0x92>
	  	  {
	  		 SETBITvalue(PORTA, Copy_u8PinNumber);
     f0e:	ab e3       	ldi	r26, 0x3B	; 59
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	eb e3       	ldi	r30, 0x3B	; 59
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_u8SetPinValue+0x88>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_u8SetPinValue+0x84>
     f30:	84 2b       	or	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	b0 c0       	rjmp	.+352    	; 0x1096 <DIO_u8SetPinValue+0x1f2>

	  	  }
	  	  else if(Copy_u8Value == LOW)
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	88 23       	and	r24, r24
     f3a:	a9 f4       	brne	.+42     	; 0xf66 <DIO_u8SetPinValue+0xc2>
	  	  {
	  		  CLRBITvalue(PORTA, Copy_u8PinNumber);
     f3c:	ab e3       	ldi	r26, 0x3B	; 59
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	eb e3       	ldi	r30, 0x3B	; 59
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <DIO_u8SetPinValue+0xb6>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <DIO_u8SetPinValue+0xb2>
     f5e:	80 95       	com	r24
     f60:	84 23       	and	r24, r20
     f62:	8c 93       	st	X, r24
     f64:	98 c0       	rjmp	.+304    	; 0x1096 <DIO_u8SetPinValue+0x1f2>

	  	  }
	  	  else{  Error_state = NOK;}
     f66:	19 82       	std	Y+1, r1	; 0x01
     f68:	96 c0       	rjmp	.+300    	; 0x1096 <DIO_u8SetPinValue+0x1f2>
	  break;
case DIO_PORTB:

	  if(Copy_u8Value == HIGH)
     f6a:	8c 81       	ldd	r24, Y+4	; 0x04
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	a1 f4       	brne	.+40     	; 0xf98 <DIO_u8SetPinValue+0xf4>
	  	  {
	  		 SETBITvalue(PORTB, Copy_u8PinNumber);
     f70:	a8 e3       	ldi	r26, 0x38	; 56
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e8 e3       	ldi	r30, 0x38	; 56
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DIO_u8SetPinValue+0xea>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DIO_u8SetPinValue+0xe6>
     f92:	84 2b       	or	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	7f c0       	rjmp	.+254    	; 0x1096 <DIO_u8SetPinValue+0x1f2>

	  	  }
	  	  else if(Copy_u8Value == LOW)
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	88 23       	and	r24, r24
     f9c:	a9 f4       	brne	.+42     	; 0xfc8 <DIO_u8SetPinValue+0x124>
	  	  {
	  		  CLRBITvalue(PORTB, Copy_u8PinNumber);
     f9e:	a8 e3       	ldi	r26, 0x38	; 56
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e8 e3       	ldi	r30, 0x38	; 56
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	48 2f       	mov	r20, r24
     faa:	8a 81       	ldd	r24, Y+2	; 0x02
     fac:	28 2f       	mov	r18, r24
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	02 2e       	mov	r0, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <DIO_u8SetPinValue+0x118>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	0a 94       	dec	r0
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <DIO_u8SetPinValue+0x114>
     fc0:	80 95       	com	r24
     fc2:	84 23       	and	r24, r20
     fc4:	8c 93       	st	X, r24
     fc6:	67 c0       	rjmp	.+206    	; 0x1096 <DIO_u8SetPinValue+0x1f2>

	  	  }
	  	  else{  Error_state = NOK;}
     fc8:	19 82       	std	Y+1, r1	; 0x01
     fca:	65 c0       	rjmp	.+202    	; 0x1096 <DIO_u8SetPinValue+0x1f2>

	  break;
case DIO_PORTC:

	  if(Copy_u8Value == HIGH)
     fcc:	8c 81       	ldd	r24, Y+4	; 0x04
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	a1 f4       	brne	.+40     	; 0xffa <DIO_u8SetPinValue+0x156>
	  	  {
	  		 SETBITvalue(PORTC, Copy_u8PinNumber);
     fd2:	a5 e3       	ldi	r26, 0x35	; 53
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e5 e3       	ldi	r30, 0x35	; 53
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_u8SetPinValue+0x14c>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_u8SetPinValue+0x148>
     ff4:	84 2b       	or	r24, r20
     ff6:	8c 93       	st	X, r24
     ff8:	4e c0       	rjmp	.+156    	; 0x1096 <DIO_u8SetPinValue+0x1f2>

	  	  }
	  	  else if(Copy_u8Value == LOW)
     ffa:	8c 81       	ldd	r24, Y+4	; 0x04
     ffc:	88 23       	and	r24, r24
     ffe:	a9 f4       	brne	.+42     	; 0x102a <DIO_u8SetPinValue+0x186>
	  	  {
	  		  CLRBITvalue(PORTC, Copy_u8PinNumber);
    1000:	a5 e3       	ldi	r26, 0x35	; 53
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e3       	ldi	r30, 0x35	; 53
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_u8SetPinValue+0x17a>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_u8SetPinValue+0x176>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	36 c0       	rjmp	.+108    	; 0x1096 <DIO_u8SetPinValue+0x1f2>

	  	  }
	  	  else{  Error_state = NOK;}
    102a:	19 82       	std	Y+1, r1	; 0x01
    102c:	34 c0       	rjmp	.+104    	; 0x1096 <DIO_u8SetPinValue+0x1f2>


	  break;
case DIO_PORTD:

	  if(Copy_u8Value == HIGH)
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	a1 f4       	brne	.+40     	; 0x105c <DIO_u8SetPinValue+0x1b8>
	  	  {
	  		 SETBITvalue(PORTD, Copy_u8PinNumber);
    1034:	a2 e3       	ldi	r26, 0x32	; 50
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e2 e3       	ldi	r30, 0x32	; 50
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_u8SetPinValue+0x1ae>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_u8SetPinValue+0x1aa>
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	1d c0       	rjmp	.+58     	; 0x1096 <DIO_u8SetPinValue+0x1f2>

	  	  }
	  	  else if(Copy_u8Value == LOW)
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	88 23       	and	r24, r24
    1060:	a9 f4       	brne	.+42     	; 0x108c <DIO_u8SetPinValue+0x1e8>
	  	  {
	  		  CLRBITvalue(PORTD, Copy_u8PinNumber);
    1062:	a2 e3       	ldi	r26, 0x32	; 50
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e2 e3       	ldi	r30, 0x32	; 50
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_u8SetPinValue+0x1dc>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_u8SetPinValue+0x1d8>
    1084:	80 95       	com	r24
    1086:	84 23       	and	r24, r20
    1088:	8c 93       	st	X, r24
    108a:	05 c0       	rjmp	.+10     	; 0x1096 <DIO_u8SetPinValue+0x1f2>

	  	  }
	  	  else{  Error_state = NOK;}
    108c:	19 82       	std	Y+1, r1	; 0x01
    108e:	03 c0       	rjmp	.+6      	; 0x1096 <DIO_u8SetPinValue+0x1f2>


	  break;
default:
	Error_state = NOK;
    1090:	19 82       	std	Y+1, r1	; 0x01
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <DIO_u8SetPinValue+0x1f2>
	  }
	  }
else
{
	  Error_state = NOK;
    1094:	19 82       	std	Y+1, r1	; 0x01

}
	 return Error_state;
    1096:	89 81       	ldd	r24, Y+1	; 0x01




}
    1098:	26 96       	adiw	r28, 0x06	; 6
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	cf 91       	pop	r28
    10a6:	df 91       	pop	r29
    10a8:	08 95       	ret

000010aa <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortNumber , u8 Copy_u8Direction)
{
    10aa:	df 93       	push	r29
    10ac:	cf 93       	push	r28
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <DIO_u8SetPortDirection+0x6>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <DIO_u8SetPortDirection+0x8>
    10b2:	0f 92       	push	r0
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	8a 83       	std	Y+2, r24	; 0x02
    10ba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_state = OK ;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8PortNumber)
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	3d 83       	std	Y+5, r19	; 0x05
    10c8:	2c 83       	std	Y+4, r18	; 0x04
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	91 05       	cpc	r25, r1
    10d2:	11 f1       	breq	.+68     	; 0x1118 <DIO_u8SetPortDirection+0x6e>
    10d4:	2c 81       	ldd	r18, Y+4	; 0x04
    10d6:	3d 81       	ldd	r19, Y+5	; 0x05
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	2c f4       	brge	.+10     	; 0x10e8 <DIO_u8SetPortDirection+0x3e>
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	61 f0       	breq	.+24     	; 0x10fe <DIO_u8SetPortDirection+0x54>
    10e6:	3f c0       	rjmp	.+126    	; 0x1166 <DIO_u8SetPortDirection+0xbc>
    10e8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ea:	3d 81       	ldd	r19, Y+5	; 0x05
    10ec:	22 30       	cpi	r18, 0x02	; 2
    10ee:	31 05       	cpc	r19, r1
    10f0:	01 f1       	breq	.+64     	; 0x1132 <DIO_u8SetPortDirection+0x88>
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	91 05       	cpc	r25, r1
    10fa:	41 f1       	breq	.+80     	; 0x114c <DIO_u8SetPortDirection+0xa2>
    10fc:	34 c0       	rjmp	.+104    	; 0x1166 <DIO_u8SetPortDirection+0xbc>
	{
	case DIO_PORTA:
		  if(Copy_u8Direction == PORT_OUTPUT || Copy_u8Direction == PORT_INPUT)
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	8f 3f       	cpi	r24, 0xFF	; 255
    1102:	19 f0       	breq	.+6      	; 0x110a <DIO_u8SetPortDirection+0x60>
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	88 23       	and	r24, r24
    1108:	29 f4       	brne	.+10     	; 0x1114 <DIO_u8SetPortDirection+0x6a>
		  	  {
		  		 DDRA = Copy_u8Direction;
    110a:	ea e3       	ldi	r30, 0x3A	; 58
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	80 83       	st	Z, r24
    1112:	2a c0       	rjmp	.+84     	; 0x1168 <DIO_u8SetPortDirection+0xbe>
		  	  }
		  else
		  {
			  Error_state = NOK;
    1114:	19 82       	std	Y+1, r1	; 0x01
    1116:	28 c0       	rjmp	.+80     	; 0x1168 <DIO_u8SetPortDirection+0xbe>
		  }
		break;
	case DIO_PORTB:
		  if(Copy_u8Direction == PORT_OUTPUT || Copy_u8Direction == PORT_INPUT)
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	8f 3f       	cpi	r24, 0xFF	; 255
    111c:	19 f0       	breq	.+6      	; 0x1124 <DIO_u8SetPortDirection+0x7a>
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	88 23       	and	r24, r24
    1122:	29 f4       	brne	.+10     	; 0x112e <DIO_u8SetPortDirection+0x84>
		  	  {
		  		 DDRB = Copy_u8Direction;
    1124:	e7 e3       	ldi	r30, 0x37	; 55
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	80 83       	st	Z, r24
    112c:	1d c0       	rjmp	.+58     	; 0x1168 <DIO_u8SetPortDirection+0xbe>
		  	  }
		  else
		  {
			  Error_state = NOK;
    112e:	19 82       	std	Y+1, r1	; 0x01
    1130:	1b c0       	rjmp	.+54     	; 0x1168 <DIO_u8SetPortDirection+0xbe>
		  }
		  break;
	case DIO_PORTC:
		  if(Copy_u8Direction == PORT_OUTPUT || Copy_u8Direction == PORT_INPUT)
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	8f 3f       	cpi	r24, 0xFF	; 255
    1136:	19 f0       	breq	.+6      	; 0x113e <DIO_u8SetPortDirection+0x94>
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	88 23       	and	r24, r24
    113c:	29 f4       	brne	.+10     	; 0x1148 <DIO_u8SetPortDirection+0x9e>
		  	  {
		  		 DDRC = Copy_u8Direction;
    113e:	e4 e3       	ldi	r30, 0x34	; 52
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	80 83       	st	Z, r24
    1146:	10 c0       	rjmp	.+32     	; 0x1168 <DIO_u8SetPortDirection+0xbe>
		  	  }
		  else
		  {
			  Error_state = NOK;
    1148:	19 82       	std	Y+1, r1	; 0x01
    114a:	0e c0       	rjmp	.+28     	; 0x1168 <DIO_u8SetPortDirection+0xbe>
		  }
			break;
	case DIO_PORTD:
		  if(Copy_u8Direction == PORT_OUTPUT || Copy_u8Direction == PORT_INPUT)
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	8f 3f       	cpi	r24, 0xFF	; 255
    1150:	19 f0       	breq	.+6      	; 0x1158 <DIO_u8SetPortDirection+0xae>
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	88 23       	and	r24, r24
    1156:	29 f4       	brne	.+10     	; 0x1162 <DIO_u8SetPortDirection+0xb8>
		  	  {
		  		 DDRD = Copy_u8Direction;
    1158:	e1 e3       	ldi	r30, 0x31	; 49
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	80 83       	st	Z, r24
    1160:	03 c0       	rjmp	.+6      	; 0x1168 <DIO_u8SetPortDirection+0xbe>
		  	  }
		  else
		  {
			  Error_state = NOK;
    1162:	19 82       	std	Y+1, r1	; 0x01
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <DIO_u8SetPortDirection+0xbe>
		  }
			break;
	default:
		Error_state = NOK;
    1166:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
return Error_state;
    1168:	89 81       	ldd	r24, Y+1	; 0x01

}
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8PortNumber , u8 Copy_u8Value)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	00 d0       	rcall	.+0      	; 0x1180 <DIO_u8SetPortValue+0x6>
    1180:	00 d0       	rcall	.+0      	; 0x1182 <DIO_u8SetPortValue+0x8>
    1182:	0f 92       	push	r0
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	8a 83       	std	Y+2, r24	; 0x02
    118a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_state = OK ;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Value<0 && Copy_u8Value>255){Error_state = NOK;}
	else
	{
	switch (Copy_u8PortNumber)
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	3d 83       	std	Y+5, r19	; 0x05
    1198:	2c 83       	std	Y+4, r18	; 0x04
    119a:	8c 81       	ldd	r24, Y+4	; 0x04
    119c:	9d 81       	ldd	r25, Y+5	; 0x05
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	91 05       	cpc	r25, r1
    11a2:	d1 f0       	breq	.+52     	; 0x11d8 <DIO_u8SetPortValue+0x5e>
    11a4:	2c 81       	ldd	r18, Y+4	; 0x04
    11a6:	3d 81       	ldd	r19, Y+5	; 0x05
    11a8:	22 30       	cpi	r18, 0x02	; 2
    11aa:	31 05       	cpc	r19, r1
    11ac:	2c f4       	brge	.+10     	; 0x11b8 <DIO_u8SetPortValue+0x3e>
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	9d 81       	ldd	r25, Y+5	; 0x05
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	61 f0       	breq	.+24     	; 0x11ce <DIO_u8SetPortValue+0x54>
    11b6:	1f c0       	rjmp	.+62     	; 0x11f6 <DIO_u8SetPortValue+0x7c>
    11b8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ba:	3d 81       	ldd	r19, Y+5	; 0x05
    11bc:	22 30       	cpi	r18, 0x02	; 2
    11be:	31 05       	cpc	r19, r1
    11c0:	81 f0       	breq	.+32     	; 0x11e2 <DIO_u8SetPortValue+0x68>
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	91 05       	cpc	r25, r1
    11ca:	81 f0       	breq	.+32     	; 0x11ec <DIO_u8SetPortValue+0x72>
    11cc:	14 c0       	rjmp	.+40     	; 0x11f6 <DIO_u8SetPortValue+0x7c>
	{
	case DIO_PORTA:
		  		 DDRA = Copy_u8Value;
    11ce:	ea e3       	ldi	r30, 0x3A	; 58
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	80 83       	st	Z, r24
    11d6:	10 c0       	rjmp	.+32     	; 0x11f8 <DIO_u8SetPortValue+0x7e>
		  		 break;

	case DIO_PORTB:

		  		 DDRB = Copy_u8Value;
    11d8:	e7 e3       	ldi	r30, 0x37	; 55
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	80 83       	st	Z, r24
    11e0:	0b c0       	rjmp	.+22     	; 0x11f8 <DIO_u8SetPortValue+0x7e>

		  break;
	case DIO_PORTC:

		  		 DDRC = Copy_u8Value;
    11e2:	e4 e3       	ldi	r30, 0x34	; 52
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	80 83       	st	Z, r24
    11ea:	06 c0       	rjmp	.+12     	; 0x11f8 <DIO_u8SetPortValue+0x7e>

			break;
	case DIO_PORTD:

		  		 DDRD = Copy_u8Value;
    11ec:	e1 e3       	ldi	r30, 0x31	; 49
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	80 83       	st	Z, r24
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <DIO_u8SetPortValue+0x7e>
		  		 break;
	default:
		Error_state = NOK;
    11f6:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	}
return Error_state;
    11f8:	89 81       	ldd	r24, Y+1	; 0x01


}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PinNumber , u8 Copy_u8PortNumber , u8* PtrToValue)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	27 97       	sbiw	r28, 0x07	; 7
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	8a 83       	std	Y+2, r24	; 0x02
    1220:	6b 83       	std	Y+3, r22	; 0x03
    1222:	5d 83       	std	Y+5, r21	; 0x05
    1224:	4c 83       	std	Y+4, r20	; 0x04

	 u8 Error_state = OK;
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	89 83       	std	Y+1, r24	; 0x01

		 if((Copy_u8PinNumber<8)&& (PtrToValue !=NULL_POINTER))
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	88 30       	cpi	r24, 0x08	; 8
    122e:	08 f0       	brcs	.+2      	; 0x1232 <DIO_u8GetPinValue+0x28>
    1230:	79 c0       	rjmp	.+242    	; 0x1324 <DIO_u8GetPinValue+0x11a>
    1232:	8c 81       	ldd	r24, Y+4	; 0x04
    1234:	9d 81       	ldd	r25, Y+5	; 0x05
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	91 05       	cpc	r25, r1
    123a:	09 f4       	brne	.+2      	; 0x123e <DIO_u8GetPinValue+0x34>
    123c:	73 c0       	rjmp	.+230    	; 0x1324 <DIO_u8GetPinValue+0x11a>
		  {
	  switch (Copy_u8PortNumber)
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	3f 83       	std	Y+7, r19	; 0x07
    1246:	2e 83       	std	Y+6, r18	; 0x06
    1248:	4e 81       	ldd	r20, Y+6	; 0x06
    124a:	5f 81       	ldd	r21, Y+7	; 0x07
    124c:	41 30       	cpi	r20, 0x01	; 1
    124e:	51 05       	cpc	r21, r1
    1250:	59 f1       	breq	.+86     	; 0x12a8 <DIO_u8GetPinValue+0x9e>
    1252:	8e 81       	ldd	r24, Y+6	; 0x06
    1254:	9f 81       	ldd	r25, Y+7	; 0x07
    1256:	82 30       	cpi	r24, 0x02	; 2
    1258:	91 05       	cpc	r25, r1
    125a:	34 f4       	brge	.+12     	; 0x1268 <DIO_u8GetPinValue+0x5e>
    125c:	2e 81       	ldd	r18, Y+6	; 0x06
    125e:	3f 81       	ldd	r19, Y+7	; 0x07
    1260:	21 15       	cp	r18, r1
    1262:	31 05       	cpc	r19, r1
    1264:	69 f0       	breq	.+26     	; 0x1280 <DIO_u8GetPinValue+0x76>
    1266:	5c c0       	rjmp	.+184    	; 0x1320 <DIO_u8GetPinValue+0x116>
    1268:	4e 81       	ldd	r20, Y+6	; 0x06
    126a:	5f 81       	ldd	r21, Y+7	; 0x07
    126c:	42 30       	cpi	r20, 0x02	; 2
    126e:	51 05       	cpc	r21, r1
    1270:	79 f1       	breq	.+94     	; 0x12d0 <DIO_u8GetPinValue+0xc6>
    1272:	8e 81       	ldd	r24, Y+6	; 0x06
    1274:	9f 81       	ldd	r25, Y+7	; 0x07
    1276:	83 30       	cpi	r24, 0x03	; 3
    1278:	91 05       	cpc	r25, r1
    127a:	09 f4       	brne	.+2      	; 0x127e <DIO_u8GetPinValue+0x74>
    127c:	3d c0       	rjmp	.+122    	; 0x12f8 <DIO_u8GetPinValue+0xee>
    127e:	50 c0       	rjmp	.+160    	; 0x1320 <DIO_u8GetPinValue+0x116>
	  {
	  case DIO_PORTA:
		  *PtrToValue = GetBitvalue(PINA ,Copy_u8PinNumber );
    1280:	e9 e3       	ldi	r30, 0x39	; 57
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_u8GetPinValue+0x8e>
    1294:	55 95       	asr	r21
    1296:	47 95       	ror	r20
    1298:	8a 95       	dec	r24
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_u8GetPinValue+0x8a>
    129c:	ca 01       	movw	r24, r20
    129e:	81 70       	andi	r24, 0x01	; 1
    12a0:	ec 81       	ldd	r30, Y+4	; 0x04
    12a2:	fd 81       	ldd	r31, Y+5	; 0x05
    12a4:	80 83       	st	Z, r24
    12a6:	3f c0       	rjmp	.+126    	; 0x1326 <DIO_u8GetPinValue+0x11c>
		  break;
	  case DIO_PORTB:
		  *PtrToValue = GetBitvalue(PINB ,Copy_u8PinNumber );
    12a8:	e6 e3       	ldi	r30, 0x36	; 54
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	88 2f       	mov	r24, r24
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a9 01       	movw	r20, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_u8GetPinValue+0xb6>
    12bc:	55 95       	asr	r21
    12be:	47 95       	ror	r20
    12c0:	8a 95       	dec	r24
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_u8GetPinValue+0xb2>
    12c4:	ca 01       	movw	r24, r20
    12c6:	81 70       	andi	r24, 0x01	; 1
    12c8:	ec 81       	ldd	r30, Y+4	; 0x04
    12ca:	fd 81       	ldd	r31, Y+5	; 0x05
    12cc:	80 83       	st	Z, r24
    12ce:	2b c0       	rjmp	.+86     	; 0x1326 <DIO_u8GetPinValue+0x11c>
	  	  break;
	  case DIO_PORTC:
		  *PtrToValue = GetBitvalue(PINC ,Copy_u8PinNumber );
    12d0:	e3 e3       	ldi	r30, 0x33	; 51
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	88 2f       	mov	r24, r24
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a9 01       	movw	r20, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_u8GetPinValue+0xde>
    12e4:	55 95       	asr	r21
    12e6:	47 95       	ror	r20
    12e8:	8a 95       	dec	r24
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_u8GetPinValue+0xda>
    12ec:	ca 01       	movw	r24, r20
    12ee:	81 70       	andi	r24, 0x01	; 1
    12f0:	ec 81       	ldd	r30, Y+4	; 0x04
    12f2:	fd 81       	ldd	r31, Y+5	; 0x05
    12f4:	80 83       	st	Z, r24
    12f6:	17 c0       	rjmp	.+46     	; 0x1326 <DIO_u8GetPinValue+0x11c>
	  	  break;
	  case DIO_PORTD:
		  *PtrToValue = GetBitvalue(PIND ,Copy_u8PinNumber );
    12f8:	e0 e3       	ldi	r30, 0x30	; 48
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	88 2f       	mov	r24, r24
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	a9 01       	movw	r20, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_u8GetPinValue+0x106>
    130c:	55 95       	asr	r21
    130e:	47 95       	ror	r20
    1310:	8a 95       	dec	r24
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_u8GetPinValue+0x102>
    1314:	ca 01       	movw	r24, r20
    1316:	81 70       	andi	r24, 0x01	; 1
    1318:	ec 81       	ldd	r30, Y+4	; 0x04
    131a:	fd 81       	ldd	r31, Y+5	; 0x05
    131c:	80 83       	st	Z, r24
    131e:	03 c0       	rjmp	.+6      	; 0x1326 <DIO_u8GetPinValue+0x11c>
	  	  break;
	  default:
		  Error_state = NOK;
    1320:	19 82       	std	Y+1, r1	; 0x01
    1322:	01 c0       	rjmp	.+2      	; 0x1326 <DIO_u8GetPinValue+0x11c>
		  }
		  }
	  else
	  {
		  Error_state = NOK;
    1324:	19 82       	std	Y+1, r1	; 0x01

	  }
		 return Error_state;
    1326:	89 81       	ldd	r24, Y+1	; 0x01


}
    1328:	27 96       	adiw	r28, 0x07	; 7
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <DIO_u8Set4PinDirection>:

u8 DIO_u8Set4PinDirection(u8 Copy_u8PinMode , u8 Copy_u8PortNumber , u8 Copy_u8Direction)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	00 d0       	rcall	.+0      	; 0x1340 <DIO_u8Set4PinDirection+0x6>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <DIO_u8Set4PinDirection+0x8>
    1342:	00 d0       	rcall	.+0      	; 0x1344 <DIO_u8Set4PinDirection+0xa>
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	8a 83       	std	Y+2, r24	; 0x02
    134a:	6b 83       	std	Y+3, r22	; 0x03
    134c:	4c 83       	std	Y+4, r20	; 0x04
u8 Error_state = OK;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	89 83       	std	Y+1, r24	; 0x01
switch(Copy_u8PortNumber)
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	3e 83       	std	Y+6, r19	; 0x06
    135a:	2d 83       	std	Y+5, r18	; 0x05
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	91 05       	cpc	r25, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <DIO_u8Set4PinDirection+0x2e>
    1366:	51 c0       	rjmp	.+162    	; 0x140a <DIO_u8Set4PinDirection+0xd0>
    1368:	2d 81       	ldd	r18, Y+5	; 0x05
    136a:	3e 81       	ldd	r19, Y+6	; 0x06
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	2c f4       	brge	.+10     	; 0x137c <DIO_u8Set4PinDirection+0x42>
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	71 f0       	breq	.+28     	; 0x1396 <DIO_u8Set4PinDirection+0x5c>
    137a:	f5 c0       	rjmp	.+490    	; 0x1566 <DIO_u8Set4PinDirection+0x22c>
    137c:	2d 81       	ldd	r18, Y+5	; 0x05
    137e:	3e 81       	ldd	r19, Y+6	; 0x06
    1380:	22 30       	cpi	r18, 0x02	; 2
    1382:	31 05       	cpc	r19, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <DIO_u8Set4PinDirection+0x4e>
    1386:	7b c0       	rjmp	.+246    	; 0x147e <DIO_u8Set4PinDirection+0x144>
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	91 05       	cpc	r25, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <DIO_u8Set4PinDirection+0x5a>
    1392:	af c0       	rjmp	.+350    	; 0x14f2 <DIO_u8Set4PinDirection+0x1b8>
    1394:	e8 c0       	rjmp	.+464    	; 0x1566 <DIO_u8Set4PinDirection+0x22c>
{
case DIO_PORTA:
if((Copy_u8PinMode == MSB)&&(Copy_u8Direction == PIN_OUTPUT))
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	59 f4       	brne	.+22     	; 0x13b2 <DIO_u8Set4PinDirection+0x78>
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	41 f4       	brne	.+16     	; 0x13b2 <DIO_u8Set4PinDirection+0x78>
{
	DDRA = (DDRA|0xf0) ;
    13a2:	aa e3       	ldi	r26, 0x3A	; 58
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	ea e3       	ldi	r30, 0x3A	; 58
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	80 6f       	ori	r24, 0xF0	; 240
    13ae:	8c 93       	st	X, r24
    13b0:	db c0       	rjmp	.+438    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}
else if((Copy_u8PinMode == MSB)&&(Copy_u8Direction == PIN_INPUT))
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	59 f4       	brne	.+22     	; 0x13ce <DIO_u8Set4PinDirection+0x94>
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	88 23       	and	r24, r24
    13bc:	41 f4       	brne	.+16     	; 0x13ce <DIO_u8Set4PinDirection+0x94>
{
	DDRA = (DDRA&0x0f) ;
    13be:	aa e3       	ldi	r26, 0x3A	; 58
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	ea e3       	ldi	r30, 0x3A	; 58
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8f 70       	andi	r24, 0x0F	; 15
    13ca:	8c 93       	st	X, r24
    13cc:	cd c0       	rjmp	.+410    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>

}
else if((Copy_u8PinMode == LSB)&&(Copy_u8Direction == PIN_OUTPUT))
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	88 23       	and	r24, r24
    13d2:	59 f4       	brne	.+22     	; 0x13ea <DIO_u8Set4PinDirection+0xb0>
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	41 f4       	brne	.+16     	; 0x13ea <DIO_u8Set4PinDirection+0xb0>
{
	DDRA = (DDRA|0x0f) ;
    13da:	aa e3       	ldi	r26, 0x3A	; 58
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	ea e3       	ldi	r30, 0x3A	; 58
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	8f 60       	ori	r24, 0x0F	; 15
    13e6:	8c 93       	st	X, r24
    13e8:	bf c0       	rjmp	.+382    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}
else if((Copy_u8PinMode == LSB)&&(Copy_u8Direction == PIN_INPUT))
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	88 23       	and	r24, r24
    13ee:	59 f4       	brne	.+22     	; 0x1406 <DIO_u8Set4PinDirection+0xcc>
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
    13f2:	88 23       	and	r24, r24
    13f4:	41 f4       	brne	.+16     	; 0x1406 <DIO_u8Set4PinDirection+0xcc>
{
	DDRA = (DDRA&0xf0) ;
    13f6:	aa e3       	ldi	r26, 0x3A	; 58
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	ea e3       	ldi	r30, 0x3A	; 58
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 7f       	andi	r24, 0xF0	; 240
    1402:	8c 93       	st	X, r24
    1404:	b1 c0       	rjmp	.+354    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}
else
{
	Error_state = NOK;
    1406:	19 82       	std	Y+1, r1	; 0x01
    1408:	af c0       	rjmp	.+350    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}


break;
case DIO_PORTB:
if((Copy_u8PinMode == MSB)&&(Copy_u8Direction == PIN_OUTPUT))
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	59 f4       	brne	.+22     	; 0x1426 <DIO_u8Set4PinDirection+0xec>
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	41 f4       	brne	.+16     	; 0x1426 <DIO_u8Set4PinDirection+0xec>
{
	DDRB = (DDRB|0xf0) ;
    1416:	a7 e3       	ldi	r26, 0x37	; 55
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e7 e3       	ldi	r30, 0x37	; 55
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	80 6f       	ori	r24, 0xF0	; 240
    1422:	8c 93       	st	X, r24
    1424:	a1 c0       	rjmp	.+322    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}
else if((Copy_u8PinMode == MSB)&&(Copy_u8Direction == PIN_INPUT))
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	59 f4       	brne	.+22     	; 0x1442 <DIO_u8Set4PinDirection+0x108>
    142c:	8c 81       	ldd	r24, Y+4	; 0x04
    142e:	88 23       	and	r24, r24
    1430:	41 f4       	brne	.+16     	; 0x1442 <DIO_u8Set4PinDirection+0x108>
{
	DDRB = (DDRB&0x0f) ;
    1432:	a7 e3       	ldi	r26, 0x37	; 55
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e7 e3       	ldi	r30, 0x37	; 55
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	8f 70       	andi	r24, 0x0F	; 15
    143e:	8c 93       	st	X, r24
    1440:	93 c0       	rjmp	.+294    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>

}
else if((Copy_u8PinMode == LSB)&&(Copy_u8Direction == PIN_OUTPUT))
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	88 23       	and	r24, r24
    1446:	59 f4       	brne	.+22     	; 0x145e <DIO_u8Set4PinDirection+0x124>
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	41 f4       	brne	.+16     	; 0x145e <DIO_u8Set4PinDirection+0x124>
{
	DDRB = (DDRB|0x0f) ;
    144e:	a7 e3       	ldi	r26, 0x37	; 55
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e7 e3       	ldi	r30, 0x37	; 55
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8f 60       	ori	r24, 0x0F	; 15
    145a:	8c 93       	st	X, r24
    145c:	85 c0       	rjmp	.+266    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}
else if((Copy_u8PinMode == LSB)&&(Copy_u8Direction == PIN_INPUT))
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	88 23       	and	r24, r24
    1462:	59 f4       	brne	.+22     	; 0x147a <DIO_u8Set4PinDirection+0x140>
    1464:	8c 81       	ldd	r24, Y+4	; 0x04
    1466:	88 23       	and	r24, r24
    1468:	41 f4       	brne	.+16     	; 0x147a <DIO_u8Set4PinDirection+0x140>
{
	DDRB = (DDRB&0xf0) ;
    146a:	a7 e3       	ldi	r26, 0x37	; 55
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e7 e3       	ldi	r30, 0x37	; 55
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 7f       	andi	r24, 0xF0	; 240
    1476:	8c 93       	st	X, r24
    1478:	77 c0       	rjmp	.+238    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}
else
{
	Error_state = NOK;
    147a:	19 82       	std	Y+1, r1	; 0x01
    147c:	75 c0       	rjmp	.+234    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}


break;
case DIO_PORTC:
if((Copy_u8PinMode == MSB)&&(Copy_u8Direction == PIN_OUTPUT))
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	59 f4       	brne	.+22     	; 0x149a <DIO_u8Set4PinDirection+0x160>
    1484:	8c 81       	ldd	r24, Y+4	; 0x04
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	41 f4       	brne	.+16     	; 0x149a <DIO_u8Set4PinDirection+0x160>
{
	DDRC = (DDRC|0xf0) ;
    148a:	a4 e3       	ldi	r26, 0x34	; 52
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e4 e3       	ldi	r30, 0x34	; 52
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	80 6f       	ori	r24, 0xF0	; 240
    1496:	8c 93       	st	X, r24
    1498:	67 c0       	rjmp	.+206    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}
else if((Copy_u8PinMode == MSB)&&(Copy_u8Direction == PIN_INPUT))
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	59 f4       	brne	.+22     	; 0x14b6 <DIO_u8Set4PinDirection+0x17c>
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	88 23       	and	r24, r24
    14a4:	41 f4       	brne	.+16     	; 0x14b6 <DIO_u8Set4PinDirection+0x17c>
{
	DDRC = (DDRC&0x0f) ;
    14a6:	a4 e3       	ldi	r26, 0x34	; 52
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e4 e3       	ldi	r30, 0x34	; 52
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	8f 70       	andi	r24, 0x0F	; 15
    14b2:	8c 93       	st	X, r24
    14b4:	59 c0       	rjmp	.+178    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>

}
else if((Copy_u8PinMode == LSB)&&(Copy_u8Direction == PIN_OUTPUT))
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	88 23       	and	r24, r24
    14ba:	59 f4       	brne	.+22     	; 0x14d2 <DIO_u8Set4PinDirection+0x198>
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	41 f4       	brne	.+16     	; 0x14d2 <DIO_u8Set4PinDirection+0x198>
{
	DDRC = (DDRC|0x0f) ;
    14c2:	a4 e3       	ldi	r26, 0x34	; 52
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e4 e3       	ldi	r30, 0x34	; 52
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	8f 60       	ori	r24, 0x0F	; 15
    14ce:	8c 93       	st	X, r24
    14d0:	4b c0       	rjmp	.+150    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}
else if((Copy_u8PinMode == LSB)&&(Copy_u8Direction == PIN_INPUT))
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	88 23       	and	r24, r24
    14d6:	59 f4       	brne	.+22     	; 0x14ee <DIO_u8Set4PinDirection+0x1b4>
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	88 23       	and	r24, r24
    14dc:	41 f4       	brne	.+16     	; 0x14ee <DIO_u8Set4PinDirection+0x1b4>
{
	DDRC = (DDRC&0xf0) ;
    14de:	a4 e3       	ldi	r26, 0x34	; 52
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e4 e3       	ldi	r30, 0x34	; 52
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	80 7f       	andi	r24, 0xF0	; 240
    14ea:	8c 93       	st	X, r24
    14ec:	3d c0       	rjmp	.+122    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}
else
{
	Error_state = NOK;
    14ee:	19 82       	std	Y+1, r1	; 0x01
    14f0:	3b c0       	rjmp	.+118    	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}


break;
case DIO_PORTD:
if((Copy_u8PinMode == MSB)&&(Copy_u8Direction == PIN_OUTPUT))
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	59 f4       	brne	.+22     	; 0x150e <DIO_u8Set4PinDirection+0x1d4>
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	41 f4       	brne	.+16     	; 0x150e <DIO_u8Set4PinDirection+0x1d4>
{
	DDRD = (DDRD|0xf0) ;
    14fe:	a1 e3       	ldi	r26, 0x31	; 49
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e1 e3       	ldi	r30, 0x31	; 49
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	80 6f       	ori	r24, 0xF0	; 240
    150a:	8c 93       	st	X, r24
    150c:	2d c0       	rjmp	.+90     	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}
else if((Copy_u8PinMode == MSB)&&(Copy_u8Direction == PIN_INPUT))
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	59 f4       	brne	.+22     	; 0x152a <DIO_u8Set4PinDirection+0x1f0>
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
    1516:	88 23       	and	r24, r24
    1518:	41 f4       	brne	.+16     	; 0x152a <DIO_u8Set4PinDirection+0x1f0>
{
	DDRD = (DDRD&0x0f) ;
    151a:	a1 e3       	ldi	r26, 0x31	; 49
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e1 e3       	ldi	r30, 0x31	; 49
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8f 70       	andi	r24, 0x0F	; 15
    1526:	8c 93       	st	X, r24
    1528:	1f c0       	rjmp	.+62     	; 0x1568 <DIO_u8Set4PinDirection+0x22e>

}
else if((Copy_u8PinMode == LSB)&&(Copy_u8Direction == PIN_OUTPUT))
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	88 23       	and	r24, r24
    152e:	59 f4       	brne	.+22     	; 0x1546 <DIO_u8Set4PinDirection+0x20c>
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	41 f4       	brne	.+16     	; 0x1546 <DIO_u8Set4PinDirection+0x20c>
{
	DDRD = (DDRD|0x0f) ;
    1536:	a1 e3       	ldi	r26, 0x31	; 49
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e1 e3       	ldi	r30, 0x31	; 49
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8f 60       	ori	r24, 0x0F	; 15
    1542:	8c 93       	st	X, r24
    1544:	11 c0       	rjmp	.+34     	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}
else if((Copy_u8PinMode == LSB)&&(Copy_u8Direction == PIN_INPUT))
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	88 23       	and	r24, r24
    154a:	59 f4       	brne	.+22     	; 0x1562 <DIO_u8Set4PinDirection+0x228>
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	88 23       	and	r24, r24
    1550:	41 f4       	brne	.+16     	; 0x1562 <DIO_u8Set4PinDirection+0x228>
{
	DDRD = (DDRD	&0xf0) ;
    1552:	a1 e3       	ldi	r26, 0x31	; 49
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e1 e3       	ldi	r30, 0x31	; 49
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	80 7f       	andi	r24, 0xF0	; 240
    155e:	8c 93       	st	X, r24
    1560:	03 c0       	rjmp	.+6      	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}
else
{
	Error_state = NOK;
    1562:	19 82       	std	Y+1, r1	; 0x01
    1564:	01 c0       	rjmp	.+2      	; 0x1568 <DIO_u8Set4PinDirection+0x22e>
}


break;
default:
	Error_state = NOK;
    1566:	19 82       	std	Y+1, r1	; 0x01
	break;
}


return Error_state;
    1568:	89 81       	ldd	r24, Y+1	; 0x01


}
    156a:	26 96       	adiw	r28, 0x06	; 6
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <DIO_u8Set4PinValue>:


u8 DIO_u8Set4PinValue(u8 Copy_u8PinMode , u8 Copy_u8PortNumber , u8 Copy_u8Value)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <DIO_u8Set4PinValue+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <DIO_u8Set4PinValue+0x8>
    1584:	00 d0       	rcall	.+0      	; 0x1586 <DIO_u8Set4PinValue+0xa>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	8a 83       	std	Y+2, r24	; 0x02
    158c:	6b 83       	std	Y+3, r22	; 0x03
    158e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state = OK;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortNumber)
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	3e 83       	std	Y+6, r19	; 0x06
    159c:	2d 83       	std	Y+5, r18	; 0x05
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	9e 81       	ldd	r25, Y+6	; 0x06
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	91 05       	cpc	r25, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <DIO_u8Set4PinValue+0x2e>
    15a8:	4b c0       	rjmp	.+150    	; 0x1640 <DIO_u8Set4PinValue+0xc4>
    15aa:	2d 81       	ldd	r18, Y+5	; 0x05
    15ac:	3e 81       	ldd	r19, Y+6	; 0x06
    15ae:	22 30       	cpi	r18, 0x02	; 2
    15b0:	31 05       	cpc	r19, r1
    15b2:	2c f4       	brge	.+10     	; 0x15be <DIO_u8Set4PinValue+0x42>
    15b4:	8d 81       	ldd	r24, Y+5	; 0x05
    15b6:	9e 81       	ldd	r25, Y+6	; 0x06
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	71 f0       	breq	.+28     	; 0x15d8 <DIO_u8Set4PinValue+0x5c>
    15bc:	dd c0       	rjmp	.+442    	; 0x1778 <DIO_u8Set4PinValue+0x1fc>
    15be:	2d 81       	ldd	r18, Y+5	; 0x05
    15c0:	3e 81       	ldd	r19, Y+6	; 0x06
    15c2:	22 30       	cpi	r18, 0x02	; 2
    15c4:	31 05       	cpc	r19, r1
    15c6:	09 f4       	brne	.+2      	; 0x15ca <DIO_u8Set4PinValue+0x4e>
    15c8:	6f c0       	rjmp	.+222    	; 0x16a8 <DIO_u8Set4PinValue+0x12c>
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	9e 81       	ldd	r25, Y+6	; 0x06
    15ce:	83 30       	cpi	r24, 0x03	; 3
    15d0:	91 05       	cpc	r25, r1
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <DIO_u8Set4PinValue+0x5a>
    15d4:	9d c0       	rjmp	.+314    	; 0x1710 <DIO_u8Set4PinValue+0x194>
    15d6:	d0 c0       	rjmp	.+416    	; 0x1778 <DIO_u8Set4PinValue+0x1fc>
	{
	case DIO_PORTA:
		if(Copy_u8PinMode == LSB)
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	88 23       	and	r24, r24
    15dc:	99 f4       	brne	.+38     	; 0x1604 <DIO_u8Set4PinValue+0x88>
		{
			Copy_u8Value&=0xf0;
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	80 7f       	andi	r24, 0xF0	; 240
    15e2:	8c 83       	std	Y+4, r24	; 0x04
			PORTA&=0x0f;
    15e4:	ab e3       	ldi	r26, 0x3B	; 59
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	eb e3       	ldi	r30, 0x3B	; 59
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8f 70       	andi	r24, 0x0F	; 15
    15f0:	8c 93       	st	X, r24
			PORTA|=Copy_u8Value;
    15f2:	ab e3       	ldi	r26, 0x3B	; 59
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	eb e3       	ldi	r30, 0x3B	; 59
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	90 81       	ld	r25, Z
    15fc:	8c 81       	ldd	r24, Y+4	; 0x04
    15fe:	89 2b       	or	r24, r25
    1600:	8c 93       	st	X, r24
    1602:	bb c0       	rjmp	.+374    	; 0x177a <DIO_u8Set4PinValue+0x1fe>

		}
		else if (Copy_u8PinMode == MSB)
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	c9 f4       	brne	.+50     	; 0x163c <DIO_u8Set4PinValue+0xc0>
		{
			PORTA&=0x0f;
    160a:	ab e3       	ldi	r26, 0x3B	; 59
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	eb e3       	ldi	r30, 0x3B	; 59
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	8f 70       	andi	r24, 0x0F	; 15
    1616:	8c 93       	st	X, r24

			PORTA|=(Copy_u8Value<<4);
    1618:	ab e3       	ldi	r26, 0x3B	; 59
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	eb e3       	ldi	r30, 0x3B	; 59
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	28 2f       	mov	r18, r24
    1624:	8c 81       	ldd	r24, Y+4	; 0x04
    1626:	88 2f       	mov	r24, r24
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	82 95       	swap	r24
    162c:	92 95       	swap	r25
    162e:	90 7f       	andi	r25, 0xF0	; 240
    1630:	98 27       	eor	r25, r24
    1632:	80 7f       	andi	r24, 0xF0	; 240
    1634:	98 27       	eor	r25, r24
    1636:	82 2b       	or	r24, r18
    1638:	8c 93       	st	X, r24
    163a:	9f c0       	rjmp	.+318    	; 0x177a <DIO_u8Set4PinValue+0x1fe>
		}
		else
		{
			Error_state = NOK;
    163c:	19 82       	std	Y+1, r1	; 0x01
    163e:	9d c0       	rjmp	.+314    	; 0x177a <DIO_u8Set4PinValue+0x1fe>

		}

		break;
	case DIO_PORTB:
		if(Copy_u8PinMode == LSB)
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	88 23       	and	r24, r24
    1644:	99 f4       	brne	.+38     	; 0x166c <DIO_u8Set4PinValue+0xf0>
		{
			Copy_u8Value&=0xf0;
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
    1648:	80 7f       	andi	r24, 0xF0	; 240
    164a:	8c 83       	std	Y+4, r24	; 0x04
			PORTB&=0x0f;
    164c:	a8 e3       	ldi	r26, 0x38	; 56
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e8 e3       	ldi	r30, 0x38	; 56
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8f 70       	andi	r24, 0x0F	; 15
    1658:	8c 93       	st	X, r24
			PORTB|=Copy_u8Value;
    165a:	a8 e3       	ldi	r26, 0x38	; 56
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e8 e3       	ldi	r30, 0x38	; 56
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	90 81       	ld	r25, Z
    1664:	8c 81       	ldd	r24, Y+4	; 0x04
    1666:	89 2b       	or	r24, r25
    1668:	8c 93       	st	X, r24
    166a:	87 c0       	rjmp	.+270    	; 0x177a <DIO_u8Set4PinValue+0x1fe>

		}
		else if (Copy_u8PinMode == MSB)
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	c9 f4       	brne	.+50     	; 0x16a4 <DIO_u8Set4PinValue+0x128>
		{
			PORTB&=0x0f;
    1672:	a8 e3       	ldi	r26, 0x38	; 56
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e8 e3       	ldi	r30, 0x38	; 56
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	8f 70       	andi	r24, 0x0F	; 15
    167e:	8c 93       	st	X, r24
			PORTB|=(Copy_u8Value<<4);
    1680:	a8 e3       	ldi	r26, 0x38	; 56
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e8 e3       	ldi	r30, 0x38	; 56
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	28 2f       	mov	r18, r24
    168c:	8c 81       	ldd	r24, Y+4	; 0x04
    168e:	88 2f       	mov	r24, r24
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	82 95       	swap	r24
    1694:	92 95       	swap	r25
    1696:	90 7f       	andi	r25, 0xF0	; 240
    1698:	98 27       	eor	r25, r24
    169a:	80 7f       	andi	r24, 0xF0	; 240
    169c:	98 27       	eor	r25, r24
    169e:	82 2b       	or	r24, r18
    16a0:	8c 93       	st	X, r24
    16a2:	6b c0       	rjmp	.+214    	; 0x177a <DIO_u8Set4PinValue+0x1fe>
		}
		else
		{
			Error_state = NOK;
    16a4:	19 82       	std	Y+1, r1	; 0x01
    16a6:	69 c0       	rjmp	.+210    	; 0x177a <DIO_u8Set4PinValue+0x1fe>

		}

		break;
	case DIO_PORTC:
		if(Copy_u8PinMode == LSB)
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	88 23       	and	r24, r24
    16ac:	99 f4       	brne	.+38     	; 0x16d4 <DIO_u8Set4PinValue+0x158>
		{
			Copy_u8Value&=0xf0;
    16ae:	8c 81       	ldd	r24, Y+4	; 0x04
    16b0:	80 7f       	andi	r24, 0xF0	; 240
    16b2:	8c 83       	std	Y+4, r24	; 0x04
			PORTC&=0x0f;
    16b4:	a5 e3       	ldi	r26, 0x35	; 53
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e5 e3       	ldi	r30, 0x35	; 53
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	8f 70       	andi	r24, 0x0F	; 15
    16c0:	8c 93       	st	X, r24
			PORTC|=Copy_u8Value;
    16c2:	a5 e3       	ldi	r26, 0x35	; 53
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e5 e3       	ldi	r30, 0x35	; 53
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	90 81       	ld	r25, Z
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	89 2b       	or	r24, r25
    16d0:	8c 93       	st	X, r24
    16d2:	53 c0       	rjmp	.+166    	; 0x177a <DIO_u8Set4PinValue+0x1fe>

		}
		else if (Copy_u8PinMode == MSB)
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	c9 f4       	brne	.+50     	; 0x170c <DIO_u8Set4PinValue+0x190>
		{

			PORTC&=0x0f;
    16da:	a5 e3       	ldi	r26, 0x35	; 53
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e5 e3       	ldi	r30, 0x35	; 53
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	8f 70       	andi	r24, 0x0F	; 15
    16e6:	8c 93       	st	X, r24
			PORTC|=(Copy_u8Value<<4);
    16e8:	a5 e3       	ldi	r26, 0x35	; 53
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e5 e3       	ldi	r30, 0x35	; 53
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	28 2f       	mov	r18, r24
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	88 2f       	mov	r24, r24
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	82 95       	swap	r24
    16fc:	92 95       	swap	r25
    16fe:	90 7f       	andi	r25, 0xF0	; 240
    1700:	98 27       	eor	r25, r24
    1702:	80 7f       	andi	r24, 0xF0	; 240
    1704:	98 27       	eor	r25, r24
    1706:	82 2b       	or	r24, r18
    1708:	8c 93       	st	X, r24
    170a:	37 c0       	rjmp	.+110    	; 0x177a <DIO_u8Set4PinValue+0x1fe>
		}
		else
		{
			Error_state = NOK;
    170c:	19 82       	std	Y+1, r1	; 0x01
    170e:	35 c0       	rjmp	.+106    	; 0x177a <DIO_u8Set4PinValue+0x1fe>
		}

		break;

	case DIO_PORTD:
		if(Copy_u8PinMode == LSB)
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	88 23       	and	r24, r24
    1714:	99 f4       	brne	.+38     	; 0x173c <DIO_u8Set4PinValue+0x1c0>
		{
			Copy_u8Value&=0xf0;
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	80 7f       	andi	r24, 0xF0	; 240
    171a:	8c 83       	std	Y+4, r24	; 0x04
			PORTD&=0x0f;
    171c:	a2 e3       	ldi	r26, 0x32	; 50
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e2 e3       	ldi	r30, 0x32	; 50
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	8f 70       	andi	r24, 0x0F	; 15
    1728:	8c 93       	st	X, r24
			PORTD|=Copy_u8Value;
    172a:	a2 e3       	ldi	r26, 0x32	; 50
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e2 e3       	ldi	r30, 0x32	; 50
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	90 81       	ld	r25, Z
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
    1736:	89 2b       	or	r24, r25
    1738:	8c 93       	st	X, r24
    173a:	1f c0       	rjmp	.+62     	; 0x177a <DIO_u8Set4PinValue+0x1fe>

		}
		else if (Copy_u8PinMode == MSB)
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	c9 f4       	brne	.+50     	; 0x1774 <DIO_u8Set4PinValue+0x1f8>
		{

			PORTD&=0x0f;
    1742:	a2 e3       	ldi	r26, 0x32	; 50
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e2 e3       	ldi	r30, 0x32	; 50
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	8f 70       	andi	r24, 0x0F	; 15
    174e:	8c 93       	st	X, r24
			PORTD|=(Copy_u8Value<<4);
    1750:	a2 e3       	ldi	r26, 0x32	; 50
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e2 e3       	ldi	r30, 0x32	; 50
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	28 2f       	mov	r18, r24
    175c:	8c 81       	ldd	r24, Y+4	; 0x04
    175e:	88 2f       	mov	r24, r24
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	82 95       	swap	r24
    1764:	92 95       	swap	r25
    1766:	90 7f       	andi	r25, 0xF0	; 240
    1768:	98 27       	eor	r25, r24
    176a:	80 7f       	andi	r24, 0xF0	; 240
    176c:	98 27       	eor	r25, r24
    176e:	82 2b       	or	r24, r18
    1770:	8c 93       	st	X, r24
    1772:	03 c0       	rjmp	.+6      	; 0x177a <DIO_u8Set4PinValue+0x1fe>
		}
		else
		{
			Error_state = NOK;
    1774:	19 82       	std	Y+1, r1	; 0x01
    1776:	01 c0       	rjmp	.+2      	; 0x177a <DIO_u8Set4PinValue+0x1fe>

		}

		break;
	default:
		Error_state =NOK;
    1778:	19 82       	std	Y+1, r1	; 0x01
		break;


	}
	return Error_state;
    177a:	89 81       	ldd	r24, Y+1	; 0x01


}
    177c:	26 96       	adiw	r28, 0x06	; 6
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <EEPROM_voidSendDataByte>:
#include"EEPROM_Private.h"

#include<util/delay.h>

void EEPROM_voidSendDataByte(u8 Copy_u8Data,u8 Copy_u8PageNumber,u8 Copy_u8Location)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	62 97       	sbiw	r28, 0x12	; 18
    1798:	0f b6       	in	r0, 0x3f	; 63
    179a:	f8 94       	cli
    179c:	de bf       	out	0x3e, r29	; 62
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	cd bf       	out	0x3d, r28	; 61
    17a2:	88 8b       	std	Y+16, r24	; 0x10
    17a4:	69 8b       	std	Y+17, r22	; 0x11
    17a6:	4a 8b       	std	Y+18, r20	; 0x12
	u8 Local_u8AddressPacket;
	Local_u8AddressPacket=EEPROM_FIXED_ADDRESS|(Copy_u8PageNumber);
    17a8:	89 89       	ldd	r24, Y+17	; 0x11
    17aa:	80 65       	ori	r24, 0x50	; 80
    17ac:	8f 87       	std	Y+15, r24	; 0x0f
	/*Send Start Condition*/
	TWI_u8StartCondition();
    17ae:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <TWI_u8StartCondition>

	/*Send slave address*/
	TWI_u8SendSlaveAddressWithWrite(Local_u8AddressPacket);
    17b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <TWI_u8SendSlaveAddressWithWrite>
	/*Send 8 bits Location Data*/
	TWI_u8MasterSendDataByte(Copy_u8Location);
    17b8:	8a 89       	ldd	r24, Y+18	; 0x12
    17ba:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <TWI_u8MasterSendDataByte>
	/*Send 8 bits Data*/
	TWI_u8MasterSendDataByte(Copy_u8Data);
    17be:	88 89       	ldd	r24, Y+16	; 0x10
    17c0:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <TWI_u8MasterSendDataByte>
	/*Send Stop Condition*/
	TWI_voidStopCondtion();
    17c4:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <TWI_voidStopCondtion>
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a0 e2       	ldi	r26, 0x20	; 32
    17ce:	b1 e4       	ldi	r27, 0x41	; 65
    17d0:	8b 87       	std	Y+11, r24	; 0x0b
    17d2:	9c 87       	std	Y+12, r25	; 0x0c
    17d4:	ad 87       	std	Y+13, r26	; 0x0d
    17d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17da:	7c 85       	ldd	r23, Y+12	; 0x0c
    17dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17de:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	4a e7       	ldi	r20, 0x7A	; 122
    17e6:	55 e4       	ldi	r21, 0x45	; 69
    17e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	8f 83       	std	Y+7, r24	; 0x07
    17f2:	98 87       	std	Y+8, r25	; 0x08
    17f4:	a9 87       	std	Y+9, r26	; 0x09
    17f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17f8:	6f 81       	ldd	r22, Y+7	; 0x07
    17fa:	78 85       	ldd	r23, Y+8	; 0x08
    17fc:	89 85       	ldd	r24, Y+9	; 0x09
    17fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e8       	ldi	r20, 0x80	; 128
    1806:	5f e3       	ldi	r21, 0x3F	; 63
    1808:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    180c:	88 23       	and	r24, r24
    180e:	2c f4       	brge	.+10     	; 0x181a <EEPROM_voidSendDataByte+0x8c>
		__ticks = 1;
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	9e 83       	std	Y+6, r25	; 0x06
    1816:	8d 83       	std	Y+5, r24	; 0x05
    1818:	3f c0       	rjmp	.+126    	; 0x1898 <EEPROM_voidSendDataByte+0x10a>
	else if (__tmp > 65535)
    181a:	6f 81       	ldd	r22, Y+7	; 0x07
    181c:	78 85       	ldd	r23, Y+8	; 0x08
    181e:	89 85       	ldd	r24, Y+9	; 0x09
    1820:	9a 85       	ldd	r25, Y+10	; 0x0a
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	3f ef       	ldi	r19, 0xFF	; 255
    1826:	4f e7       	ldi	r20, 0x7F	; 127
    1828:	57 e4       	ldi	r21, 0x47	; 71
    182a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    182e:	18 16       	cp	r1, r24
    1830:	4c f5       	brge	.+82     	; 0x1884 <EEPROM_voidSendDataByte+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1832:	6b 85       	ldd	r22, Y+11	; 0x0b
    1834:	7c 85       	ldd	r23, Y+12	; 0x0c
    1836:	8d 85       	ldd	r24, Y+13	; 0x0d
    1838:	9e 85       	ldd	r25, Y+14	; 0x0e
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e2       	ldi	r20, 0x20	; 32
    1840:	51 e4       	ldi	r21, 0x41	; 65
    1842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	bc 01       	movw	r22, r24
    184c:	cd 01       	movw	r24, r26
    184e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	9e 83       	std	Y+6, r25	; 0x06
    1858:	8d 83       	std	Y+5, r24	; 0x05
    185a:	0f c0       	rjmp	.+30     	; 0x187a <EEPROM_voidSendDataByte+0xec>
    185c:	80 e9       	ldi	r24, 0x90	; 144
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	9c 83       	std	Y+4, r25	; 0x04
    1862:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	f1 f7       	brne	.-4      	; 0x1868 <EEPROM_voidSendDataByte+0xda>
    186c:	9c 83       	std	Y+4, r25	; 0x04
    186e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	9e 81       	ldd	r25, Y+6	; 0x06
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
    187c:	9e 81       	ldd	r25, Y+6	; 0x06
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	69 f7       	brne	.-38     	; 0x185c <EEPROM_voidSendDataByte+0xce>
    1882:	14 c0       	rjmp	.+40     	; 0x18ac <EEPROM_voidSendDataByte+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1884:	6f 81       	ldd	r22, Y+7	; 0x07
    1886:	78 85       	ldd	r23, Y+8	; 0x08
    1888:	89 85       	ldd	r24, Y+9	; 0x09
    188a:	9a 85       	ldd	r25, Y+10	; 0x0a
    188c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	9e 83       	std	Y+6, r25	; 0x06
    1896:	8d 83       	std	Y+5, r24	; 0x05
    1898:	8d 81       	ldd	r24, Y+5	; 0x05
    189a:	9e 81       	ldd	r25, Y+6	; 0x06
    189c:	9a 83       	std	Y+2, r25	; 0x02
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	f1 f7       	brne	.-4      	; 0x18a4 <EEPROM_voidSendDataByte+0x116>
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}
    18ac:	62 96       	adiw	r28, 0x12	; 18
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <EEPROM_u8ReadDataByte>:
u8 EEPROM_u8ReadDataByte(u8 Copy_u8PageNumber,u8 Copy_u8Location)
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <EEPROM_u8ReadDataByte+0x6>
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <EEPROM_u8ReadDataByte+0x8>
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	8b 83       	std	Y+3, r24	; 0x03
    18cc:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8AddressPacket;
	u8 Local_u8DataByte;
	Local_u8AddressPacket=EEPROM_FIXED_ADDRESS|Copy_u8PageNumber;
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	80 65       	ori	r24, 0x50	; 80
    18d2:	89 83       	std	Y+1, r24	; 0x01
	/*Send Start Condition*/
	TWI_u8StartCondition();
    18d4:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <TWI_u8StartCondition>
	/*Send slave address*/
	TWI_u8SendSlaveAddressWithWrite(Local_u8AddressPacket);
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <TWI_u8SendSlaveAddressWithWrite>
	/*Send 8 bits Location Data*/
	TWI_u8MasterSendDataByte(Copy_u8Location);
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <TWI_u8MasterSendDataByte>
	/*Send Repeated Start*/
	TWI_u8RepeatedStart();
    18e4:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <TWI_u8RepeatedStart>
	/*Send Slave Address with read*/
	TWI_u8SendSlaveAddressWithRead(Local_u8AddressPacket);
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <TWI_u8SendSlaveAddressWithRead>
	/*read data byte*/
	TWI_u8MasterReadDataByte(&Local_u8DataByte);
    18ee:	ce 01       	movw	r24, r28
    18f0:	02 96       	adiw	r24, 0x02	; 2
    18f2:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <TWI_u8MasterReadDataByte>
	/*Send Stop Condition*/
	TWI_voidStopCondtion();
    18f6:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <TWI_voidStopCondtion>

	return Local_u8DataByte;
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <GIE_voidEnable>:
#include "GIE_interface.h"
#include "STD_LIB.h"
#include "bitmath.h"

void GIE_voidEnable(void)
{
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
	SETBITvalue(SREG,7);
    1912:	af e5       	ldi	r26, 0x5F	; 95
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	ef e5       	ldi	r30, 0x5F	; 95
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	80 68       	ori	r24, 0x80	; 128
    191e:	8c 93       	st	X, r24
}
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <H_voidPeltier_Cooling>:
 */
#include "H_BRIDGE_Config.h"
#include "DIO_interface.h"
#include "H_BRIDGE_Interface.h"
void H_voidPeltier_Cooling()
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(R_EN_PIN,H_BRIDGE_PORT,HIGH);
    192e:	83 e0       	ldi	r24, 0x03	; 3
    1930:	62 e0       	ldi	r22, 0x02	; 2
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(L_EN_PIN,H_BRIDGE_PORT,HIGH);
    1938:	84 e0       	ldi	r24, 0x04	; 4
    193a:	62 e0       	ldi	r22, 0x02	; 2
    193c:	41 e0       	ldi	r20, 0x01	; 1
    193e:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(RPWM_PIN,H_BRIDGE_PORT,HIGH);
    1942:	85 e0       	ldi	r24, 0x05	; 5
    1944:	62 e0       	ldi	r22, 0x02	; 2
    1946:	41 e0       	ldi	r20, 0x01	; 1
    1948:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LPWM_PIN,H_BRIDGE_PORT,LOW);
    194c:	86 e0       	ldi	r24, 0x06	; 6
    194e:	62 e0       	ldi	r22, 0x02	; 2
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
}
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <H_voidPeltier_Heating>:
void H_voidPeltier_Heating()
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(R_EN_PIN,H_BRIDGE_PORT,HIGH);
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	62 e0       	ldi	r22, 0x02	; 2
    1968:	41 e0       	ldi	r20, 0x01	; 1
    196a:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(L_EN_PIN,H_BRIDGE_PORT,HIGH);
    196e:	84 e0       	ldi	r24, 0x04	; 4
    1970:	62 e0       	ldi	r22, 0x02	; 2
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(RPWM_PIN,H_BRIDGE_PORT,LOW);
    1978:	85 e0       	ldi	r24, 0x05	; 5
    197a:	62 e0       	ldi	r22, 0x02	; 2
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LPWM_PIN,H_BRIDGE_PORT,HIGH);
    1982:	86 e0       	ldi	r24, 0x06	; 6
    1984:	62 e0       	ldi	r22, 0x02	; 2
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
}
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <H_voidPeltier_OFF>:
void H_voidPeltier_OFF()
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(R_EN_PIN,H_BRIDGE_PORT,LOW);
    199a:	83 e0       	ldi	r24, 0x03	; 3
    199c:	62 e0       	ldi	r22, 0x02	; 2
    199e:	40 e0       	ldi	r20, 0x00	; 0
    19a0:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(L_EN_PIN,H_BRIDGE_PORT,LOW);
    19a4:	84 e0       	ldi	r24, 0x04	; 4
    19a6:	62 e0       	ldi	r22, 0x02	; 2
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(RPWM_PIN,H_BRIDGE_PORT,LOW);
    19ae:	85 e0       	ldi	r24, 0x05	; 5
    19b0:	62 e0       	ldi	r22, 0x02	; 2
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LPWM_PIN,H_BRIDGE_PORT,HIGH);
    19b8:	86 e0       	ldi	r24, 0x06	; 6
    19ba:	62 e0       	ldi	r22, 0x02	; 2
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
}
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <TWI_voidInitMaster>:
#include"STD_LIB.h"
#include"bitmath.h"
#include"TWI_Private.h"

void TWI_voidInitMaster(u8 Copy_u8Address )
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	0f 92       	push	r0
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	89 83       	std	Y+1, r24	; 0x01
	/*Enable to ACK*/
	SETBITvalue(TWCR,6);
    19d4:	a6 e5       	ldi	r26, 0x56	; 86
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e6 e5       	ldi	r30, 0x56	; 86
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	80 64       	ori	r24, 0x40	; 64
    19e0:	8c 93       	st	X, r24
	/*Select prescaler-->1*/
	CLRBITvalue(TWSR,1);
    19e2:	a1 e2       	ldi	r26, 0x21	; 33
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e1 e2       	ldi	r30, 0x21	; 33
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	8d 7f       	andi	r24, 0xFD	; 253
    19ee:	8c 93       	st	X, r24
	CLRBITvalue(TWSR,0);
    19f0:	a1 e2       	ldi	r26, 0x21	; 33
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	e1 e2       	ldi	r30, 0x21	; 33
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	8e 7f       	andi	r24, 0xFE	; 254
    19fc:	8c 93       	st	X, r24
	TWBR=3;
    19fe:	e0 e2       	ldi	r30, 0x20	; 32
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	83 e0       	ldi	r24, 0x03	; 3
    1a04:	80 83       	st	Z, r24
	/*Set Master Address*/
	TWAR=Copy_u8Address<<1;
    1a06:	e2 e2       	ldi	r30, 0x22	; 34
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	88 0f       	add	r24, r24
    1a0e:	80 83       	st	Z, r24
	/*TWI Enable*/
	SETBITvalue(TWCR,2);
    1a10:	a6 e5       	ldi	r26, 0x56	; 86
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e6 e5       	ldi	r30, 0x56	; 86
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	84 60       	ori	r24, 0x04	; 4
    1a1c:	8c 93       	st	X, r24
}
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <TWI_voidInitSlave>:
void TWI_voidInitSlave(u8 Copy_u8Address )
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	0f 92       	push	r0
    1a2c:	cd b7       	in	r28, 0x3d	; 61
    1a2e:	de b7       	in	r29, 0x3e	; 62
    1a30:	89 83       	std	Y+1, r24	; 0x01
	/*Enable to ACK*/
	SETBITvalue(TWCR,6);
    1a32:	a6 e5       	ldi	r26, 0x56	; 86
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e6 e5       	ldi	r30, 0x56	; 86
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	80 64       	ori	r24, 0x40	; 64
    1a3e:	8c 93       	st	X, r24
	/*Set own Address*/
	TWAR=Copy_u8Address<<1;
    1a40:	e2 e2       	ldi	r30, 0x22	; 34
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	88 0f       	add	r24, r24
    1a48:	80 83       	st	Z, r24
	/*TWI Enable*/
	SETBITvalue(TWCR,2);
    1a4a:	a6 e5       	ldi	r26, 0x56	; 86
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	e6 e5       	ldi	r30, 0x56	; 86
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	84 60       	ori	r24, 0x04	; 4
    1a56:	8c 93       	st	X, r24
}
    1a58:	0f 90       	pop	r0
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <TWI_u8StartCondition>:
u8 TWI_u8StartCondition(void)
{
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	0f 92       	push	r0
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
	u8 ErrorState=OK;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	89 83       	std	Y+1, r24	; 0x01
	/*Set Start Condition Bit*/
	SETBITvalue(TWCR,5);
    1a6e:	a6 e5       	ldi	r26, 0x56	; 86
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e6 e5       	ldi	r30, 0x56	; 86
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	80 62       	ori	r24, 0x20	; 32
    1a7a:	8c 93       	st	X, r24
	/*Clear TWINT Flag*/
	SETBITvalue(TWCR,7);
    1a7c:	a6 e5       	ldi	r26, 0x56	; 86
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e6 e5       	ldi	r30, 0x56	; 86
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	80 68       	ori	r24, 0x80	; 128
    1a88:	8c 93       	st	X, r24
	/*wait on flag until the operation is finished */
	while((GetBitvalue(TWCR,7))==0);
    1a8a:	e6 e5       	ldi	r30, 0x56	; 86
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	88 23       	and	r24, r24
    1a92:	dc f7       	brge	.-10     	; 0x1a8a <TWI_u8StartCondition+0x2a>

	/*check the operation status*/
	if(TWSR==0x08)
    1a94:	e1 e2       	ldi	r30, 0x21	; 33
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 30       	cpi	r24, 0x08	; 8
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <TWI_u8StartCondition+0x40>
	{
		/*Do Nothing*/
	}
	else
	{
		ErrorState=NOK;
    1a9e:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    1aa0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <TWI_u8SendSlaveAddressWithWrite>:
u8 TWI_u8SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <TWI_u8SendSlaveAddressWithWrite+0x6>
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	8a 83       	std	Y+2, r24	; 0x02
	u8 ErrorState=OK;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	89 83       	std	Y+1, r24	; 0x01
	/*Send 7bits Slave Address With Write*/
	TWDR=Copy_u8SlaveAddress<<1;
    1aba:	e3 e2       	ldi	r30, 0x23	; 35
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	88 0f       	add	r24, r24
    1ac2:	80 83       	st	Z, r24
	/*Set the write mode*/
	CLRBITvalue(TWDR,0);
    1ac4:	a3 e2       	ldi	r26, 0x23	; 35
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e3 e2       	ldi	r30, 0x23	; 35
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	8e 7f       	andi	r24, 0xFE	; 254
    1ad0:	8c 93       	st	X, r24
	/*Clear Start Condition Bit*/
	CLRBITvalue(TWCR,5);
    1ad2:	a6 e5       	ldi	r26, 0x56	; 86
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e6 e5       	ldi	r30, 0x56	; 86
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	8f 7d       	andi	r24, 0xDF	; 223
    1ade:	8c 93       	st	X, r24
	/*Clear TWINT Flag*/
	SETBITvalue(TWCR,7);
    1ae0:	a6 e5       	ldi	r26, 0x56	; 86
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e6 e5       	ldi	r30, 0x56	; 86
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	80 68       	ori	r24, 0x80	; 128
    1aec:	8c 93       	st	X, r24
	/*wait on flag until the operation is finished */
	while((GetBitvalue(TWCR,7))==0);
    1aee:	e6 e5       	ldi	r30, 0x56	; 86
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	88 23       	and	r24, r24
    1af6:	dc f7       	brge	.-10     	; 0x1aee <TWI_u8SendSlaveAddressWithWrite+0x44>

	/*check the operation status*/
	if(TWSR==0x18)
    1af8:	e1 e2       	ldi	r30, 0x21	; 33
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	88 31       	cpi	r24, 0x18	; 24
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <TWI_u8SendSlaveAddressWithWrite+0x5a>
	{
		/*Do Nothing*/
	}
	else
	{
		ErrorState=NOK;
    1b02:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <TWI_u8SendSlaveAddressWithRead>:
u8 TWI_u8SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <TWI_u8SendSlaveAddressWithRead+0x6>
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	8a 83       	std	Y+2, r24	; 0x02
	u8 ErrorState=OK;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	89 83       	std	Y+1, r24	; 0x01
	/*Send 7bits Slave Address With Write*/
	TWDR=Copy_u8SlaveAddress<<1;
    1b20:	e3 e2       	ldi	r30, 0x23	; 35
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	88 0f       	add	r24, r24
    1b28:	80 83       	st	Z, r24
	/*Set the Read mode*/
	SETBITvalue(TWDR,0);
    1b2a:	a3 e2       	ldi	r26, 0x23	; 35
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e3 e2       	ldi	r30, 0x23	; 35
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	81 60       	ori	r24, 0x01	; 1
    1b36:	8c 93       	st	X, r24
	/*Clear Start Condition Bit*/
	CLRBITvalue(TWCR,5);
    1b38:	a6 e5       	ldi	r26, 0x56	; 86
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e6 e5       	ldi	r30, 0x56	; 86
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	8f 7d       	andi	r24, 0xDF	; 223
    1b44:	8c 93       	st	X, r24
	/*Clear TWINT Flag*/
	SETBITvalue(TWCR,7);
    1b46:	a6 e5       	ldi	r26, 0x56	; 86
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e6 e5       	ldi	r30, 0x56	; 86
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	80 68       	ori	r24, 0x80	; 128
    1b52:	8c 93       	st	X, r24
	/*wait on flag until the operation is finished */
	while((GetBitvalue(TWCR,7))==0);
    1b54:	e6 e5       	ldi	r30, 0x56	; 86
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 23       	and	r24, r24
    1b5c:	dc f7       	brge	.-10     	; 0x1b54 <TWI_u8SendSlaveAddressWithRead+0x44>

	/*check the operation status*/
	if(TWSR==0x40)
    1b5e:	e1 e2       	ldi	r30, 0x21	; 33
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	80 34       	cpi	r24, 0x40	; 64
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <TWI_u8SendSlaveAddressWithRead+0x5a>
	{
		/*Do Nothing*/
	}
	else
	{
		ErrorState=NOK;
    1b68:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	08 95       	ret

00001b76 <TWI_u8MasterSendDataByte>:
u8 TWI_u8MasterSendDataByte(u8 Copy_u8Data)
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <TWI_u8MasterSendDataByte+0x6>
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	8a 83       	std	Y+2, r24	; 0x02
	u8 ErrorState=OK;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	89 83       	std	Y+1, r24	; 0x01
	/*Send 8bits Data*/
	TWDR=Copy_u8Data;
    1b86:	e3 e2       	ldi	r30, 0x23	; 35
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	80 83       	st	Z, r24
	/*Clear TWINT Flag*/
	SETBITvalue(TWCR,7);
    1b8e:	a6 e5       	ldi	r26, 0x56	; 86
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e6 e5       	ldi	r30, 0x56	; 86
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	80 68       	ori	r24, 0x80	; 128
    1b9a:	8c 93       	st	X, r24
	/*wait on flag until the operation is finished */
	while((GetBitvalue(TWCR,7))==0);
    1b9c:	e6 e5       	ldi	r30, 0x56	; 86
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	88 23       	and	r24, r24
    1ba4:	dc f7       	brge	.-10     	; 0x1b9c <TWI_u8MasterSendDataByte+0x26>

	/*check the operation status*/
	if(TWSR==0x28)
    1ba6:	e1 e2       	ldi	r30, 0x21	; 33
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	88 32       	cpi	r24, 0x28	; 40
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <TWI_u8MasterSendDataByte+0x3c>
	{
		/*Do Nothing*/
	}
	else
	{
		ErrorState=NOK;
    1bb0:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <TWI_u8MasterReadDataByte>:
u8 TWI_u8MasterReadDataByte(u8* Copy_Pu8Data)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	00 d0       	rcall	.+0      	; 0x1bc4 <TWI_u8MasterReadDataByte+0x6>
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	9b 83       	std	Y+3, r25	; 0x03
    1bcc:	8a 83       	std	Y+2, r24	; 0x02
	u8 ErrorState=OK;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	89 83       	std	Y+1, r24	; 0x01
	/*Clear TWINT Flag*/
	SETBITvalue(TWCR,7);
    1bd2:	a6 e5       	ldi	r26, 0x56	; 86
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e6 e5       	ldi	r30, 0x56	; 86
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	80 68       	ori	r24, 0x80	; 128
    1bde:	8c 93       	st	X, r24
	/*wait on flag until the operation is finished */
	while((GetBitvalue(TWCR,7))==0);
    1be0:	e6 e5       	ldi	r30, 0x56	; 86
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	88 23       	and	r24, r24
    1be8:	dc f7       	brge	.-10     	; 0x1be0 <TWI_u8MasterReadDataByte+0x22>
	/*check the operation status*/
	if(TWSR==0x50)
    1bea:	e1 e2       	ldi	r30, 0x21	; 33
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	80 35       	cpi	r24, 0x50	; 80
    1bf2:	39 f4       	brne	.+14     	; 0x1c02 <TWI_u8MasterReadDataByte+0x44>
	{
		*Copy_Pu8Data=TWDR;
    1bf4:	e3 e2       	ldi	r30, 0x23	; 35
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	ea 81       	ldd	r30, Y+2	; 0x02
    1bfc:	fb 81       	ldd	r31, Y+3	; 0x03
    1bfe:	80 83       	st	Z, r24
    1c00:	01 c0       	rjmp	.+2      	; 0x1c04 <TWI_u8MasterReadDataByte+0x46>
	}
	else
	{
		ErrorState=NOK;
    1c02:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c06:	0f 90       	pop	r0
    1c08:	0f 90       	pop	r0
    1c0a:	0f 90       	pop	r0
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	08 95       	ret

00001c12 <TWI_u8RepeatedStart>:
u8 TWI_u8RepeatedStart(void)
{
    1c12:	df 93       	push	r29
    1c14:	cf 93       	push	r28
    1c16:	0f 92       	push	r0
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
	u8 ErrorState=OK;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	89 83       	std	Y+1, r24	; 0x01
	/*Set Start Condition Bit*/
	SETBITvalue(TWCR,5);
    1c20:	a6 e5       	ldi	r26, 0x56	; 86
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e6 e5       	ldi	r30, 0x56	; 86
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	80 62       	ori	r24, 0x20	; 32
    1c2c:	8c 93       	st	X, r24
	/*Clear TWINT Flag*/
	SETBITvalue(TWCR,7);
    1c2e:	a6 e5       	ldi	r26, 0x56	; 86
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e6 e5       	ldi	r30, 0x56	; 86
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	80 68       	ori	r24, 0x80	; 128
    1c3a:	8c 93       	st	X, r24
	/*wait on flag until the operation is finished */
	while((GetBitvalue(TWCR,7))==0);
    1c3c:	e6 e5       	ldi	r30, 0x56	; 86
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	88 23       	and	r24, r24
    1c44:	dc f7       	brge	.-10     	; 0x1c3c <TWI_u8RepeatedStart+0x2a>

	/*check the operation status*/
	if(TWSR==0x10)
    1c46:	e1 e2       	ldi	r30, 0x21	; 33
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	80 31       	cpi	r24, 0x10	; 16
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <TWI_u8RepeatedStart+0x40>
	{
		/*Do Nothing*/
	}
	else
	{
		ErrorState=NOK;
    1c50:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <TWI_voidStopCondtion>:
void TWI_voidStopCondtion(void)
{
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
	/*SET Stop Condition Bit*/
	SETBITvalue(TWCR,4);
    1c64:	a6 e5       	ldi	r26, 0x56	; 86
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e6 e5       	ldi	r30, 0x56	; 86
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	80 61       	ori	r24, 0x10	; 16
    1c70:	8c 93       	st	X, r24

	/*Clear TWINT Flag*/
	SETBITvalue(TWCR,7);
    1c72:	a6 e5       	ldi	r26, 0x56	; 86
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e6 e5       	ldi	r30, 0x56	; 86
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 68       	ori	r24, 0x80	; 128
    1c7e:	8c 93       	st	X, r24
}
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <therm_u8reset>:
#include "Thermo_interface.h"
#include "util/delay.h"
#include "bitmath.h"

u8 therm_u8reset()
{
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	c9 54       	subi	r28, 0x49	; 73
    1c94:	d0 40       	sbci	r29, 0x00	; 0
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
	u8 i;
	THERM_LOW();
    1ca0:	87 e0       	ldi	r24, 0x07	; 7
    1ca2:	63 e0       	ldi	r22, 0x03	; 3
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
	THERM_OUTPUT_MODE();
    1caa:	87 e0       	ldi	r24, 0x07	; 7
    1cac:	63 e0       	ldi	r22, 0x03	; 3
    1cae:	41 e0       	ldi	r20, 0x01	; 1
    1cb0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
    1cb4:	fe 01       	movw	r30, r28
    1cb6:	eb 5b       	subi	r30, 0xBB	; 187
    1cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a0 ef       	ldi	r26, 0xF0	; 240
    1cc0:	b3 e4       	ldi	r27, 0x43	; 67
    1cc2:	80 83       	st	Z, r24
    1cc4:	91 83       	std	Z+1, r25	; 0x01
    1cc6:	a2 83       	std	Z+2, r26	; 0x02
    1cc8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cca:	8e 01       	movw	r16, r28
    1ccc:	0f 5b       	subi	r16, 0xBF	; 191
    1cce:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	eb 5b       	subi	r30, 0xBB	; 187
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	60 81       	ld	r22, Z
    1cd8:	71 81       	ldd	r23, Z+1	; 0x01
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	2b ea       	ldi	r18, 0xAB	; 171
    1ce0:	3a ea       	ldi	r19, 0xAA	; 170
    1ce2:	4a ea       	ldi	r20, 0xAA	; 170
    1ce4:	50 e4       	ldi	r21, 0x40	; 64
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	f8 01       	movw	r30, r16
    1cf0:	80 83       	st	Z, r24
    1cf2:	91 83       	std	Z+1, r25	; 0x01
    1cf4:	a2 83       	std	Z+2, r26	; 0x02
    1cf6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	ef 5b       	subi	r30, 0xBF	; 191
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	60 81       	ld	r22, Z
    1d00:	71 81       	ldd	r23, Z+1	; 0x01
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e8       	ldi	r20, 0x80	; 128
    1d0c:	5f e3       	ldi	r21, 0x3F	; 63
    1d0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d12:	88 23       	and	r24, r24
    1d14:	34 f4       	brge	.+12     	; 0x1d22 <therm_u8reset+0x9c>
		__ticks = 1;
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e0 5c       	subi	r30, 0xC0	; 192
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	80 83       	st	Z, r24
    1d20:	9d c0       	rjmp	.+314    	; 0x1e5c <therm_u8reset+0x1d6>
	else if (__tmp > 255)
    1d22:	fe 01       	movw	r30, r28
    1d24:	ef 5b       	subi	r30, 0xBF	; 191
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	60 81       	ld	r22, Z
    1d2a:	71 81       	ldd	r23, Z+1	; 0x01
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	53 e4       	ldi	r21, 0x43	; 67
    1d38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	0c f0       	brlt	.+2      	; 0x1d42 <therm_u8reset+0xbc>
    1d40:	7e c0       	rjmp	.+252    	; 0x1e3e <therm_u8reset+0x1b8>
	{
		_delay_ms(__us / 1000.0);
    1d42:	fe 01       	movw	r30, r28
    1d44:	eb 5b       	subi	r30, 0xBB	; 187
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	4a e7       	ldi	r20, 0x7A	; 122
    1d56:	54 e4       	ldi	r21, 0x44	; 68
    1d58:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	8c af       	std	Y+60, r24	; 0x3c
    1d62:	9d af       	std	Y+61, r25	; 0x3d
    1d64:	ae af       	std	Y+62, r26	; 0x3e
    1d66:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d68:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d6a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	4a e7       	ldi	r20, 0x7A	; 122
    1d76:	55 e4       	ldi	r21, 0x45	; 69
    1d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	88 af       	std	Y+56, r24	; 0x38
    1d82:	99 af       	std	Y+57, r25	; 0x39
    1d84:	aa af       	std	Y+58, r26	; 0x3a
    1d86:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1d88:	68 ad       	ldd	r22, Y+56	; 0x38
    1d8a:	79 ad       	ldd	r23, Y+57	; 0x39
    1d8c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d8e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e8       	ldi	r20, 0x80	; 128
    1d96:	5f e3       	ldi	r21, 0x3F	; 63
    1d98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d9c:	88 23       	and	r24, r24
    1d9e:	2c f4       	brge	.+10     	; 0x1daa <therm_u8reset+0x124>
		__ticks = 1;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9f ab       	std	Y+55, r25	; 0x37
    1da6:	8e ab       	std	Y+54, r24	; 0x36
    1da8:	3f c0       	rjmp	.+126    	; 0x1e28 <therm_u8reset+0x1a2>
	else if (__tmp > 65535)
    1daa:	68 ad       	ldd	r22, Y+56	; 0x38
    1dac:	79 ad       	ldd	r23, Y+57	; 0x39
    1dae:	8a ad       	ldd	r24, Y+58	; 0x3a
    1db0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	3f ef       	ldi	r19, 0xFF	; 255
    1db6:	4f e7       	ldi	r20, 0x7F	; 127
    1db8:	57 e4       	ldi	r21, 0x47	; 71
    1dba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dbe:	18 16       	cp	r1, r24
    1dc0:	4c f5       	brge	.+82     	; 0x1e14 <therm_u8reset+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dc4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1dc6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1dc8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e2       	ldi	r20, 0x20	; 32
    1dd0:	51 e4       	ldi	r21, 0x41	; 65
    1dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	9f ab       	std	Y+55, r25	; 0x37
    1de8:	8e ab       	std	Y+54, r24	; 0x36
    1dea:	0f c0       	rjmp	.+30     	; 0x1e0a <therm_u8reset+0x184>
    1dec:	80 e9       	ldi	r24, 0x90	; 144
    1dee:	91 e0       	ldi	r25, 0x01	; 1
    1df0:	9d ab       	std	Y+53, r25	; 0x35
    1df2:	8c ab       	std	Y+52, r24	; 0x34
    1df4:	8c a9       	ldd	r24, Y+52	; 0x34
    1df6:	9d a9       	ldd	r25, Y+53	; 0x35
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <therm_u8reset+0x172>
    1dfc:	9d ab       	std	Y+53, r25	; 0x35
    1dfe:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e00:	8e a9       	ldd	r24, Y+54	; 0x36
    1e02:	9f a9       	ldd	r25, Y+55	; 0x37
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	9f ab       	std	Y+55, r25	; 0x37
    1e08:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0a:	8e a9       	ldd	r24, Y+54	; 0x36
    1e0c:	9f a9       	ldd	r25, Y+55	; 0x37
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	69 f7       	brne	.-38     	; 0x1dec <therm_u8reset+0x166>
    1e12:	2d c0       	rjmp	.+90     	; 0x1e6e <therm_u8reset+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e14:	68 ad       	ldd	r22, Y+56	; 0x38
    1e16:	79 ad       	ldd	r23, Y+57	; 0x39
    1e18:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e1a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	9f ab       	std	Y+55, r25	; 0x37
    1e26:	8e ab       	std	Y+54, r24	; 0x36
    1e28:	8e a9       	ldd	r24, Y+54	; 0x36
    1e2a:	9f a9       	ldd	r25, Y+55	; 0x37
    1e2c:	9b ab       	std	Y+51, r25	; 0x33
    1e2e:	8a ab       	std	Y+50, r24	; 0x32
    1e30:	8a a9       	ldd	r24, Y+50	; 0x32
    1e32:	9b a9       	ldd	r25, Y+51	; 0x33
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <therm_u8reset+0x1ae>
    1e38:	9b ab       	std	Y+51, r25	; 0x33
    1e3a:	8a ab       	std	Y+50, r24	; 0x32
    1e3c:	18 c0       	rjmp	.+48     	; 0x1e6e <therm_u8reset+0x1e8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e3e:	fe 01       	movw	r30, r28
    1e40:	ef 5b       	subi	r30, 0xBF	; 191
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	60 81       	ld	r22, Z
    1e46:	71 81       	ldd	r23, Z+1	; 0x01
    1e48:	82 81       	ldd	r24, Z+2	; 0x02
    1e4a:	93 81       	ldd	r25, Z+3	; 0x03
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	fe 01       	movw	r30, r28
    1e56:	e0 5c       	subi	r30, 0xC0	; 192
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 83       	st	Z, r24
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e0 5c       	subi	r30, 0xC0	; 192
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 81       	ld	r24, Z
    1e64:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e66:	89 a9       	ldd	r24, Y+49	; 0x31
    1e68:	8a 95       	dec	r24
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <therm_u8reset+0x1e2>
    1e6c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(480);
	THERM_INPUT_MODE();
    1e6e:	87 e0       	ldi	r24, 0x07	; 7
    1e70:	63 e0       	ldi	r22, 0x03	; 3
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	a0 e7       	ldi	r26, 0x70	; 112
    1e7e:	b2 e4       	ldi	r27, 0x42	; 66
    1e80:	8d a7       	std	Y+45, r24	; 0x2d
    1e82:	9e a7       	std	Y+46, r25	; 0x2e
    1e84:	af a7       	std	Y+47, r26	; 0x2f
    1e86:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e88:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e8a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e90:	2b ea       	ldi	r18, 0xAB	; 171
    1e92:	3a ea       	ldi	r19, 0xAA	; 170
    1e94:	4a ea       	ldi	r20, 0xAA	; 170
    1e96:	50 e4       	ldi	r21, 0x40	; 64
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	89 a7       	std	Y+41, r24	; 0x29
    1ea2:	9a a7       	std	Y+42, r25	; 0x2a
    1ea4:	ab a7       	std	Y+43, r26	; 0x2b
    1ea6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ea8:	69 a5       	ldd	r22, Y+41	; 0x29
    1eaa:	7a a5       	ldd	r23, Y+42	; 0x2a
    1eac:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eae:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	1c f4       	brge	.+6      	; 0x1ec6 <therm_u8reset+0x240>
		__ticks = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	88 a7       	std	Y+40, r24	; 0x28
    1ec4:	91 c0       	rjmp	.+290    	; 0x1fe8 <therm_u8reset+0x362>
	else if (__tmp > 255)
    1ec6:	69 a5       	ldd	r22, Y+41	; 0x29
    1ec8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1eca:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ecc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	53 e4       	ldi	r21, 0x43	; 67
    1ed6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eda:	18 16       	cp	r1, r24
    1edc:	0c f0       	brlt	.+2      	; 0x1ee0 <therm_u8reset+0x25a>
    1ede:	7b c0       	rjmp	.+246    	; 0x1fd6 <therm_u8reset+0x350>
	{
		_delay_ms(__us / 1000.0);
    1ee0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ee2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ee4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ee6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	4a e7       	ldi	r20, 0x7A	; 122
    1eee:	54 e4       	ldi	r21, 0x44	; 68
    1ef0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	8c a3       	std	Y+36, r24	; 0x24
    1efa:	9d a3       	std	Y+37, r25	; 0x25
    1efc:	ae a3       	std	Y+38, r26	; 0x26
    1efe:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f00:	6c a1       	ldd	r22, Y+36	; 0x24
    1f02:	7d a1       	ldd	r23, Y+37	; 0x25
    1f04:	8e a1       	ldd	r24, Y+38	; 0x26
    1f06:	9f a1       	ldd	r25, Y+39	; 0x27
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	4a e7       	ldi	r20, 0x7A	; 122
    1f0e:	55 e4       	ldi	r21, 0x45	; 69
    1f10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	88 a3       	std	Y+32, r24	; 0x20
    1f1a:	99 a3       	std	Y+33, r25	; 0x21
    1f1c:	aa a3       	std	Y+34, r26	; 0x22
    1f1e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f20:	68 a1       	ldd	r22, Y+32	; 0x20
    1f22:	79 a1       	ldd	r23, Y+33	; 0x21
    1f24:	8a a1       	ldd	r24, Y+34	; 0x22
    1f26:	9b a1       	ldd	r25, Y+35	; 0x23
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e8       	ldi	r20, 0x80	; 128
    1f2e:	5f e3       	ldi	r21, 0x3F	; 63
    1f30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f34:	88 23       	and	r24, r24
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <therm_u8reset+0x2bc>
		__ticks = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9f 8f       	std	Y+31, r25	; 0x1f
    1f3e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f40:	3f c0       	rjmp	.+126    	; 0x1fc0 <therm_u8reset+0x33a>
	else if (__tmp > 65535)
    1f42:	68 a1       	ldd	r22, Y+32	; 0x20
    1f44:	79 a1       	ldd	r23, Y+33	; 0x21
    1f46:	8a a1       	ldd	r24, Y+34	; 0x22
    1f48:	9b a1       	ldd	r25, Y+35	; 0x23
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	57 e4       	ldi	r21, 0x47	; 71
    1f52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f56:	18 16       	cp	r1, r24
    1f58:	4c f5       	brge	.+82     	; 0x1fac <therm_u8reset+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5a:	6c a1       	ldd	r22, Y+36	; 0x24
    1f5c:	7d a1       	ldd	r23, Y+37	; 0x25
    1f5e:	8e a1       	ldd	r24, Y+38	; 0x26
    1f60:	9f a1       	ldd	r25, Y+39	; 0x27
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e2       	ldi	r20, 0x20	; 32
    1f68:	51 e4       	ldi	r21, 0x41	; 65
    1f6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	bc 01       	movw	r22, r24
    1f74:	cd 01       	movw	r24, r26
    1f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f80:	8e 8f       	std	Y+30, r24	; 0x1e
    1f82:	0f c0       	rjmp	.+30     	; 0x1fa2 <therm_u8reset+0x31c>
    1f84:	80 e9       	ldi	r24, 0x90	; 144
    1f86:	91 e0       	ldi	r25, 0x01	; 1
    1f88:	9d 8f       	std	Y+29, r25	; 0x1d
    1f8a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f8e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <therm_u8reset+0x30a>
    1f94:	9d 8f       	std	Y+29, r25	; 0x1d
    1f96:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	9f 8f       	std	Y+31, r25	; 0x1f
    1fa0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fa4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	69 f7       	brne	.-38     	; 0x1f84 <therm_u8reset+0x2fe>
    1faa:	24 c0       	rjmp	.+72     	; 0x1ff4 <therm_u8reset+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fac:	68 a1       	ldd	r22, Y+32	; 0x20
    1fae:	79 a1       	ldd	r23, Y+33	; 0x21
    1fb0:	8a a1       	ldd	r24, Y+34	; 0x22
    1fb2:	9b a1       	ldd	r25, Y+35	; 0x23
    1fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9f 8f       	std	Y+31, r25	; 0x1f
    1fbe:	8e 8f       	std	Y+30, r24	; 0x1e
    1fc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fc2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fc4:	9b 8f       	std	Y+27, r25	; 0x1b
    1fc6:	8a 8f       	std	Y+26, r24	; 0x1a
    1fc8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <therm_u8reset+0x346>
    1fd0:	9b 8f       	std	Y+27, r25	; 0x1b
    1fd2:	8a 8f       	std	Y+26, r24	; 0x1a
    1fd4:	0f c0       	rjmp	.+30     	; 0x1ff4 <therm_u8reset+0x36e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fd6:	69 a5       	ldd	r22, Y+41	; 0x29
    1fd8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fda:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fdc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	88 a7       	std	Y+40, r24	; 0x28
    1fe8:	88 a5       	ldd	r24, Y+40	; 0x28
    1fea:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fec:	89 8d       	ldd	r24, Y+25	; 0x19
    1fee:	8a 95       	dec	r24
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <therm_u8reset+0x368>
    1ff2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(60);
	DIO_u8GetPinValue(THERM_DQ , THERM_PORT , &i);
    1ff4:	9e 01       	movw	r18, r28
    1ff6:	27 5b       	subi	r18, 0xB7	; 183
    1ff8:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffa:	87 e0       	ldi	r24, 0x07	; 7
    1ffc:	63 e0       	ldi	r22, 0x03	; 3
    1ffe:	a9 01       	movw	r20, r18
    2000:	0e 94 05 09 	call	0x120a	; 0x120a <DIO_u8GetPinValue>
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a2 ed       	ldi	r26, 0xD2	; 210
    200a:	b3 e4       	ldi	r27, 0x43	; 67
    200c:	8d 8b       	std	Y+21, r24	; 0x15
    200e:	9e 8b       	std	Y+22, r25	; 0x16
    2010:	af 8b       	std	Y+23, r26	; 0x17
    2012:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2014:	6d 89       	ldd	r22, Y+21	; 0x15
    2016:	7e 89       	ldd	r23, Y+22	; 0x16
    2018:	8f 89       	ldd	r24, Y+23	; 0x17
    201a:	98 8d       	ldd	r25, Y+24	; 0x18
    201c:	2b ea       	ldi	r18, 0xAB	; 171
    201e:	3a ea       	ldi	r19, 0xAA	; 170
    2020:	4a ea       	ldi	r20, 0xAA	; 170
    2022:	50 e4       	ldi	r21, 0x40	; 64
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	89 8b       	std	Y+17, r24	; 0x11
    202e:	9a 8b       	std	Y+18, r25	; 0x12
    2030:	ab 8b       	std	Y+19, r26	; 0x13
    2032:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2034:	69 89       	ldd	r22, Y+17	; 0x11
    2036:	7a 89       	ldd	r23, Y+18	; 0x12
    2038:	8b 89       	ldd	r24, Y+19	; 0x13
    203a:	9c 89       	ldd	r25, Y+20	; 0x14
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e8       	ldi	r20, 0x80	; 128
    2042:	5f e3       	ldi	r21, 0x3F	; 63
    2044:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2048:	88 23       	and	r24, r24
    204a:	1c f4       	brge	.+6      	; 0x2052 <therm_u8reset+0x3cc>
		__ticks = 1;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	88 8b       	std	Y+16, r24	; 0x10
    2050:	91 c0       	rjmp	.+290    	; 0x2174 <therm_u8reset+0x4ee>
	else if (__tmp > 255)
    2052:	69 89       	ldd	r22, Y+17	; 0x11
    2054:	7a 89       	ldd	r23, Y+18	; 0x12
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	9c 89       	ldd	r25, Y+20	; 0x14
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4f e7       	ldi	r20, 0x7F	; 127
    2060:	53 e4       	ldi	r21, 0x43	; 67
    2062:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2066:	18 16       	cp	r1, r24
    2068:	0c f0       	brlt	.+2      	; 0x206c <therm_u8reset+0x3e6>
    206a:	7b c0       	rjmp	.+246    	; 0x2162 <therm_u8reset+0x4dc>
	{
		_delay_ms(__us / 1000.0);
    206c:	6d 89       	ldd	r22, Y+21	; 0x15
    206e:	7e 89       	ldd	r23, Y+22	; 0x16
    2070:	8f 89       	ldd	r24, Y+23	; 0x17
    2072:	98 8d       	ldd	r25, Y+24	; 0x18
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	4a e7       	ldi	r20, 0x7A	; 122
    207a:	54 e4       	ldi	r21, 0x44	; 68
    207c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	8c 87       	std	Y+12, r24	; 0x0c
    2086:	9d 87       	std	Y+13, r25	; 0x0d
    2088:	ae 87       	std	Y+14, r26	; 0x0e
    208a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208c:	6c 85       	ldd	r22, Y+12	; 0x0c
    208e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2090:	8e 85       	ldd	r24, Y+14	; 0x0e
    2092:	9f 85       	ldd	r25, Y+15	; 0x0f
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4a e7       	ldi	r20, 0x7A	; 122
    209a:	55 e4       	ldi	r21, 0x45	; 69
    209c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	88 87       	std	Y+8, r24	; 0x08
    20a6:	99 87       	std	Y+9, r25	; 0x09
    20a8:	aa 87       	std	Y+10, r26	; 0x0a
    20aa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20ac:	68 85       	ldd	r22, Y+8	; 0x08
    20ae:	79 85       	ldd	r23, Y+9	; 0x09
    20b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e8       	ldi	r20, 0x80	; 128
    20ba:	5f e3       	ldi	r21, 0x3F	; 63
    20bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20c0:	88 23       	and	r24, r24
    20c2:	2c f4       	brge	.+10     	; 0x20ce <therm_u8reset+0x448>
		__ticks = 1;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9f 83       	std	Y+7, r25	; 0x07
    20ca:	8e 83       	std	Y+6, r24	; 0x06
    20cc:	3f c0       	rjmp	.+126    	; 0x214c <therm_u8reset+0x4c6>
	else if (__tmp > 65535)
    20ce:	68 85       	ldd	r22, Y+8	; 0x08
    20d0:	79 85       	ldd	r23, Y+9	; 0x09
    20d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	3f ef       	ldi	r19, 0xFF	; 255
    20da:	4f e7       	ldi	r20, 0x7F	; 127
    20dc:	57 e4       	ldi	r21, 0x47	; 71
    20de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e2:	18 16       	cp	r1, r24
    20e4:	4c f5       	brge	.+82     	; 0x2138 <therm_u8reset+0x4b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    20e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    20ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e2       	ldi	r20, 0x20	; 32
    20f4:	51 e4       	ldi	r21, 0x41	; 65
    20f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	9f 83       	std	Y+7, r25	; 0x07
    210c:	8e 83       	std	Y+6, r24	; 0x06
    210e:	0f c0       	rjmp	.+30     	; 0x212e <therm_u8reset+0x4a8>
    2110:	80 e9       	ldi	r24, 0x90	; 144
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	9d 83       	std	Y+5, r25	; 0x05
    2116:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2118:	8c 81       	ldd	r24, Y+4	; 0x04
    211a:	9d 81       	ldd	r25, Y+5	; 0x05
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <therm_u8reset+0x496>
    2120:	9d 83       	std	Y+5, r25	; 0x05
    2122:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2124:	8e 81       	ldd	r24, Y+6	; 0x06
    2126:	9f 81       	ldd	r25, Y+7	; 0x07
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	9f 83       	std	Y+7, r25	; 0x07
    212c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212e:	8e 81       	ldd	r24, Y+6	; 0x06
    2130:	9f 81       	ldd	r25, Y+7	; 0x07
    2132:	00 97       	sbiw	r24, 0x00	; 0
    2134:	69 f7       	brne	.-38     	; 0x2110 <therm_u8reset+0x48a>
    2136:	24 c0       	rjmp	.+72     	; 0x2180 <therm_u8reset+0x4fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2138:	68 85       	ldd	r22, Y+8	; 0x08
    213a:	79 85       	ldd	r23, Y+9	; 0x09
    213c:	8a 85       	ldd	r24, Y+10	; 0x0a
    213e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9f 83       	std	Y+7, r25	; 0x07
    214a:	8e 83       	std	Y+6, r24	; 0x06
    214c:	8e 81       	ldd	r24, Y+6	; 0x06
    214e:	9f 81       	ldd	r25, Y+7	; 0x07
    2150:	9b 83       	std	Y+3, r25	; 0x03
    2152:	8a 83       	std	Y+2, r24	; 0x02
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	9b 81       	ldd	r25, Y+3	; 0x03
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	f1 f7       	brne	.-4      	; 0x2158 <therm_u8reset+0x4d2>
    215c:	9b 83       	std	Y+3, r25	; 0x03
    215e:	8a 83       	std	Y+2, r24	; 0x02
    2160:	0f c0       	rjmp	.+30     	; 0x2180 <therm_u8reset+0x4fa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2162:	69 89       	ldd	r22, Y+17	; 0x11
    2164:	7a 89       	ldd	r23, Y+18	; 0x12
    2166:	8b 89       	ldd	r24, Y+19	; 0x13
    2168:	9c 89       	ldd	r25, Y+20	; 0x14
    216a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	88 8b       	std	Y+16, r24	; 0x10
    2174:	88 89       	ldd	r24, Y+16	; 0x10
    2176:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	8a 95       	dec	r24
    217c:	f1 f7       	brne	.-4      	; 0x217a <therm_u8reset+0x4f4>
    217e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(420);
	return i;
    2180:	fe 01       	movw	r30, r28
    2182:	e7 5b       	subi	r30, 0xB7	; 183
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 81       	ld	r24, Z
}
    2188:	c7 5b       	subi	r28, 0xB7	; 183
    218a:	df 4f       	sbci	r29, 0xFF	; 255
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	08 95       	ret

000021a0 <therm_voidwrite_bit>:
void therm_voidwrite_bit(u8 bit)
{
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	e1 97       	sbiw	r28, 0x31	; 49
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	89 ab       	std	Y+49, r24	; 0x31
	THERM_LOW();
    21b6:	87 e0       	ldi	r24, 0x07	; 7
    21b8:	63 e0       	ldi	r22, 0x03	; 3
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
	THERM_OUTPUT_MODE();
    21c0:	87 e0       	ldi	r24, 0x07	; 7
    21c2:	63 e0       	ldi	r22, 0x03	; 3
    21c4:	41 e0       	ldi	r20, 0x01	; 1
    21c6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	a0 e8       	ldi	r26, 0x80	; 128
    21d0:	bf e3       	ldi	r27, 0x3F	; 63
    21d2:	8d a7       	std	Y+45, r24	; 0x2d
    21d4:	9e a7       	std	Y+46, r25	; 0x2e
    21d6:	af a7       	std	Y+47, r26	; 0x2f
    21d8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21da:	6d a5       	ldd	r22, Y+45	; 0x2d
    21dc:	7e a5       	ldd	r23, Y+46	; 0x2e
    21de:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e0:	98 a9       	ldd	r25, Y+48	; 0x30
    21e2:	2b ea       	ldi	r18, 0xAB	; 171
    21e4:	3a ea       	ldi	r19, 0xAA	; 170
    21e6:	4a ea       	ldi	r20, 0xAA	; 170
    21e8:	50 e4       	ldi	r21, 0x40	; 64
    21ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	89 a7       	std	Y+41, r24	; 0x29
    21f4:	9a a7       	std	Y+42, r25	; 0x2a
    21f6:	ab a7       	std	Y+43, r26	; 0x2b
    21f8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    21fa:	69 a5       	ldd	r22, Y+41	; 0x29
    21fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    21fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2200:	9c a5       	ldd	r25, Y+44	; 0x2c
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e8       	ldi	r20, 0x80	; 128
    2208:	5f e3       	ldi	r21, 0x3F	; 63
    220a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    220e:	88 23       	and	r24, r24
    2210:	1c f4       	brge	.+6      	; 0x2218 <therm_voidwrite_bit+0x78>
		__ticks = 1;
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	88 a7       	std	Y+40, r24	; 0x28
    2216:	91 c0       	rjmp	.+290    	; 0x233a <therm_voidwrite_bit+0x19a>
	else if (__tmp > 255)
    2218:	69 a5       	ldd	r22, Y+41	; 0x29
    221a:	7a a5       	ldd	r23, Y+42	; 0x2a
    221c:	8b a5       	ldd	r24, Y+43	; 0x2b
    221e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	4f e7       	ldi	r20, 0x7F	; 127
    2226:	53 e4       	ldi	r21, 0x43	; 67
    2228:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    222c:	18 16       	cp	r1, r24
    222e:	0c f0       	brlt	.+2      	; 0x2232 <therm_voidwrite_bit+0x92>
    2230:	7b c0       	rjmp	.+246    	; 0x2328 <therm_voidwrite_bit+0x188>
	{
		_delay_ms(__us / 1000.0);
    2232:	6d a5       	ldd	r22, Y+45	; 0x2d
    2234:	7e a5       	ldd	r23, Y+46	; 0x2e
    2236:	8f a5       	ldd	r24, Y+47	; 0x2f
    2238:	98 a9       	ldd	r25, Y+48	; 0x30
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	4a e7       	ldi	r20, 0x7A	; 122
    2240:	54 e4       	ldi	r21, 0x44	; 68
    2242:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	8c a3       	std	Y+36, r24	; 0x24
    224c:	9d a3       	std	Y+37, r25	; 0x25
    224e:	ae a3       	std	Y+38, r26	; 0x26
    2250:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2252:	6c a1       	ldd	r22, Y+36	; 0x24
    2254:	7d a1       	ldd	r23, Y+37	; 0x25
    2256:	8e a1       	ldd	r24, Y+38	; 0x26
    2258:	9f a1       	ldd	r25, Y+39	; 0x27
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	4a e7       	ldi	r20, 0x7A	; 122
    2260:	55 e4       	ldi	r21, 0x45	; 69
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	88 a3       	std	Y+32, r24	; 0x20
    226c:	99 a3       	std	Y+33, r25	; 0x21
    226e:	aa a3       	std	Y+34, r26	; 0x22
    2270:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2272:	68 a1       	ldd	r22, Y+32	; 0x20
    2274:	79 a1       	ldd	r23, Y+33	; 0x21
    2276:	8a a1       	ldd	r24, Y+34	; 0x22
    2278:	9b a1       	ldd	r25, Y+35	; 0x23
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e8       	ldi	r20, 0x80	; 128
    2280:	5f e3       	ldi	r21, 0x3F	; 63
    2282:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2286:	88 23       	and	r24, r24
    2288:	2c f4       	brge	.+10     	; 0x2294 <therm_voidwrite_bit+0xf4>
		__ticks = 1;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9f 8f       	std	Y+31, r25	; 0x1f
    2290:	8e 8f       	std	Y+30, r24	; 0x1e
    2292:	3f c0       	rjmp	.+126    	; 0x2312 <therm_voidwrite_bit+0x172>
	else if (__tmp > 65535)
    2294:	68 a1       	ldd	r22, Y+32	; 0x20
    2296:	79 a1       	ldd	r23, Y+33	; 0x21
    2298:	8a a1       	ldd	r24, Y+34	; 0x22
    229a:	9b a1       	ldd	r25, Y+35	; 0x23
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	3f ef       	ldi	r19, 0xFF	; 255
    22a0:	4f e7       	ldi	r20, 0x7F	; 127
    22a2:	57 e4       	ldi	r21, 0x47	; 71
    22a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22a8:	18 16       	cp	r1, r24
    22aa:	4c f5       	brge	.+82     	; 0x22fe <therm_voidwrite_bit+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ac:	6c a1       	ldd	r22, Y+36	; 0x24
    22ae:	7d a1       	ldd	r23, Y+37	; 0x25
    22b0:	8e a1       	ldd	r24, Y+38	; 0x26
    22b2:	9f a1       	ldd	r25, Y+39	; 0x27
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e2       	ldi	r20, 0x20	; 32
    22ba:	51 e4       	ldi	r21, 0x41	; 65
    22bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	9f 8f       	std	Y+31, r25	; 0x1f
    22d2:	8e 8f       	std	Y+30, r24	; 0x1e
    22d4:	0f c0       	rjmp	.+30     	; 0x22f4 <therm_voidwrite_bit+0x154>
    22d6:	80 e9       	ldi	r24, 0x90	; 144
    22d8:	91 e0       	ldi	r25, 0x01	; 1
    22da:	9d 8f       	std	Y+29, r25	; 0x1d
    22dc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <therm_voidwrite_bit+0x142>
    22e6:	9d 8f       	std	Y+29, r25	; 0x1d
    22e8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	9f 8f       	std	Y+31, r25	; 0x1f
    22f2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	69 f7       	brne	.-38     	; 0x22d6 <therm_voidwrite_bit+0x136>
    22fc:	24 c0       	rjmp	.+72     	; 0x2346 <therm_voidwrite_bit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fe:	68 a1       	ldd	r22, Y+32	; 0x20
    2300:	79 a1       	ldd	r23, Y+33	; 0x21
    2302:	8a a1       	ldd	r24, Y+34	; 0x22
    2304:	9b a1       	ldd	r25, Y+35	; 0x23
    2306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	9f 8f       	std	Y+31, r25	; 0x1f
    2310:	8e 8f       	std	Y+30, r24	; 0x1e
    2312:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2314:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2316:	9b 8f       	std	Y+27, r25	; 0x1b
    2318:	8a 8f       	std	Y+26, r24	; 0x1a
    231a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    231c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	f1 f7       	brne	.-4      	; 0x231e <therm_voidwrite_bit+0x17e>
    2322:	9b 8f       	std	Y+27, r25	; 0x1b
    2324:	8a 8f       	std	Y+26, r24	; 0x1a
    2326:	0f c0       	rjmp	.+30     	; 0x2346 <therm_voidwrite_bit+0x1a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2328:	69 a5       	ldd	r22, Y+41	; 0x29
    232a:	7a a5       	ldd	r23, Y+42	; 0x2a
    232c:	8b a5       	ldd	r24, Y+43	; 0x2b
    232e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	88 a7       	std	Y+40, r24	; 0x28
    233a:	88 a5       	ldd	r24, Y+40	; 0x28
    233c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    233e:	89 8d       	ldd	r24, Y+25	; 0x19
    2340:	8a 95       	dec	r24
    2342:	f1 f7       	brne	.-4      	; 0x2340 <therm_voidwrite_bit+0x1a0>
    2344:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	//If we want to write 1, release the line
	if(bit) THERM_INPUT_MODE();
    2346:	89 a9       	ldd	r24, Y+49	; 0x31
    2348:	88 23       	and	r24, r24
    234a:	29 f0       	breq	.+10     	; 0x2356 <therm_voidwrite_bit+0x1b6>
    234c:	87 e0       	ldi	r24, 0x07	; 7
    234e:	63 e0       	ldi	r22, 0x03	; 3
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	a0 e7       	ldi	r26, 0x70	; 112
    235c:	b2 e4       	ldi	r27, 0x42	; 66
    235e:	8d 8b       	std	Y+21, r24	; 0x15
    2360:	9e 8b       	std	Y+22, r25	; 0x16
    2362:	af 8b       	std	Y+23, r26	; 0x17
    2364:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2366:	6d 89       	ldd	r22, Y+21	; 0x15
    2368:	7e 89       	ldd	r23, Y+22	; 0x16
    236a:	8f 89       	ldd	r24, Y+23	; 0x17
    236c:	98 8d       	ldd	r25, Y+24	; 0x18
    236e:	2b ea       	ldi	r18, 0xAB	; 171
    2370:	3a ea       	ldi	r19, 0xAA	; 170
    2372:	4a ea       	ldi	r20, 0xAA	; 170
    2374:	50 e4       	ldi	r21, 0x40	; 64
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	89 8b       	std	Y+17, r24	; 0x11
    2380:	9a 8b       	std	Y+18, r25	; 0x12
    2382:	ab 8b       	std	Y+19, r26	; 0x13
    2384:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2386:	69 89       	ldd	r22, Y+17	; 0x11
    2388:	7a 89       	ldd	r23, Y+18	; 0x12
    238a:	8b 89       	ldd	r24, Y+19	; 0x13
    238c:	9c 89       	ldd	r25, Y+20	; 0x14
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e8       	ldi	r20, 0x80	; 128
    2394:	5f e3       	ldi	r21, 0x3F	; 63
    2396:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    239a:	88 23       	and	r24, r24
    239c:	1c f4       	brge	.+6      	; 0x23a4 <therm_voidwrite_bit+0x204>
		__ticks = 1;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	88 8b       	std	Y+16, r24	; 0x10
    23a2:	91 c0       	rjmp	.+290    	; 0x24c6 <therm_voidwrite_bit+0x326>
	else if (__tmp > 255)
    23a4:	69 89       	ldd	r22, Y+17	; 0x11
    23a6:	7a 89       	ldd	r23, Y+18	; 0x12
    23a8:	8b 89       	ldd	r24, Y+19	; 0x13
    23aa:	9c 89       	ldd	r25, Y+20	; 0x14
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	4f e7       	ldi	r20, 0x7F	; 127
    23b2:	53 e4       	ldi	r21, 0x43	; 67
    23b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23b8:	18 16       	cp	r1, r24
    23ba:	0c f0       	brlt	.+2      	; 0x23be <therm_voidwrite_bit+0x21e>
    23bc:	7b c0       	rjmp	.+246    	; 0x24b4 <therm_voidwrite_bit+0x314>
	{
		_delay_ms(__us / 1000.0);
    23be:	6d 89       	ldd	r22, Y+21	; 0x15
    23c0:	7e 89       	ldd	r23, Y+22	; 0x16
    23c2:	8f 89       	ldd	r24, Y+23	; 0x17
    23c4:	98 8d       	ldd	r25, Y+24	; 0x18
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	4a e7       	ldi	r20, 0x7A	; 122
    23cc:	54 e4       	ldi	r21, 0x44	; 68
    23ce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8c 87       	std	Y+12, r24	; 0x0c
    23d8:	9d 87       	std	Y+13, r25	; 0x0d
    23da:	ae 87       	std	Y+14, r26	; 0x0e
    23dc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23de:	6c 85       	ldd	r22, Y+12	; 0x0c
    23e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    23e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    23e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	4a e7       	ldi	r20, 0x7A	; 122
    23ec:	55 e4       	ldi	r21, 0x45	; 69
    23ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	88 87       	std	Y+8, r24	; 0x08
    23f8:	99 87       	std	Y+9, r25	; 0x09
    23fa:	aa 87       	std	Y+10, r26	; 0x0a
    23fc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23fe:	68 85       	ldd	r22, Y+8	; 0x08
    2400:	79 85       	ldd	r23, Y+9	; 0x09
    2402:	8a 85       	ldd	r24, Y+10	; 0x0a
    2404:	9b 85       	ldd	r25, Y+11	; 0x0b
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e8       	ldi	r20, 0x80	; 128
    240c:	5f e3       	ldi	r21, 0x3F	; 63
    240e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2412:	88 23       	and	r24, r24
    2414:	2c f4       	brge	.+10     	; 0x2420 <therm_voidwrite_bit+0x280>
		__ticks = 1;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9f 83       	std	Y+7, r25	; 0x07
    241c:	8e 83       	std	Y+6, r24	; 0x06
    241e:	3f c0       	rjmp	.+126    	; 0x249e <therm_voidwrite_bit+0x2fe>
	else if (__tmp > 65535)
    2420:	68 85       	ldd	r22, Y+8	; 0x08
    2422:	79 85       	ldd	r23, Y+9	; 0x09
    2424:	8a 85       	ldd	r24, Y+10	; 0x0a
    2426:	9b 85       	ldd	r25, Y+11	; 0x0b
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	3f ef       	ldi	r19, 0xFF	; 255
    242c:	4f e7       	ldi	r20, 0x7F	; 127
    242e:	57 e4       	ldi	r21, 0x47	; 71
    2430:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2434:	18 16       	cp	r1, r24
    2436:	4c f5       	brge	.+82     	; 0x248a <therm_voidwrite_bit+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2438:	6c 85       	ldd	r22, Y+12	; 0x0c
    243a:	7d 85       	ldd	r23, Y+13	; 0x0d
    243c:	8e 85       	ldd	r24, Y+14	; 0x0e
    243e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e2       	ldi	r20, 0x20	; 32
    2446:	51 e4       	ldi	r21, 0x41	; 65
    2448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	9f 83       	std	Y+7, r25	; 0x07
    245e:	8e 83       	std	Y+6, r24	; 0x06
    2460:	0f c0       	rjmp	.+30     	; 0x2480 <therm_voidwrite_bit+0x2e0>
    2462:	80 e9       	ldi	r24, 0x90	; 144
    2464:	91 e0       	ldi	r25, 0x01	; 1
    2466:	9d 83       	std	Y+5, r25	; 0x05
    2468:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    246a:	8c 81       	ldd	r24, Y+4	; 0x04
    246c:	9d 81       	ldd	r25, Y+5	; 0x05
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <therm_voidwrite_bit+0x2ce>
    2472:	9d 83       	std	Y+5, r25	; 0x05
    2474:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2476:	8e 81       	ldd	r24, Y+6	; 0x06
    2478:	9f 81       	ldd	r25, Y+7	; 0x07
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	9f 83       	std	Y+7, r25	; 0x07
    247e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2480:	8e 81       	ldd	r24, Y+6	; 0x06
    2482:	9f 81       	ldd	r25, Y+7	; 0x07
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	69 f7       	brne	.-38     	; 0x2462 <therm_voidwrite_bit+0x2c2>
    2488:	24 c0       	rjmp	.+72     	; 0x24d2 <therm_voidwrite_bit+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248a:	68 85       	ldd	r22, Y+8	; 0x08
    248c:	79 85       	ldd	r23, Y+9	; 0x09
    248e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2490:	9b 85       	ldd	r25, Y+11	; 0x0b
    2492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	9f 83       	std	Y+7, r25	; 0x07
    249c:	8e 83       	std	Y+6, r24	; 0x06
    249e:	8e 81       	ldd	r24, Y+6	; 0x06
    24a0:	9f 81       	ldd	r25, Y+7	; 0x07
    24a2:	9b 83       	std	Y+3, r25	; 0x03
    24a4:	8a 83       	std	Y+2, r24	; 0x02
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	9b 81       	ldd	r25, Y+3	; 0x03
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <therm_voidwrite_bit+0x30a>
    24ae:	9b 83       	std	Y+3, r25	; 0x03
    24b0:	8a 83       	std	Y+2, r24	; 0x02
    24b2:	0f c0       	rjmp	.+30     	; 0x24d2 <therm_voidwrite_bit+0x332>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24b4:	69 89       	ldd	r22, Y+17	; 0x11
    24b6:	7a 89       	ldd	r23, Y+18	; 0x12
    24b8:	8b 89       	ldd	r24, Y+19	; 0x13
    24ba:	9c 89       	ldd	r25, Y+20	; 0x14
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	88 8b       	std	Y+16, r24	; 0x10
    24c6:	88 89       	ldd	r24, Y+16	; 0x10
    24c8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	8a 95       	dec	r24
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <therm_voidwrite_bit+0x32c>
    24d0:	89 83       	std	Y+1, r24	; 0x01
	//Wait for 60uS and release the line
	_delay_us(60);
	THERM_INPUT_MODE();
    24d2:	87 e0       	ldi	r24, 0x07	; 7
    24d4:	63 e0       	ldi	r22, 0x03	; 3
    24d6:	40 e0       	ldi	r20, 0x00	; 0
    24d8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
}
    24dc:	e1 96       	adiw	r28, 0x31	; 49
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <therm_u8read_bit>:
u8 therm_u8read_bit(void)
{
    24ee:	0f 93       	push	r16
    24f0:	1f 93       	push	r17
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	ca 54       	subi	r28, 0x4A	; 74
    24fc:	d0 40       	sbci	r29, 0x00	; 0
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
	u8 bit=0;
    2508:	fe 01       	movw	r30, r28
    250a:	e7 5b       	subi	r30, 0xB7	; 183
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	10 82       	st	Z, r1
	u8 i;
	//Pull line low for 1uS
	THERM_LOW();
    2510:	87 e0       	ldi	r24, 0x07	; 7
    2512:	63 e0       	ldi	r22, 0x03	; 3
    2514:	40 e0       	ldi	r20, 0x00	; 0
    2516:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
	THERM_OUTPUT_MODE();
    251a:	87 e0       	ldi	r24, 0x07	; 7
    251c:	63 e0       	ldi	r22, 0x03	; 3
    251e:	41 e0       	ldi	r20, 0x01	; 1
    2520:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
    2524:	fe 01       	movw	r30, r28
    2526:	eb 5b       	subi	r30, 0xBB	; 187
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	a0 e8       	ldi	r26, 0x80	; 128
    2530:	bf e3       	ldi	r27, 0x3F	; 63
    2532:	80 83       	st	Z, r24
    2534:	91 83       	std	Z+1, r25	; 0x01
    2536:	a2 83       	std	Z+2, r26	; 0x02
    2538:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    253a:	8e 01       	movw	r16, r28
    253c:	0f 5b       	subi	r16, 0xBF	; 191
    253e:	1f 4f       	sbci	r17, 0xFF	; 255
    2540:	fe 01       	movw	r30, r28
    2542:	eb 5b       	subi	r30, 0xBB	; 187
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	60 81       	ld	r22, Z
    2548:	71 81       	ldd	r23, Z+1	; 0x01
    254a:	82 81       	ldd	r24, Z+2	; 0x02
    254c:	93 81       	ldd	r25, Z+3	; 0x03
    254e:	2b ea       	ldi	r18, 0xAB	; 171
    2550:	3a ea       	ldi	r19, 0xAA	; 170
    2552:	4a ea       	ldi	r20, 0xAA	; 170
    2554:	50 e4       	ldi	r21, 0x40	; 64
    2556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	f8 01       	movw	r30, r16
    2560:	80 83       	st	Z, r24
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	a2 83       	std	Z+2, r26	; 0x02
    2566:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2568:	fe 01       	movw	r30, r28
    256a:	ef 5b       	subi	r30, 0xBF	; 191
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	60 81       	ld	r22, Z
    2570:	71 81       	ldd	r23, Z+1	; 0x01
    2572:	82 81       	ldd	r24, Z+2	; 0x02
    2574:	93 81       	ldd	r25, Z+3	; 0x03
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e8       	ldi	r20, 0x80	; 128
    257c:	5f e3       	ldi	r21, 0x3F	; 63
    257e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2582:	88 23       	and	r24, r24
    2584:	34 f4       	brge	.+12     	; 0x2592 <therm_u8read_bit+0xa4>
		__ticks = 1;
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	fe 01       	movw	r30, r28
    258a:	e0 5c       	subi	r30, 0xC0	; 192
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	80 83       	st	Z, r24
    2590:	9d c0       	rjmp	.+314    	; 0x26cc <therm_u8read_bit+0x1de>
	else if (__tmp > 255)
    2592:	fe 01       	movw	r30, r28
    2594:	ef 5b       	subi	r30, 0xBF	; 191
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	60 81       	ld	r22, Z
    259a:	71 81       	ldd	r23, Z+1	; 0x01
    259c:	82 81       	ldd	r24, Z+2	; 0x02
    259e:	93 81       	ldd	r25, Z+3	; 0x03
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	4f e7       	ldi	r20, 0x7F	; 127
    25a6:	53 e4       	ldi	r21, 0x43	; 67
    25a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ac:	18 16       	cp	r1, r24
    25ae:	0c f0       	brlt	.+2      	; 0x25b2 <therm_u8read_bit+0xc4>
    25b0:	7e c0       	rjmp	.+252    	; 0x26ae <therm_u8read_bit+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    25b2:	fe 01       	movw	r30, r28
    25b4:	eb 5b       	subi	r30, 0xBB	; 187
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	60 81       	ld	r22, Z
    25ba:	71 81       	ldd	r23, Z+1	; 0x01
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	93 81       	ldd	r25, Z+3	; 0x03
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	4a e7       	ldi	r20, 0x7A	; 122
    25c6:	54 e4       	ldi	r21, 0x44	; 68
    25c8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	8c af       	std	Y+60, r24	; 0x3c
    25d2:	9d af       	std	Y+61, r25	; 0x3d
    25d4:	ae af       	std	Y+62, r26	; 0x3e
    25d6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d8:	6c ad       	ldd	r22, Y+60	; 0x3c
    25da:	7d ad       	ldd	r23, Y+61	; 0x3d
    25dc:	8e ad       	ldd	r24, Y+62	; 0x3e
    25de:	9f ad       	ldd	r25, Y+63	; 0x3f
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4a e7       	ldi	r20, 0x7A	; 122
    25e6:	55 e4       	ldi	r21, 0x45	; 69
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	88 af       	std	Y+56, r24	; 0x38
    25f2:	99 af       	std	Y+57, r25	; 0x39
    25f4:	aa af       	std	Y+58, r26	; 0x3a
    25f6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    25f8:	68 ad       	ldd	r22, Y+56	; 0x38
    25fa:	79 ad       	ldd	r23, Y+57	; 0x39
    25fc:	8a ad       	ldd	r24, Y+58	; 0x3a
    25fe:	9b ad       	ldd	r25, Y+59	; 0x3b
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    260c:	88 23       	and	r24, r24
    260e:	2c f4       	brge	.+10     	; 0x261a <therm_u8read_bit+0x12c>
		__ticks = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9f ab       	std	Y+55, r25	; 0x37
    2616:	8e ab       	std	Y+54, r24	; 0x36
    2618:	3f c0       	rjmp	.+126    	; 0x2698 <therm_u8read_bit+0x1aa>
	else if (__tmp > 65535)
    261a:	68 ad       	ldd	r22, Y+56	; 0x38
    261c:	79 ad       	ldd	r23, Y+57	; 0x39
    261e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2620:	9b ad       	ldd	r25, Y+59	; 0x3b
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	3f ef       	ldi	r19, 0xFF	; 255
    2626:	4f e7       	ldi	r20, 0x7F	; 127
    2628:	57 e4       	ldi	r21, 0x47	; 71
    262a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    262e:	18 16       	cp	r1, r24
    2630:	4c f5       	brge	.+82     	; 0x2684 <therm_u8read_bit+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2632:	6c ad       	ldd	r22, Y+60	; 0x3c
    2634:	7d ad       	ldd	r23, Y+61	; 0x3d
    2636:	8e ad       	ldd	r24, Y+62	; 0x3e
    2638:	9f ad       	ldd	r25, Y+63	; 0x3f
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e2       	ldi	r20, 0x20	; 32
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	bc 01       	movw	r22, r24
    264c:	cd 01       	movw	r24, r26
    264e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9f ab       	std	Y+55, r25	; 0x37
    2658:	8e ab       	std	Y+54, r24	; 0x36
    265a:	0f c0       	rjmp	.+30     	; 0x267a <therm_u8read_bit+0x18c>
    265c:	80 e9       	ldi	r24, 0x90	; 144
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	9d ab       	std	Y+53, r25	; 0x35
    2662:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2664:	8c a9       	ldd	r24, Y+52	; 0x34
    2666:	9d a9       	ldd	r25, Y+53	; 0x35
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <therm_u8read_bit+0x17a>
    266c:	9d ab       	std	Y+53, r25	; 0x35
    266e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2670:	8e a9       	ldd	r24, Y+54	; 0x36
    2672:	9f a9       	ldd	r25, Y+55	; 0x37
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	9f ab       	std	Y+55, r25	; 0x37
    2678:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267a:	8e a9       	ldd	r24, Y+54	; 0x36
    267c:	9f a9       	ldd	r25, Y+55	; 0x37
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	69 f7       	brne	.-38     	; 0x265c <therm_u8read_bit+0x16e>
    2682:	2d c0       	rjmp	.+90     	; 0x26de <therm_u8read_bit+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2684:	68 ad       	ldd	r22, Y+56	; 0x38
    2686:	79 ad       	ldd	r23, Y+57	; 0x39
    2688:	8a ad       	ldd	r24, Y+58	; 0x3a
    268a:	9b ad       	ldd	r25, Y+59	; 0x3b
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9f ab       	std	Y+55, r25	; 0x37
    2696:	8e ab       	std	Y+54, r24	; 0x36
    2698:	8e a9       	ldd	r24, Y+54	; 0x36
    269a:	9f a9       	ldd	r25, Y+55	; 0x37
    269c:	9b ab       	std	Y+51, r25	; 0x33
    269e:	8a ab       	std	Y+50, r24	; 0x32
    26a0:	8a a9       	ldd	r24, Y+50	; 0x32
    26a2:	9b a9       	ldd	r25, Y+51	; 0x33
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <therm_u8read_bit+0x1b6>
    26a8:	9b ab       	std	Y+51, r25	; 0x33
    26aa:	8a ab       	std	Y+50, r24	; 0x32
    26ac:	18 c0       	rjmp	.+48     	; 0x26de <therm_u8read_bit+0x1f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26ae:	fe 01       	movw	r30, r28
    26b0:	ef 5b       	subi	r30, 0xBF	; 191
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	fe 01       	movw	r30, r28
    26c6:	e0 5c       	subi	r30, 0xC0	; 192
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 83       	st	Z, r24
    26cc:	fe 01       	movw	r30, r28
    26ce:	e0 5c       	subi	r30, 0xC0	; 192
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	80 81       	ld	r24, Z
    26d4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26d6:	89 a9       	ldd	r24, Y+49	; 0x31
    26d8:	8a 95       	dec	r24
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <therm_u8read_bit+0x1ea>
    26dc:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1);
	//Release line and wait for 14uS
	THERM_INPUT_MODE();
    26de:	87 e0       	ldi	r24, 0x07	; 7
    26e0:	63 e0       	ldi	r22, 0x03	; 3
    26e2:	40 e0       	ldi	r20, 0x00	; 0
    26e4:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	a0 e6       	ldi	r26, 0x60	; 96
    26ee:	b1 e4       	ldi	r27, 0x41	; 65
    26f0:	8d a7       	std	Y+45, r24	; 0x2d
    26f2:	9e a7       	std	Y+46, r25	; 0x2e
    26f4:	af a7       	std	Y+47, r26	; 0x2f
    26f6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26f8:	6d a5       	ldd	r22, Y+45	; 0x2d
    26fa:	7e a5       	ldd	r23, Y+46	; 0x2e
    26fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    26fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2700:	2b ea       	ldi	r18, 0xAB	; 171
    2702:	3a ea       	ldi	r19, 0xAA	; 170
    2704:	4a ea       	ldi	r20, 0xAA	; 170
    2706:	50 e4       	ldi	r21, 0x40	; 64
    2708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	89 a7       	std	Y+41, r24	; 0x29
    2712:	9a a7       	std	Y+42, r25	; 0x2a
    2714:	ab a7       	std	Y+43, r26	; 0x2b
    2716:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2718:	69 a5       	ldd	r22, Y+41	; 0x29
    271a:	7a a5       	ldd	r23, Y+42	; 0x2a
    271c:	8b a5       	ldd	r24, Y+43	; 0x2b
    271e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e8       	ldi	r20, 0x80	; 128
    2726:	5f e3       	ldi	r21, 0x3F	; 63
    2728:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    272c:	88 23       	and	r24, r24
    272e:	1c f4       	brge	.+6      	; 0x2736 <therm_u8read_bit+0x248>
		__ticks = 1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	88 a7       	std	Y+40, r24	; 0x28
    2734:	91 c0       	rjmp	.+290    	; 0x2858 <therm_u8read_bit+0x36a>
	else if (__tmp > 255)
    2736:	69 a5       	ldd	r22, Y+41	; 0x29
    2738:	7a a5       	ldd	r23, Y+42	; 0x2a
    273a:	8b a5       	ldd	r24, Y+43	; 0x2b
    273c:	9c a5       	ldd	r25, Y+44	; 0x2c
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	53 e4       	ldi	r21, 0x43	; 67
    2746:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	0c f0       	brlt	.+2      	; 0x2750 <therm_u8read_bit+0x262>
    274e:	7b c0       	rjmp	.+246    	; 0x2846 <therm_u8read_bit+0x358>
	{
		_delay_ms(__us / 1000.0);
    2750:	6d a5       	ldd	r22, Y+45	; 0x2d
    2752:	7e a5       	ldd	r23, Y+46	; 0x2e
    2754:	8f a5       	ldd	r24, Y+47	; 0x2f
    2756:	98 a9       	ldd	r25, Y+48	; 0x30
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	4a e7       	ldi	r20, 0x7A	; 122
    275e:	54 e4       	ldi	r21, 0x44	; 68
    2760:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	8c a3       	std	Y+36, r24	; 0x24
    276a:	9d a3       	std	Y+37, r25	; 0x25
    276c:	ae a3       	std	Y+38, r26	; 0x26
    276e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2770:	6c a1       	ldd	r22, Y+36	; 0x24
    2772:	7d a1       	ldd	r23, Y+37	; 0x25
    2774:	8e a1       	ldd	r24, Y+38	; 0x26
    2776:	9f a1       	ldd	r25, Y+39	; 0x27
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	4a e7       	ldi	r20, 0x7A	; 122
    277e:	55 e4       	ldi	r21, 0x45	; 69
    2780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	88 a3       	std	Y+32, r24	; 0x20
    278a:	99 a3       	std	Y+33, r25	; 0x21
    278c:	aa a3       	std	Y+34, r26	; 0x22
    278e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2790:	68 a1       	ldd	r22, Y+32	; 0x20
    2792:	79 a1       	ldd	r23, Y+33	; 0x21
    2794:	8a a1       	ldd	r24, Y+34	; 0x22
    2796:	9b a1       	ldd	r25, Y+35	; 0x23
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e8       	ldi	r20, 0x80	; 128
    279e:	5f e3       	ldi	r21, 0x3F	; 63
    27a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a4:	88 23       	and	r24, r24
    27a6:	2c f4       	brge	.+10     	; 0x27b2 <therm_u8read_bit+0x2c4>
		__ticks = 1;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9f 8f       	std	Y+31, r25	; 0x1f
    27ae:	8e 8f       	std	Y+30, r24	; 0x1e
    27b0:	3f c0       	rjmp	.+126    	; 0x2830 <therm_u8read_bit+0x342>
	else if (__tmp > 65535)
    27b2:	68 a1       	ldd	r22, Y+32	; 0x20
    27b4:	79 a1       	ldd	r23, Y+33	; 0x21
    27b6:	8a a1       	ldd	r24, Y+34	; 0x22
    27b8:	9b a1       	ldd	r25, Y+35	; 0x23
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	3f ef       	ldi	r19, 0xFF	; 255
    27be:	4f e7       	ldi	r20, 0x7F	; 127
    27c0:	57 e4       	ldi	r21, 0x47	; 71
    27c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c6:	18 16       	cp	r1, r24
    27c8:	4c f5       	brge	.+82     	; 0x281c <therm_u8read_bit+0x32e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ca:	6c a1       	ldd	r22, Y+36	; 0x24
    27cc:	7d a1       	ldd	r23, Y+37	; 0x25
    27ce:	8e a1       	ldd	r24, Y+38	; 0x26
    27d0:	9f a1       	ldd	r25, Y+39	; 0x27
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e2       	ldi	r20, 0x20	; 32
    27d8:	51 e4       	ldi	r21, 0x41	; 65
    27da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	9f 8f       	std	Y+31, r25	; 0x1f
    27f0:	8e 8f       	std	Y+30, r24	; 0x1e
    27f2:	0f c0       	rjmp	.+30     	; 0x2812 <therm_u8read_bit+0x324>
    27f4:	80 e9       	ldi	r24, 0x90	; 144
    27f6:	91 e0       	ldi	r25, 0x01	; 1
    27f8:	9d 8f       	std	Y+29, r25	; 0x1d
    27fa:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27fe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <therm_u8read_bit+0x312>
    2804:	9d 8f       	std	Y+29, r25	; 0x1d
    2806:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2808:	8e 8d       	ldd	r24, Y+30	; 0x1e
    280a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	9f 8f       	std	Y+31, r25	; 0x1f
    2810:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2812:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2814:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	69 f7       	brne	.-38     	; 0x27f4 <therm_u8read_bit+0x306>
    281a:	24 c0       	rjmp	.+72     	; 0x2864 <therm_u8read_bit+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281c:	68 a1       	ldd	r22, Y+32	; 0x20
    281e:	79 a1       	ldd	r23, Y+33	; 0x21
    2820:	8a a1       	ldd	r24, Y+34	; 0x22
    2822:	9b a1       	ldd	r25, Y+35	; 0x23
    2824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	9f 8f       	std	Y+31, r25	; 0x1f
    282e:	8e 8f       	std	Y+30, r24	; 0x1e
    2830:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2832:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2834:	9b 8f       	std	Y+27, r25	; 0x1b
    2836:	8a 8f       	std	Y+26, r24	; 0x1a
    2838:	8a 8d       	ldd	r24, Y+26	; 0x1a
    283a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <therm_u8read_bit+0x34e>
    2840:	9b 8f       	std	Y+27, r25	; 0x1b
    2842:	8a 8f       	std	Y+26, r24	; 0x1a
    2844:	0f c0       	rjmp	.+30     	; 0x2864 <therm_u8read_bit+0x376>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2846:	69 a5       	ldd	r22, Y+41	; 0x29
    2848:	7a a5       	ldd	r23, Y+42	; 0x2a
    284a:	8b a5       	ldd	r24, Y+43	; 0x2b
    284c:	9c a5       	ldd	r25, Y+44	; 0x2c
    284e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	88 a7       	std	Y+40, r24	; 0x28
    2858:	88 a5       	ldd	r24, Y+40	; 0x28
    285a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    285c:	89 8d       	ldd	r24, Y+25	; 0x19
    285e:	8a 95       	dec	r24
    2860:	f1 f7       	brne	.-4      	; 0x285e <therm_u8read_bit+0x370>
    2862:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(14);
	//Read line value
	DIO_u8GetPinValue(THERM_DQ , THERM_PORT , &i);
    2864:	9e 01       	movw	r18, r28
    2866:	26 5b       	subi	r18, 0xB6	; 182
    2868:	3f 4f       	sbci	r19, 0xFF	; 255
    286a:	87 e0       	ldi	r24, 0x07	; 7
    286c:	63 e0       	ldi	r22, 0x03	; 3
    286e:	a9 01       	movw	r20, r18
    2870:	0e 94 05 09 	call	0x120a	; 0x120a <DIO_u8GetPinValue>
	if(i) {bit=1;}
    2874:	fe 01       	movw	r30, r28
    2876:	e6 5b       	subi	r30, 0xB6	; 182
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	80 81       	ld	r24, Z
    287c:	88 23       	and	r24, r24
    287e:	29 f0       	breq	.+10     	; 0x288a <therm_u8read_bit+0x39c>
    2880:	fe 01       	movw	r30, r28
    2882:	e7 5b       	subi	r30, 0xB7	; 183
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	80 83       	st	Z, r24
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	a4 e3       	ldi	r26, 0x34	; 52
    2890:	b2 e4       	ldi	r27, 0x42	; 66
    2892:	8d 8b       	std	Y+21, r24	; 0x15
    2894:	9e 8b       	std	Y+22, r25	; 0x16
    2896:	af 8b       	std	Y+23, r26	; 0x17
    2898:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    289a:	6d 89       	ldd	r22, Y+21	; 0x15
    289c:	7e 89       	ldd	r23, Y+22	; 0x16
    289e:	8f 89       	ldd	r24, Y+23	; 0x17
    28a0:	98 8d       	ldd	r25, Y+24	; 0x18
    28a2:	2b ea       	ldi	r18, 0xAB	; 171
    28a4:	3a ea       	ldi	r19, 0xAA	; 170
    28a6:	4a ea       	ldi	r20, 0xAA	; 170
    28a8:	50 e4       	ldi	r21, 0x40	; 64
    28aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	89 8b       	std	Y+17, r24	; 0x11
    28b4:	9a 8b       	std	Y+18, r25	; 0x12
    28b6:	ab 8b       	std	Y+19, r26	; 0x13
    28b8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28ba:	69 89       	ldd	r22, Y+17	; 0x11
    28bc:	7a 89       	ldd	r23, Y+18	; 0x12
    28be:	8b 89       	ldd	r24, Y+19	; 0x13
    28c0:	9c 89       	ldd	r25, Y+20	; 0x14
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e8       	ldi	r20, 0x80	; 128
    28c8:	5f e3       	ldi	r21, 0x3F	; 63
    28ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28ce:	88 23       	and	r24, r24
    28d0:	1c f4       	brge	.+6      	; 0x28d8 <therm_u8read_bit+0x3ea>
		__ticks = 1;
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	88 8b       	std	Y+16, r24	; 0x10
    28d6:	91 c0       	rjmp	.+290    	; 0x29fa <therm_u8read_bit+0x50c>
	else if (__tmp > 255)
    28d8:	69 89       	ldd	r22, Y+17	; 0x11
    28da:	7a 89       	ldd	r23, Y+18	; 0x12
    28dc:	8b 89       	ldd	r24, Y+19	; 0x13
    28de:	9c 89       	ldd	r25, Y+20	; 0x14
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	4f e7       	ldi	r20, 0x7F	; 127
    28e6:	53 e4       	ldi	r21, 0x43	; 67
    28e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ec:	18 16       	cp	r1, r24
    28ee:	0c f0       	brlt	.+2      	; 0x28f2 <therm_u8read_bit+0x404>
    28f0:	7b c0       	rjmp	.+246    	; 0x29e8 <therm_u8read_bit+0x4fa>
	{
		_delay_ms(__us / 1000.0);
    28f2:	6d 89       	ldd	r22, Y+21	; 0x15
    28f4:	7e 89       	ldd	r23, Y+22	; 0x16
    28f6:	8f 89       	ldd	r24, Y+23	; 0x17
    28f8:	98 8d       	ldd	r25, Y+24	; 0x18
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	4a e7       	ldi	r20, 0x7A	; 122
    2900:	54 e4       	ldi	r21, 0x44	; 68
    2902:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	8c 87       	std	Y+12, r24	; 0x0c
    290c:	9d 87       	std	Y+13, r25	; 0x0d
    290e:	ae 87       	std	Y+14, r26	; 0x0e
    2910:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2912:	6c 85       	ldd	r22, Y+12	; 0x0c
    2914:	7d 85       	ldd	r23, Y+13	; 0x0d
    2916:	8e 85       	ldd	r24, Y+14	; 0x0e
    2918:	9f 85       	ldd	r25, Y+15	; 0x0f
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	4a e7       	ldi	r20, 0x7A	; 122
    2920:	55 e4       	ldi	r21, 0x45	; 69
    2922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	88 87       	std	Y+8, r24	; 0x08
    292c:	99 87       	std	Y+9, r25	; 0x09
    292e:	aa 87       	std	Y+10, r26	; 0x0a
    2930:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2932:	68 85       	ldd	r22, Y+8	; 0x08
    2934:	79 85       	ldd	r23, Y+9	; 0x09
    2936:	8a 85       	ldd	r24, Y+10	; 0x0a
    2938:	9b 85       	ldd	r25, Y+11	; 0x0b
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e8       	ldi	r20, 0x80	; 128
    2940:	5f e3       	ldi	r21, 0x3F	; 63
    2942:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2946:	88 23       	and	r24, r24
    2948:	2c f4       	brge	.+10     	; 0x2954 <therm_u8read_bit+0x466>
		__ticks = 1;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	9f 83       	std	Y+7, r25	; 0x07
    2950:	8e 83       	std	Y+6, r24	; 0x06
    2952:	3f c0       	rjmp	.+126    	; 0x29d2 <therm_u8read_bit+0x4e4>
	else if (__tmp > 65535)
    2954:	68 85       	ldd	r22, Y+8	; 0x08
    2956:	79 85       	ldd	r23, Y+9	; 0x09
    2958:	8a 85       	ldd	r24, Y+10	; 0x0a
    295a:	9b 85       	ldd	r25, Y+11	; 0x0b
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	3f ef       	ldi	r19, 0xFF	; 255
    2960:	4f e7       	ldi	r20, 0x7F	; 127
    2962:	57 e4       	ldi	r21, 0x47	; 71
    2964:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2968:	18 16       	cp	r1, r24
    296a:	4c f5       	brge	.+82     	; 0x29be <therm_u8read_bit+0x4d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296c:	6c 85       	ldd	r22, Y+12	; 0x0c
    296e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2970:	8e 85       	ldd	r24, Y+14	; 0x0e
    2972:	9f 85       	ldd	r25, Y+15	; 0x0f
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e2       	ldi	r20, 0x20	; 32
    297a:	51 e4       	ldi	r21, 0x41	; 65
    297c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	bc 01       	movw	r22, r24
    2986:	cd 01       	movw	r24, r26
    2988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	9f 83       	std	Y+7, r25	; 0x07
    2992:	8e 83       	std	Y+6, r24	; 0x06
    2994:	0f c0       	rjmp	.+30     	; 0x29b4 <therm_u8read_bit+0x4c6>
    2996:	80 e9       	ldi	r24, 0x90	; 144
    2998:	91 e0       	ldi	r25, 0x01	; 1
    299a:	9d 83       	std	Y+5, r25	; 0x05
    299c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    299e:	8c 81       	ldd	r24, Y+4	; 0x04
    29a0:	9d 81       	ldd	r25, Y+5	; 0x05
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	f1 f7       	brne	.-4      	; 0x29a2 <therm_u8read_bit+0x4b4>
    29a6:	9d 83       	std	Y+5, r25	; 0x05
    29a8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29aa:	8e 81       	ldd	r24, Y+6	; 0x06
    29ac:	9f 81       	ldd	r25, Y+7	; 0x07
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	9f 83       	std	Y+7, r25	; 0x07
    29b2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b4:	8e 81       	ldd	r24, Y+6	; 0x06
    29b6:	9f 81       	ldd	r25, Y+7	; 0x07
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	69 f7       	brne	.-38     	; 0x2996 <therm_u8read_bit+0x4a8>
    29bc:	24 c0       	rjmp	.+72     	; 0x2a06 <therm_u8read_bit+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29be:	68 85       	ldd	r22, Y+8	; 0x08
    29c0:	79 85       	ldd	r23, Y+9	; 0x09
    29c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    29c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    29c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	9f 83       	std	Y+7, r25	; 0x07
    29d0:	8e 83       	std	Y+6, r24	; 0x06
    29d2:	8e 81       	ldd	r24, Y+6	; 0x06
    29d4:	9f 81       	ldd	r25, Y+7	; 0x07
    29d6:	9b 83       	std	Y+3, r25	; 0x03
    29d8:	8a 83       	std	Y+2, r24	; 0x02
    29da:	8a 81       	ldd	r24, Y+2	; 0x02
    29dc:	9b 81       	ldd	r25, Y+3	; 0x03
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	f1 f7       	brne	.-4      	; 0x29de <therm_u8read_bit+0x4f0>
    29e2:	9b 83       	std	Y+3, r25	; 0x03
    29e4:	8a 83       	std	Y+2, r24	; 0x02
    29e6:	0f c0       	rjmp	.+30     	; 0x2a06 <therm_u8read_bit+0x518>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29e8:	69 89       	ldd	r22, Y+17	; 0x11
    29ea:	7a 89       	ldd	r23, Y+18	; 0x12
    29ec:	8b 89       	ldd	r24, Y+19	; 0x13
    29ee:	9c 89       	ldd	r25, Y+20	; 0x14
    29f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	88 8b       	std	Y+16, r24	; 0x10
    29fa:	88 89       	ldd	r24, Y+16	; 0x10
    29fc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	8a 95       	dec	r24
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <therm_u8read_bit+0x512>
    2a04:	89 83       	std	Y+1, r24	; 0x01
	//Wait for 45uS to end and return read value
	_delay_us(45);
	return bit;
    2a06:	fe 01       	movw	r30, r28
    2a08:	e7 5b       	subi	r30, 0xB7	; 183
    2a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0c:	80 81       	ld	r24, Z
}
    2a0e:	c6 5b       	subi	r28, 0xB6	; 182
    2a10:	df 4f       	sbci	r29, 0xFF	; 255
    2a12:	0f b6       	in	r0, 0x3f	; 63
    2a14:	f8 94       	cli
    2a16:	de bf       	out	0x3e, r29	; 62
    2a18:	0f be       	out	0x3f, r0	; 63
    2a1a:	cd bf       	out	0x3d, r28	; 61
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	1f 91       	pop	r17
    2a22:	0f 91       	pop	r16
    2a24:	08 95       	ret

00002a26 <therm_u8read_byte>:
u8 therm_u8read_byte(void)
{
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <therm_u8read_byte+0x6>
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
	u8 i=8, n=0;
    2a30:	88 e0       	ldi	r24, 0x08	; 8
    2a32:	8a 83       	std	Y+2, r24	; 0x02
    2a34:	19 82       	std	Y+1, r1	; 0x01
    2a36:	13 c0       	rjmp	.+38     	; 0x2a5e <therm_u8read_byte+0x38>
	while(i){
		n>>=1;
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	86 95       	lsr	r24
    2a3c:	89 83       	std	Y+1, r24	; 0x01
		n|=(therm_u8read_bit()<<7);
    2a3e:	0e 94 77 12 	call	0x24ee	; 0x24ee <therm_u8read_bit>
    2a42:	88 2f       	mov	r24, r24
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	96 95       	lsr	r25
    2a48:	98 2f       	mov	r25, r24
    2a4a:	88 27       	eor	r24, r24
    2a4c:	97 95       	ror	r25
    2a4e:	87 95       	ror	r24
    2a50:	98 2f       	mov	r25, r24
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	89 2b       	or	r24, r25
    2a56:	89 83       	std	Y+1, r24	; 0x01
	i--	;
    2a58:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5a:	81 50       	subi	r24, 0x01	; 1
    2a5c:	8a 83       	std	Y+2, r24	; 0x02
	return bit;
}
u8 therm_u8read_byte(void)
{
	u8 i=8, n=0;
	while(i){
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	88 23       	and	r24, r24
    2a62:	51 f7       	brne	.-44     	; 0x2a38 <therm_u8read_byte+0x12>
		n>>=1;
		n|=(therm_u8read_bit()<<7);
	i--	;
	}
	return n;
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	08 95       	ret

00002a70 <therm_voidwrite_byte>:
void therm_voidwrite_byte(u8 byte)
{
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	00 d0       	rcall	.+0      	; 0x2a76 <therm_voidwrite_byte+0x6>
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=8;
    2a7c:	88 e0       	ldi	r24, 0x08	; 8
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	0a c0       	rjmp	.+20     	; 0x2a96 <therm_voidwrite_byte+0x26>
	while(i){
	//Write actual bit and shift one position right to make the next bit ready
	therm_voidwrite_bit(byte&1);
    2a82:	8a 81       	ldd	r24, Y+2	; 0x02
    2a84:	81 70       	andi	r24, 0x01	; 1
    2a86:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <therm_voidwrite_bit>
	byte>>=1;
    2a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8c:	86 95       	lsr	r24
    2a8e:	8a 83       	std	Y+2, r24	; 0x02
	i--;
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	81 50       	subi	r24, 0x01	; 1
    2a94:	89 83       	std	Y+1, r24	; 0x01
	return n;
}
void therm_voidwrite_byte(u8 byte)
{
	u8 i=8;
	while(i){
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	88 23       	and	r24, r24
    2a9a:	99 f7       	brne	.-26     	; 0x2a82 <therm_voidwrite_byte+0x12>
	therm_voidwrite_bit(byte&1);
	byte>>=1;
	i--;
	}

}
    2a9c:	0f 90       	pop	r0
    2a9e:	0f 90       	pop	r0
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <therm_u8read_temperature>:
u8 therm_u8read_temperature(u16* decimal)
{
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <therm_u8read_temperature+0x6>
    2aac:	00 d0       	rcall	.+0      	; 0x2aae <therm_u8read_temperature+0x8>
    2aae:	0f 92       	push	r0
    2ab0:	cd b7       	in	r28, 0x3d	; 61
    2ab2:	de b7       	in	r29, 0x3e	; 62
    2ab4:	9d 83       	std	Y+5, r25	; 0x05
    2ab6:	8c 83       	std	Y+4, r24	; 0x04
	u8 temperature[2];
	u8 digit;
	//Reset, skip ROM and start temperature conversion
	therm_u8reset();
    2ab8:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <therm_u8reset>
	therm_voidwrite_byte(THERM_CMD_SKIPROM);
    2abc:	8c ec       	ldi	r24, 0xCC	; 204
    2abe:	0e 94 38 15 	call	0x2a70	; 0x2a70 <therm_voidwrite_byte>
	therm_voidwrite_byte(THERM_CMD_CONVERTTEMP);
    2ac2:	84 e4       	ldi	r24, 0x44	; 68
    2ac4:	0e 94 38 15 	call	0x2a70	; 0x2a70 <therm_voidwrite_byte>
	//Wait until conversion is complete
	while(!therm_u8read_bit());
    2ac8:	0e 94 77 12 	call	0x24ee	; 0x24ee <therm_u8read_bit>
    2acc:	88 23       	and	r24, r24
    2ace:	e1 f3       	breq	.-8      	; 0x2ac8 <therm_u8read_temperature+0x22>
	//Reset, skip ROM and send command to read Scratchpad
	therm_u8reset();
    2ad0:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <therm_u8reset>
	therm_voidwrite_byte(THERM_CMD_SKIPROM);
    2ad4:	8c ec       	ldi	r24, 0xCC	; 204
    2ad6:	0e 94 38 15 	call	0x2a70	; 0x2a70 <therm_voidwrite_byte>
	therm_voidwrite_byte(THERM_CMD_RSCRATCHPAD);
    2ada:	8e eb       	ldi	r24, 0xBE	; 190
    2adc:	0e 94 38 15 	call	0x2a70	; 0x2a70 <therm_voidwrite_byte>
	//Read Scratchpad (only 2 first bytes)
	temperature[0]=therm_u8read_byte();
    2ae0:	0e 94 13 15 	call	0x2a26	; 0x2a26 <therm_u8read_byte>
    2ae4:	8a 83       	std	Y+2, r24	; 0x02
	temperature[1]=therm_u8read_byte();
    2ae6:	0e 94 13 15 	call	0x2a26	; 0x2a26 <therm_u8read_byte>
    2aea:	8b 83       	std	Y+3, r24	; 0x03
	therm_u8reset();
    2aec:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <therm_u8reset>
	//Store temperature integer digits and decimal digits
	digit|=(temperature[1]&0x7)<<4;
    2af0:	8b 81       	ldd	r24, Y+3	; 0x03
    2af2:	88 2f       	mov	r24, r24
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	87 70       	andi	r24, 0x07	; 7
    2af8:	90 70       	andi	r25, 0x00	; 0
    2afa:	82 95       	swap	r24
    2afc:	92 95       	swap	r25
    2afe:	90 7f       	andi	r25, 0xF0	; 240
    2b00:	98 27       	eor	r25, r24
    2b02:	80 7f       	andi	r24, 0xF0	; 240
    2b04:	98 27       	eor	r25, r24
    2b06:	98 2f       	mov	r25, r24
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	89 2b       	or	r24, r25
    2b0c:	89 83       	std	Y+1, r24	; 0x01
	//Store decimal digits
	*decimal=temperature[0]&0xf;
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	88 2f       	mov	r24, r24
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	8f 70       	andi	r24, 0x0F	; 15
    2b16:	90 70       	andi	r25, 0x00	; 0
    2b18:	ec 81       	ldd	r30, Y+4	; 0x04
    2b1a:	fd 81       	ldd	r31, Y+5	; 0x05
    2b1c:	91 83       	std	Z+1, r25	; 0x01
    2b1e:	80 83       	st	Z, r24
	*decimal*=625;
    2b20:	ec 81       	ldd	r30, Y+4	; 0x04
    2b22:	fd 81       	ldd	r31, Y+5	; 0x05
    2b24:	20 81       	ld	r18, Z
    2b26:	31 81       	ldd	r19, Z+1	; 0x01
    2b28:	81 e7       	ldi	r24, 0x71	; 113
    2b2a:	92 e0       	ldi	r25, 0x02	; 2
    2b2c:	ac 01       	movw	r20, r24
    2b2e:	24 9f       	mul	r18, r20
    2b30:	c0 01       	movw	r24, r0
    2b32:	25 9f       	mul	r18, r21
    2b34:	90 0d       	add	r25, r0
    2b36:	34 9f       	mul	r19, r20
    2b38:	90 0d       	add	r25, r0
    2b3a:	11 24       	eor	r1, r1
    2b3c:	ec 81       	ldd	r30, Y+4	; 0x04
    2b3e:	fd 81       	ldd	r31, Y+5	; 0x05
    2b40:	91 83       	std	Z+1, r25	; 0x01
    2b42:	80 83       	st	Z, r24
	return digit;
    2b44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	08 95       	ret

00002b56 <TIMER0_voidinit>:
#include "STD_LIB.h"
#include "Timer_Config.h"
#include "Timer_Private.h"

void TIMER0_voidinit(void)
{
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
/*OVERLOW INTERRUT ENABLE*/
		SETBITvalue(TIMSK ,0);

#elif TIM0_MODE == TIM0_CTC

		SETBITvalue(TCCR0 , 3);
    2b5e:	a3 e5       	ldi	r26, 0x53	; 83
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	e3 e5       	ldi	r30, 0x53	; 83
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	88 60       	ori	r24, 0x08	; 8
    2b6a:	8c 93       	st	X, r24
		CLRBITvalue(TCCR0 , 6);
    2b6c:	a3 e5       	ldi	r26, 0x53	; 83
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e3 e5       	ldi	r30, 0x53	; 83
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	8f 7b       	andi	r24, 0xBF	; 191
    2b78:	8c 93       	st	X, r24
		/*CTC INTERRUPT ENABLE*/
		SETBITvalue(TIMSK ,1);
    2b7a:	a9 e5       	ldi	r26, 0x59	; 89
    2b7c:	b0 e0       	ldi	r27, 0x00	; 0
    2b7e:	e9 e5       	ldi	r30, 0x59	; 89
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	80 81       	ld	r24, Z
    2b84:	82 60       	ori	r24, 0x02	; 2
    2b86:	8c 93       	st	X, r24
	#if TIM0_CTC_MODE_OC0_MODE == TIM0_CTC_MODE_OC0_OFF

			CLRBITvalue(TCCR0 , 5);
    2b88:	a3 e5       	ldi	r26, 0x53	; 83
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	e3 e5       	ldi	r30, 0x53	; 83
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	8f 7d       	andi	r24, 0xDF	; 223
    2b94:	8c 93       	st	X, r24
			CLRBITvalue(TCCR0 , 4);
    2b96:	a3 e5       	ldi	r26, 0x53	; 83
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	e3 e5       	ldi	r30, 0x53	; 83
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	8f 7e       	andi	r24, 0xEF	; 239
    2ba2:	8c 93       	st	X, r24
#else
#error "TIMER 0 INVALID"
#endif

/*SET SUITABLE PRESCALAR*/
		TCCR0 &=0xf8;
    2ba4:	a3 e5       	ldi	r26, 0x53	; 83
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e3 e5       	ldi	r30, 0x53	; 83
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	88 7f       	andi	r24, 0xF8	; 248
    2bb0:	8c 93       	st	X, r24
		TCCR0 |=TIM0_PRESCALAR;
    2bb2:	a3 e5       	ldi	r26, 0x53	; 83
    2bb4:	b0 e0       	ldi	r27, 0x00	; 0
    2bb6:	e3 e5       	ldi	r30, 0x53	; 83
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	80 81       	ld	r24, Z
    2bbc:	85 60       	ori	r24, 0x05	; 5
    2bbe:	8c 93       	st	X, r24

}
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <TIMER0_voidSetPreLoadValue>:
void TIMER0_voidSetPreLoadValue(u8 Copy_u8Preload)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	0f 92       	push	r0
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Preload;
    2bd2:	e2 e5       	ldi	r30, 0x52	; 82
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	80 83       	st	Z, r24



}
    2bda:	0f 90       	pop	r0
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	08 95       	ret

00002be2 <TIMER0_voidSetCTCRegister>:
void TIMER0_voidSetCTCRegister(u8 Copy_u8CTCValue)
{
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	0f 92       	push	r0
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	89 83       	std	Y+1, r24	; 0x01

	OCR0 = Copy_u8CTCValue;
    2bee:	ec e5       	ldi	r30, 0x5C	; 92
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
    2bf4:	80 83       	st	Z, r24

}
    2bf6:	0f 90       	pop	r0
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <EXTI0_voidInit>:
 */
#include "STD_LIB.h"
#include "exti_interface.h"
#include "bitmath.h"
void EXTI0_voidInit(void)
{
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
#if EXTI_SENSE_CONTROL == EXTI_RIS_EDGE
	SETBITvalue(MCUCR,1);
    2c06:	a5 e5       	ldi	r26, 0x55	; 85
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	e5 e5       	ldi	r30, 0x55	; 85
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	82 60       	ori	r24, 0x02	; 2
    2c12:	8c 93       	st	X, r24
	SETBITvalue(MCUCR,0);
    2c14:	a5 e5       	ldi	r26, 0x55	; 85
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	e5 e5       	ldi	r30, 0x55	; 85
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	81 60       	ori	r24, 0x01	; 1
    2c20:	8c 93       	st	X, r24
	CLRBITvalue(MCUCR,0);
#else
#error "Invalid choice"
#endif
/*external interrupt 0 enable*/
	SETBITvalue(GICR,6);
    2c22:	ab e5       	ldi	r26, 0x5B	; 91
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	eb e5       	ldi	r30, 0x5B	; 91
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	80 64       	ori	r24, 0x40	; 64
    2c2e:	8c 93       	st	X, r24
}
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <EXTI1_voidInit>:
void EXTI1_voidInit(void)
{
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
#if EXTI_SENSE_CONTROL == EXTI_RIS_EDGE
	SETBITvalue(MCUCR,3);
    2c3e:	a5 e5       	ldi	r26, 0x55	; 85
    2c40:	b0 e0       	ldi	r27, 0x00	; 0
    2c42:	e5 e5       	ldi	r30, 0x55	; 85
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	80 81       	ld	r24, Z
    2c48:	88 60       	ori	r24, 0x08	; 8
    2c4a:	8c 93       	st	X, r24
	SETBITvalue(MCUCR,2);
    2c4c:	a5 e5       	ldi	r26, 0x55	; 85
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e5 e5       	ldi	r30, 0x55	; 85
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	84 60       	ori	r24, 0x04	; 4
    2c58:	8c 93       	st	X, r24
	CLRBITvalue(MCUCR,2);
#else
#error "Invalid choice"
#endif
/*external interrupt 0 enable*/
	SETBITvalue(GICR,7);
    2c5a:	ab e5       	ldi	r26, 0x5B	; 91
    2c5c:	b0 e0       	ldi	r27, 0x00	; 0
    2c5e:	eb e5       	ldi	r30, 0x5B	; 91
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	80 68       	ori	r24, 0x80	; 128
    2c66:	8c 93       	st	X, r24




}
    2c68:	cf 91       	pop	r28
    2c6a:	df 91       	pop	r29
    2c6c:	08 95       	ret

00002c6e <EXTI2_voidInit>:
void EXTI2_voidInit(void)
{
    2c6e:	df 93       	push	r29
    2c70:	cf 93       	push	r28
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
#if EXTI_SENSE_CONTROL == EXTI_RIS_EDGE
	SETBITvalue(MCUCSR,6);
    2c76:	a4 e5       	ldi	r26, 0x54	; 84
    2c78:	b0 e0       	ldi	r27, 0x00	; 0
    2c7a:	e4 e5       	ldi	r30, 0x54	; 84
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	80 81       	ld	r24, Z
    2c80:	80 64       	ori	r24, 0x40	; 64
    2c82:	8c 93       	st	X, r24
	CLRBITvalue(MCUCSR,6);
#else
#error "Invalid choice"
#endif
/*external interrupt 0 enable*/
	SETBITvalue(GICR,5);
    2c84:	ab e5       	ldi	r26, 0x5B	; 91
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	eb e5       	ldi	r30, 0x5B	; 91
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	80 62       	ori	r24, 0x20	; 32
    2c90:	8c 93       	st	X, r24
}
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	08 95       	ret

00002c98 <EXTI_voidSenseControl>:

void EXTI_voidSenseControl(u8 Copy_u8EXTI , u8 Copy_u8SenseControl)
{
    2c98:	df 93       	push	r29
    2c9a:	cf 93       	push	r28
    2c9c:	00 d0       	rcall	.+0      	; 0x2c9e <EXTI_voidSenseControl+0x6>
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	89 83       	std	Y+1, r24	; 0x01
    2ca4:	6a 83       	std	Y+2, r22	; 0x02
#if Copy_u8SenseControl == EXTI_RIS_EDGE
	SETBITvalue(MCUCR,1);
    2ca6:	a5 e5       	ldi	r26, 0x55	; 85
    2ca8:	b0 e0       	ldi	r27, 0x00	; 0
    2caa:	e5 e5       	ldi	r30, 0x55	; 85
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	80 81       	ld	r24, Z
    2cb0:	82 60       	ori	r24, 0x02	; 2
    2cb2:	8c 93       	st	X, r24
	SETBITvalue(MCUCR,0);
    2cb4:	a5 e5       	ldi	r26, 0x55	; 85
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	e5 e5       	ldi	r30, 0x55	; 85
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	81 60       	ori	r24, 0x01	; 1
    2cc0:	8c 93       	st	X, r24
	CLRBITvalue(MCUCR,1);
	CLRBITvalue(MCUCR,0);
#else
#error "Invalid choice"
#endif
	if(Copy_u8EXTI>7 || Copy_u8EXTI<5){return;}
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	88 30       	cpi	r24, 0x08	; 8
    2cc6:	b0 f4       	brcc	.+44     	; 0x2cf4 <EXTI_voidSenseControl+0x5c>
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	85 30       	cpi	r24, 0x05	; 5
    2ccc:	98 f0       	brcs	.+38     	; 0x2cf4 <EXTI_voidSenseControl+0x5c>
	SETBITvalue(GICR,Copy_u8EXTI);
    2cce:	ab e5       	ldi	r26, 0x5B	; 91
    2cd0:	b0 e0       	ldi	r27, 0x00	; 0
    2cd2:	eb e5       	ldi	r30, 0x5B	; 91
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	80 81       	ld	r24, Z
    2cd8:	48 2f       	mov	r20, r24
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	28 2f       	mov	r18, r24
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	02 2e       	mov	r0, r18
    2ce6:	02 c0       	rjmp	.+4      	; 0x2cec <EXTI_voidSenseControl+0x54>
    2ce8:	88 0f       	add	r24, r24
    2cea:	99 1f       	adc	r25, r25
    2cec:	0a 94       	dec	r0
    2cee:	e2 f7       	brpl	.-8      	; 0x2ce8 <EXTI_voidSenseControl+0x50>
    2cf0:	84 2b       	or	r24, r20
    2cf2:	8c 93       	st	X, r24

}
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	cf 91       	pop	r28
    2cfa:	df 91       	pop	r29
    2cfc:	08 95       	ret

00002cfe <main>:
	u8 set_temp = 60; //variable to get and store set_temp from e2prom
	u32 current_temp = 16; //current temp
	u8 current_led = 0; //led to be on according to process (no led for off)
	u16 Set_mode_count = 0; //counter for setting temperature mode (exit the mode after 5 sec)
int main(void)
{
    2cfe:	0f 93       	push	r16
    2d00:	1f 93       	push	r17
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	c8 54       	subi	r28, 0x48	; 72
    2d0c:	d1 40       	sbci	r29, 0x01	; 1
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
	//buttons
	DIO_u8SetPinDirection(PIN2,DIO_PORTD,PIN_INPUT); //ON/OFF button & Interrupt0
    2d18:	82 e0       	ldi	r24, 0x02	; 2
    2d1a:	63 e0       	ldi	r22, 0x03	; 3
    2d1c:	40 e0       	ldi	r20, 0x00	; 0
    2d1e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN6,DIO_PORTD,PIN_INPUT); //inc temp button
    2d22:	86 e0       	ldi	r24, 0x06	; 6
    2d24:	63 e0       	ldi	r22, 0x03	; 3
    2d26:	40 e0       	ldi	r20, 0x00	; 0
    2d28:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN0,DIO_PORTB,PIN_INPUT); //dec temp button
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	61 e0       	ldi	r22, 0x01	; 1
    2d30:	40 e0       	ldi	r20, 0x00	; 0
    2d32:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>

	//leds
	DIO_u8SetPinDirection(COOLING_LED,LED_PORT,PIN_OUTPUT); //Cooling Elememt led
    2d36:	87 e0       	ldi	r24, 0x07	; 7
    2d38:	62 e0       	ldi	r22, 0x02	; 2
    2d3a:	41 e0       	ldi	r20, 0x01	; 1
    2d3c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(HEATING_LED,LED_PORT,PIN_OUTPUT); //Heating Elememt led
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	62 e0       	ldi	r22, 0x02	; 2
    2d44:	41 e0       	ldi	r20, 0x01	; 1
    2d46:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>


	//7-segment pins initialization

	DIO_u8SetPinDirection(PIN4,DIO_PORTA,PIN_OUTPUT);
    2d4a:	84 e0       	ldi	r24, 0x04	; 4
    2d4c:	60 e0       	ldi	r22, 0x00	; 0
    2d4e:	41 e0       	ldi	r20, 0x01	; 1
    2d50:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN5,DIO_PORTA,PIN_OUTPUT);
    2d54:	85 e0       	ldi	r24, 0x05	; 5
    2d56:	60 e0       	ldi	r22, 0x00	; 0
    2d58:	41 e0       	ldi	r20, 0x01	; 1
    2d5a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN6,DIO_PORTA,PIN_OUTPUT);
    2d5e:	86 e0       	ldi	r24, 0x06	; 6
    2d60:	60 e0       	ldi	r22, 0x00	; 0
    2d62:	41 e0       	ldi	r20, 0x01	; 1
    2d64:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN7,DIO_PORTA,PIN_OUTPUT);
    2d68:	87 e0       	ldi	r24, 0x07	; 7
    2d6a:	60 e0       	ldi	r22, 0x00	; 0
    2d6c:	41 e0       	ldi	r20, 0x01	; 1
    2d6e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(PIN1,DIO_PORTB,PIN_OUTPUT);
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	61 e0       	ldi	r22, 0x01	; 1
    2d76:	41 e0       	ldi	r20, 0x01	; 1
    2d78:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN2,DIO_PORTB,PIN_OUTPUT);
    2d7c:	82 e0       	ldi	r24, 0x02	; 2
    2d7e:	61 e0       	ldi	r22, 0x01	; 1
    2d80:	41 e0       	ldi	r20, 0x01	; 1
    2d82:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>

	//H-bridge for peltier pins initalization

	DIO_u8SetPinDirection(R_EN_PIN,H_BRIDGE_PORT,PIN_OUTPUT);
    2d86:	83 e0       	ldi	r24, 0x03	; 3
    2d88:	62 e0       	ldi	r22, 0x02	; 2
    2d8a:	41 e0       	ldi	r20, 0x01	; 1
    2d8c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(L_EN_PIN,H_BRIDGE_PORT,PIN_OUTPUT);
    2d90:	84 e0       	ldi	r24, 0x04	; 4
    2d92:	62 e0       	ldi	r22, 0x02	; 2
    2d94:	41 e0       	ldi	r20, 0x01	; 1
    2d96:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(RPWM_PIN,H_BRIDGE_PORT,PIN_OUTPUT);
    2d9a:	85 e0       	ldi	r24, 0x05	; 5
    2d9c:	62 e0       	ldi	r22, 0x02	; 2
    2d9e:	41 e0       	ldi	r20, 0x01	; 1
    2da0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(LPWM_PIN,H_BRIDGE_PORT,PIN_OUTPUT);
    2da4:	86 e0       	ldi	r24, 0x06	; 6
    2da6:	62 e0       	ldi	r22, 0x02	; 2
    2da8:	41 e0       	ldi	r20, 0x01	; 1
    2daa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_u8SetPinDirection>

	//Timer & external & global interrupt initialization
	TIMER0_voidSetCTCRegister(156);
    2dae:	8c e9       	ldi	r24, 0x9C	; 156
    2db0:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <TIMER0_voidSetCTCRegister>
	TIMER0_voidinit();
    2db4:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <TIMER0_voidinit>
	EXTI0_voidInit();
    2db8:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <EXTI0_voidInit>
	GIE_voidEnable();
    2dbc:	0e 94 85 0c 	call	0x190a	; 0x190a <GIE_voidEnable>

	//I2c initialization
	TWI_voidInitMaster(16);
    2dc0:	80 e1       	ldi	r24, 0x10	; 16
    2dc2:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <TWI_voidInitMaster>
	EEPROM_voidSendDataByte(16,0,0);
    2dc6:	80 e1       	ldi	r24, 0x10	; 16
    2dc8:	60 e0       	ldi	r22, 0x00	; 0
    2dca:	40 e0       	ldi	r20, 0x00	; 0
    2dcc:	0e 94 c7 0b 	call	0x178e	; 0x178e <EEPROM_voidSendDataByte>
	EEPROM_voidSendDataByte(60,11,0);
    2dd0:	8c e3       	ldi	r24, 0x3C	; 60
    2dd2:	6b e0       	ldi	r22, 0x0B	; 11
    2dd4:	40 e0       	ldi	r20, 0x00	; 0
    2dd6:	0e 94 c7 0b 	call	0x178e	; 0x178e <EEPROM_voidSendDataByte>
	//variables to be used in program
	u8 tenth ,units , current_state = Peltier_OFF , new_state , inc , dec;
    2dda:	fe 01       	movw	r30, r28
    2ddc:	ec 5b       	subi	r30, 0xBC	; 188
    2dde:	fe 4f       	sbci	r31, 0xFE	; 254
    2de0:	10 82       	st	Z, r1
	while(1)
	{
		if(On_Off_Set_Flag == 1)
    2de2:	80 91 6e 00 	lds	r24, 0x006E
    2de6:	81 30       	cpi	r24, 0x01	; 1
    2de8:	11 f0       	breq	.+4      	; 0x2dee <main+0xf0>
    2dea:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <main+0x13e8>
		{
			//test if any of the setting temperature buttons is pressed
			DIO_u8GetPinValue(PIN6,DIO_PORTD,&inc);
    2dee:	9e 01       	movw	r18, r28
    2df0:	29 5b       	subi	r18, 0xB9	; 185
    2df2:	3e 4f       	sbci	r19, 0xFE	; 254
    2df4:	86 e0       	ldi	r24, 0x06	; 6
    2df6:	63 e0       	ldi	r22, 0x03	; 3
    2df8:	a9 01       	movw	r20, r18
    2dfa:	0e 94 05 09 	call	0x120a	; 0x120a <DIO_u8GetPinValue>
			DIO_u8GetPinValue(PIN0,DIO_PORTB,&dec);
    2dfe:	9e 01       	movw	r18, r28
    2e00:	28 5b       	subi	r18, 0xB8	; 184
    2e02:	3e 4f       	sbci	r19, 0xFE	; 254
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	61 e0       	ldi	r22, 0x01	; 1
    2e08:	a9 01       	movw	r20, r18
    2e0a:	0e 94 05 09 	call	0x120a	; 0x120a <DIO_u8GetPinValue>
			if(dec || inc){inc = 0; dec = 0;On_Off_Set_Flag = 2;_delay_ms(50);Set_mode_count = 0; }
    2e0e:	fe 01       	movw	r30, r28
    2e10:	e8 5b       	subi	r30, 0xB8	; 184
    2e12:	fe 4f       	sbci	r31, 0xFE	; 254
    2e14:	80 81       	ld	r24, Z
    2e16:	88 23       	and	r24, r24
    2e18:	39 f4       	brne	.+14     	; 0x2e28 <main+0x12a>
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	e9 5b       	subi	r30, 0xB9	; 185
    2e1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e20:	80 81       	ld	r24, Z
    2e22:	88 23       	and	r24, r24
    2e24:	09 f4       	brne	.+2      	; 0x2e28 <main+0x12a>
    2e26:	c2 c0       	rjmp	.+388    	; 0x2fac <main+0x2ae>
    2e28:	fe 01       	movw	r30, r28
    2e2a:	e9 5b       	subi	r30, 0xB9	; 185
    2e2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e2e:	10 82       	st	Z, r1
    2e30:	fe 01       	movw	r30, r28
    2e32:	e8 5b       	subi	r30, 0xB8	; 184
    2e34:	fe 4f       	sbci	r31, 0xFE	; 254
    2e36:	10 82       	st	Z, r1
    2e38:	82 e0       	ldi	r24, 0x02	; 2
    2e3a:	80 93 6e 00 	sts	0x006E, r24
    2e3e:	fe 01       	movw	r30, r28
    2e40:	e1 5c       	subi	r30, 0xC1	; 193
    2e42:	fe 4f       	sbci	r31, 0xFE	; 254
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a8 e4       	ldi	r26, 0x48	; 72
    2e4a:	b2 e4       	ldi	r27, 0x42	; 66
    2e4c:	80 83       	st	Z, r24
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	a2 83       	std	Z+2, r26	; 0x02
    2e52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e54:	8e 01       	movw	r16, r28
    2e56:	05 5c       	subi	r16, 0xC5	; 197
    2e58:	1e 4f       	sbci	r17, 0xFE	; 254
    2e5a:	fe 01       	movw	r30, r28
    2e5c:	e1 5c       	subi	r30, 0xC1	; 193
    2e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e60:	60 81       	ld	r22, Z
    2e62:	71 81       	ldd	r23, Z+1	; 0x01
    2e64:	82 81       	ldd	r24, Z+2	; 0x02
    2e66:	93 81       	ldd	r25, Z+3	; 0x03
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	4a e7       	ldi	r20, 0x7A	; 122
    2e6e:	55 e4       	ldi	r21, 0x45	; 69
    2e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	f8 01       	movw	r30, r16
    2e7a:	80 83       	st	Z, r24
    2e7c:	91 83       	std	Z+1, r25	; 0x01
    2e7e:	a2 83       	std	Z+2, r26	; 0x02
    2e80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e82:	fe 01       	movw	r30, r28
    2e84:	e5 5c       	subi	r30, 0xC5	; 197
    2e86:	fe 4f       	sbci	r31, 0xFE	; 254
    2e88:	60 81       	ld	r22, Z
    2e8a:	71 81       	ldd	r23, Z+1	; 0x01
    2e8c:	82 81       	ldd	r24, Z+2	; 0x02
    2e8e:	93 81       	ldd	r25, Z+3	; 0x03
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e8       	ldi	r20, 0x80	; 128
    2e96:	5f e3       	ldi	r21, 0x3F	; 63
    2e98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e9c:	88 23       	and	r24, r24
    2e9e:	44 f4       	brge	.+16     	; 0x2eb0 <main+0x1b2>
		__ticks = 1;
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e7 5c       	subi	r30, 0xC7	; 199
    2ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	91 83       	std	Z+1, r25	; 0x01
    2eac:	80 83       	st	Z, r24
    2eae:	64 c0       	rjmp	.+200    	; 0x2f78 <main+0x27a>
	else if (__tmp > 65535)
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	e5 5c       	subi	r30, 0xC5	; 197
    2eb4:	fe 4f       	sbci	r31, 0xFE	; 254
    2eb6:	60 81       	ld	r22, Z
    2eb8:	71 81       	ldd	r23, Z+1	; 0x01
    2eba:	82 81       	ldd	r24, Z+2	; 0x02
    2ebc:	93 81       	ldd	r25, Z+3	; 0x03
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	3f ef       	ldi	r19, 0xFF	; 255
    2ec2:	4f e7       	ldi	r20, 0x7F	; 127
    2ec4:	57 e4       	ldi	r21, 0x47	; 71
    2ec6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eca:	18 16       	cp	r1, r24
    2ecc:	0c f0       	brlt	.+2      	; 0x2ed0 <main+0x1d2>
    2ece:	43 c0       	rjmp	.+134    	; 0x2f56 <main+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	e1 5c       	subi	r30, 0xC1	; 193
    2ed4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed6:	60 81       	ld	r22, Z
    2ed8:	71 81       	ldd	r23, Z+1	; 0x01
    2eda:	82 81       	ldd	r24, Z+2	; 0x02
    2edc:	93 81       	ldd	r25, Z+3	; 0x03
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e2       	ldi	r20, 0x20	; 32
    2ee4:	51 e4       	ldi	r21, 0x41	; 65
    2ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	8e 01       	movw	r16, r28
    2ef0:	07 5c       	subi	r16, 0xC7	; 199
    2ef2:	1e 4f       	sbci	r17, 0xFE	; 254
    2ef4:	bc 01       	movw	r22, r24
    2ef6:	cd 01       	movw	r24, r26
    2ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efc:	dc 01       	movw	r26, r24
    2efe:	cb 01       	movw	r24, r22
    2f00:	f8 01       	movw	r30, r16
    2f02:	91 83       	std	Z+1, r25	; 0x01
    2f04:	80 83       	st	Z, r24
    2f06:	1f c0       	rjmp	.+62     	; 0x2f46 <main+0x248>
    2f08:	fe 01       	movw	r30, r28
    2f0a:	e9 5c       	subi	r30, 0xC9	; 201
    2f0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f0e:	80 e9       	ldi	r24, 0x90	; 144
    2f10:	91 e0       	ldi	r25, 0x01	; 1
    2f12:	91 83       	std	Z+1, r25	; 0x01
    2f14:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f16:	fe 01       	movw	r30, r28
    2f18:	e9 5c       	subi	r30, 0xC9	; 201
    2f1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f1c:	80 81       	ld	r24, Z
    2f1e:	91 81       	ldd	r25, Z+1	; 0x01
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	f1 f7       	brne	.-4      	; 0x2f20 <main+0x222>
    2f24:	fe 01       	movw	r30, r28
    2f26:	e9 5c       	subi	r30, 0xC9	; 201
    2f28:	fe 4f       	sbci	r31, 0xFE	; 254
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2e:	de 01       	movw	r26, r28
    2f30:	a7 5c       	subi	r26, 0xC7	; 199
    2f32:	be 4f       	sbci	r27, 0xFE	; 254
    2f34:	fe 01       	movw	r30, r28
    2f36:	e7 5c       	subi	r30, 0xC7	; 199
    2f38:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 81       	ldd	r25, Z+1	; 0x01
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	11 96       	adiw	r26, 0x01	; 1
    2f42:	9c 93       	st	X, r25
    2f44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f46:	fe 01       	movw	r30, r28
    2f48:	e7 5c       	subi	r30, 0xC7	; 199
    2f4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f4c:	80 81       	ld	r24, Z
    2f4e:	91 81       	ldd	r25, Z+1	; 0x01
    2f50:	00 97       	sbiw	r24, 0x00	; 0
    2f52:	d1 f6       	brne	.-76     	; 0x2f08 <main+0x20a>
    2f54:	27 c0       	rjmp	.+78     	; 0x2fa4 <main+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f56:	8e 01       	movw	r16, r28
    2f58:	07 5c       	subi	r16, 0xC7	; 199
    2f5a:	1e 4f       	sbci	r17, 0xFE	; 254
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	e5 5c       	subi	r30, 0xC5	; 197
    2f60:	fe 4f       	sbci	r31, 0xFE	; 254
    2f62:	60 81       	ld	r22, Z
    2f64:	71 81       	ldd	r23, Z+1	; 0x01
    2f66:	82 81       	ldd	r24, Z+2	; 0x02
    2f68:	93 81       	ldd	r25, Z+3	; 0x03
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	f8 01       	movw	r30, r16
    2f74:	91 83       	std	Z+1, r25	; 0x01
    2f76:	80 83       	st	Z, r24
    2f78:	de 01       	movw	r26, r28
    2f7a:	ab 5c       	subi	r26, 0xCB	; 203
    2f7c:	be 4f       	sbci	r27, 0xFE	; 254
    2f7e:	fe 01       	movw	r30, r28
    2f80:	e7 5c       	subi	r30, 0xC7	; 199
    2f82:	fe 4f       	sbci	r31, 0xFE	; 254
    2f84:	80 81       	ld	r24, Z
    2f86:	91 81       	ldd	r25, Z+1	; 0x01
    2f88:	8d 93       	st	X+, r24
    2f8a:	9c 93       	st	X, r25
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	eb 5c       	subi	r30, 0xCB	; 203
    2f90:	fe 4f       	sbci	r31, 0xFE	; 254
    2f92:	80 81       	ld	r24, Z
    2f94:	91 81       	ldd	r25, Z+1	; 0x01
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <main+0x298>
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	eb 5c       	subi	r30, 0xCB	; 203
    2f9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	80 83       	st	Z, r24
    2fa4:	10 92 71 00 	sts	0x0071, r1
    2fa8:	10 92 70 00 	sts	0x0070, r1
			//-----------------

			// show the current temp.
			tenth = current_temp/10;
    2fac:	80 91 69 00 	lds	r24, 0x0069
    2fb0:	90 91 6a 00 	lds	r25, 0x006A
    2fb4:	a0 91 6b 00 	lds	r26, 0x006B
    2fb8:	b0 91 6c 00 	lds	r27, 0x006C
    2fbc:	2a e0       	ldi	r18, 0x0A	; 10
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e0       	ldi	r20, 0x00	; 0
    2fc2:	50 e0       	ldi	r21, 0x00	; 0
    2fc4:	bc 01       	movw	r22, r24
    2fc6:	cd 01       	movw	r24, r26
    2fc8:	0e 94 92 2a 	call	0x5524	; 0x5524 <__udivmodsi4>
    2fcc:	da 01       	movw	r26, r20
    2fce:	c9 01       	movw	r24, r18
    2fd0:	fe 01       	movw	r30, r28
    2fd2:	ea 5b       	subi	r30, 0xBA	; 186
    2fd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd6:	80 83       	st	Z, r24
			units = current_temp%10;
    2fd8:	80 91 69 00 	lds	r24, 0x0069
    2fdc:	90 91 6a 00 	lds	r25, 0x006A
    2fe0:	a0 91 6b 00 	lds	r26, 0x006B
    2fe4:	b0 91 6c 00 	lds	r27, 0x006C
    2fe8:	2a e0       	ldi	r18, 0x0A	; 10
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e0       	ldi	r20, 0x00	; 0
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	bc 01       	movw	r22, r24
    2ff2:	cd 01       	movw	r24, r26
    2ff4:	0e 94 92 2a 	call	0x5524	; 0x5524 <__udivmodsi4>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	eb 5b       	subi	r30, 0xBB	; 187
    3000:	fe 4f       	sbci	r31, 0xFE	; 254
    3002:	80 83       	st	Z, r24

			DIO_u8SetPinValue(PIN1,DIO_PORTB,LOW);
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	61 e0       	ldi	r22, 0x01	; 1
    3008:	40 e0       	ldi	r20, 0x00	; 0
    300a:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,HIGH);
    300e:	82 e0       	ldi	r24, 0x02	; 2
    3010:	61 e0       	ldi	r22, 0x01	; 1
    3012:	41 e0       	ldi	r20, 0x01	; 1
    3014:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,tenth);
    3018:	fe 01       	movw	r30, r28
    301a:	ea 5b       	subi	r30, 0xBA	; 186
    301c:	fe 4f       	sbci	r31, 0xFE	; 254
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	60 e0       	ldi	r22, 0x00	; 0
    3022:	40 81       	ld	r20, Z
    3024:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    3028:	fe 01       	movw	r30, r28
    302a:	ef 5c       	subi	r30, 0xCF	; 207
    302c:	fe 4f       	sbci	r31, 0xFE	; 254
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	a0 ea       	ldi	r26, 0xA0	; 160
    3034:	b0 e4       	ldi	r27, 0x40	; 64
    3036:	80 83       	st	Z, r24
    3038:	91 83       	std	Z+1, r25	; 0x01
    303a:	a2 83       	std	Z+2, r26	; 0x02
    303c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    303e:	8e 01       	movw	r16, r28
    3040:	03 5d       	subi	r16, 0xD3	; 211
    3042:	1e 4f       	sbci	r17, 0xFE	; 254
    3044:	fe 01       	movw	r30, r28
    3046:	ef 5c       	subi	r30, 0xCF	; 207
    3048:	fe 4f       	sbci	r31, 0xFE	; 254
    304a:	60 81       	ld	r22, Z
    304c:	71 81       	ldd	r23, Z+1	; 0x01
    304e:	82 81       	ldd	r24, Z+2	; 0x02
    3050:	93 81       	ldd	r25, Z+3	; 0x03
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	4a e7       	ldi	r20, 0x7A	; 122
    3058:	55 e4       	ldi	r21, 0x45	; 69
    305a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	f8 01       	movw	r30, r16
    3064:	80 83       	st	Z, r24
    3066:	91 83       	std	Z+1, r25	; 0x01
    3068:	a2 83       	std	Z+2, r26	; 0x02
    306a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    306c:	fe 01       	movw	r30, r28
    306e:	e3 5d       	subi	r30, 0xD3	; 211
    3070:	fe 4f       	sbci	r31, 0xFE	; 254
    3072:	60 81       	ld	r22, Z
    3074:	71 81       	ldd	r23, Z+1	; 0x01
    3076:	82 81       	ldd	r24, Z+2	; 0x02
    3078:	93 81       	ldd	r25, Z+3	; 0x03
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e0       	ldi	r19, 0x00	; 0
    307e:	40 e8       	ldi	r20, 0x80	; 128
    3080:	5f e3       	ldi	r21, 0x3F	; 63
    3082:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3086:	88 23       	and	r24, r24
    3088:	44 f4       	brge	.+16     	; 0x309a <main+0x39c>
		__ticks = 1;
    308a:	fe 01       	movw	r30, r28
    308c:	e5 5d       	subi	r30, 0xD5	; 213
    308e:	fe 4f       	sbci	r31, 0xFE	; 254
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	91 83       	std	Z+1, r25	; 0x01
    3096:	80 83       	st	Z, r24
    3098:	64 c0       	rjmp	.+200    	; 0x3162 <main+0x464>
	else if (__tmp > 65535)
    309a:	fe 01       	movw	r30, r28
    309c:	e3 5d       	subi	r30, 0xD3	; 211
    309e:	fe 4f       	sbci	r31, 0xFE	; 254
    30a0:	60 81       	ld	r22, Z
    30a2:	71 81       	ldd	r23, Z+1	; 0x01
    30a4:	82 81       	ldd	r24, Z+2	; 0x02
    30a6:	93 81       	ldd	r25, Z+3	; 0x03
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	3f ef       	ldi	r19, 0xFF	; 255
    30ac:	4f e7       	ldi	r20, 0x7F	; 127
    30ae:	57 e4       	ldi	r21, 0x47	; 71
    30b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30b4:	18 16       	cp	r1, r24
    30b6:	0c f0       	brlt	.+2      	; 0x30ba <main+0x3bc>
    30b8:	43 c0       	rjmp	.+134    	; 0x3140 <main+0x442>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ba:	fe 01       	movw	r30, r28
    30bc:	ef 5c       	subi	r30, 0xCF	; 207
    30be:	fe 4f       	sbci	r31, 0xFE	; 254
    30c0:	60 81       	ld	r22, Z
    30c2:	71 81       	ldd	r23, Z+1	; 0x01
    30c4:	82 81       	ldd	r24, Z+2	; 0x02
    30c6:	93 81       	ldd	r25, Z+3	; 0x03
    30c8:	20 e0       	ldi	r18, 0x00	; 0
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	40 e2       	ldi	r20, 0x20	; 32
    30ce:	51 e4       	ldi	r21, 0x41	; 65
    30d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	8e 01       	movw	r16, r28
    30da:	05 5d       	subi	r16, 0xD5	; 213
    30dc:	1e 4f       	sbci	r17, 0xFE	; 254
    30de:	bc 01       	movw	r22, r24
    30e0:	cd 01       	movw	r24, r26
    30e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	f8 01       	movw	r30, r16
    30ec:	91 83       	std	Z+1, r25	; 0x01
    30ee:	80 83       	st	Z, r24
    30f0:	1f c0       	rjmp	.+62     	; 0x3130 <main+0x432>
    30f2:	fe 01       	movw	r30, r28
    30f4:	e7 5d       	subi	r30, 0xD7	; 215
    30f6:	fe 4f       	sbci	r31, 0xFE	; 254
    30f8:	80 e9       	ldi	r24, 0x90	; 144
    30fa:	91 e0       	ldi	r25, 0x01	; 1
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	80 83       	st	Z, r24
    3100:	fe 01       	movw	r30, r28
    3102:	e7 5d       	subi	r30, 0xD7	; 215
    3104:	fe 4f       	sbci	r31, 0xFE	; 254
    3106:	80 81       	ld	r24, Z
    3108:	91 81       	ldd	r25, Z+1	; 0x01
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	f1 f7       	brne	.-4      	; 0x310a <main+0x40c>
    310e:	fe 01       	movw	r30, r28
    3110:	e7 5d       	subi	r30, 0xD7	; 215
    3112:	fe 4f       	sbci	r31, 0xFE	; 254
    3114:	91 83       	std	Z+1, r25	; 0x01
    3116:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3118:	de 01       	movw	r26, r28
    311a:	a5 5d       	subi	r26, 0xD5	; 213
    311c:	be 4f       	sbci	r27, 0xFE	; 254
    311e:	fe 01       	movw	r30, r28
    3120:	e5 5d       	subi	r30, 0xD5	; 213
    3122:	fe 4f       	sbci	r31, 0xFE	; 254
    3124:	80 81       	ld	r24, Z
    3126:	91 81       	ldd	r25, Z+1	; 0x01
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	11 96       	adiw	r26, 0x01	; 1
    312c:	9c 93       	st	X, r25
    312e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3130:	fe 01       	movw	r30, r28
    3132:	e5 5d       	subi	r30, 0xD5	; 213
    3134:	fe 4f       	sbci	r31, 0xFE	; 254
    3136:	80 81       	ld	r24, Z
    3138:	91 81       	ldd	r25, Z+1	; 0x01
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	d1 f6       	brne	.-76     	; 0x30f2 <main+0x3f4>
    313e:	27 c0       	rjmp	.+78     	; 0x318e <main+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3140:	8e 01       	movw	r16, r28
    3142:	05 5d       	subi	r16, 0xD5	; 213
    3144:	1e 4f       	sbci	r17, 0xFE	; 254
    3146:	fe 01       	movw	r30, r28
    3148:	e3 5d       	subi	r30, 0xD3	; 211
    314a:	fe 4f       	sbci	r31, 0xFE	; 254
    314c:	60 81       	ld	r22, Z
    314e:	71 81       	ldd	r23, Z+1	; 0x01
    3150:	82 81       	ldd	r24, Z+2	; 0x02
    3152:	93 81       	ldd	r25, Z+3	; 0x03
    3154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	f8 01       	movw	r30, r16
    315e:	91 83       	std	Z+1, r25	; 0x01
    3160:	80 83       	st	Z, r24
    3162:	de 01       	movw	r26, r28
    3164:	a9 5d       	subi	r26, 0xD9	; 217
    3166:	be 4f       	sbci	r27, 0xFE	; 254
    3168:	fe 01       	movw	r30, r28
    316a:	e5 5d       	subi	r30, 0xD5	; 213
    316c:	fe 4f       	sbci	r31, 0xFE	; 254
    316e:	80 81       	ld	r24, Z
    3170:	91 81       	ldd	r25, Z+1	; 0x01
    3172:	8d 93       	st	X+, r24
    3174:	9c 93       	st	X, r25
    3176:	fe 01       	movw	r30, r28
    3178:	e9 5d       	subi	r30, 0xD9	; 217
    317a:	fe 4f       	sbci	r31, 0xFE	; 254
    317c:	80 81       	ld	r24, Z
    317e:	91 81       	ldd	r25, Z+1	; 0x01
    3180:	01 97       	sbiw	r24, 0x01	; 1
    3182:	f1 f7       	brne	.-4      	; 0x3180 <main+0x482>
    3184:	fe 01       	movw	r30, r28
    3186:	e9 5d       	subi	r30, 0xD9	; 217
    3188:	fe 4f       	sbci	r31, 0xFE	; 254
    318a:	91 83       	std	Z+1, r25	; 0x01
    318c:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_u8SetPinValue(PIN1,DIO_PORTB,HIGH);
    318e:	81 e0       	ldi	r24, 0x01	; 1
    3190:	61 e0       	ldi	r22, 0x01	; 1
    3192:	41 e0       	ldi	r20, 0x01	; 1
    3194:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,LOW);
    3198:	82 e0       	ldi	r24, 0x02	; 2
    319a:	61 e0       	ldi	r22, 0x01	; 1
    319c:	40 e0       	ldi	r20, 0x00	; 0
    319e:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,units);
    31a2:	fe 01       	movw	r30, r28
    31a4:	eb 5b       	subi	r30, 0xBB	; 187
    31a6:	fe 4f       	sbci	r31, 0xFE	; 254
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	60 e0       	ldi	r22, 0x00	; 0
    31ac:	40 81       	ld	r20, Z
    31ae:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    31b2:	fe 01       	movw	r30, r28
    31b4:	ed 5d       	subi	r30, 0xDD	; 221
    31b6:	fe 4f       	sbci	r31, 0xFE	; 254
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	a0 ea       	ldi	r26, 0xA0	; 160
    31be:	b0 e4       	ldi	r27, 0x40	; 64
    31c0:	80 83       	st	Z, r24
    31c2:	91 83       	std	Z+1, r25	; 0x01
    31c4:	a2 83       	std	Z+2, r26	; 0x02
    31c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c8:	8e 01       	movw	r16, r28
    31ca:	01 5e       	subi	r16, 0xE1	; 225
    31cc:	1e 4f       	sbci	r17, 0xFE	; 254
    31ce:	fe 01       	movw	r30, r28
    31d0:	ed 5d       	subi	r30, 0xDD	; 221
    31d2:	fe 4f       	sbci	r31, 0xFE	; 254
    31d4:	60 81       	ld	r22, Z
    31d6:	71 81       	ldd	r23, Z+1	; 0x01
    31d8:	82 81       	ldd	r24, Z+2	; 0x02
    31da:	93 81       	ldd	r25, Z+3	; 0x03
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	4a e7       	ldi	r20, 0x7A	; 122
    31e2:	55 e4       	ldi	r21, 0x45	; 69
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	f8 01       	movw	r30, r16
    31ee:	80 83       	st	Z, r24
    31f0:	91 83       	std	Z+1, r25	; 0x01
    31f2:	a2 83       	std	Z+2, r26	; 0x02
    31f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31f6:	fe 01       	movw	r30, r28
    31f8:	e1 5e       	subi	r30, 0xE1	; 225
    31fa:	fe 4f       	sbci	r31, 0xFE	; 254
    31fc:	60 81       	ld	r22, Z
    31fe:	71 81       	ldd	r23, Z+1	; 0x01
    3200:	82 81       	ldd	r24, Z+2	; 0x02
    3202:	93 81       	ldd	r25, Z+3	; 0x03
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e8       	ldi	r20, 0x80	; 128
    320a:	5f e3       	ldi	r21, 0x3F	; 63
    320c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3210:	88 23       	and	r24, r24
    3212:	44 f4       	brge	.+16     	; 0x3224 <main+0x526>
		__ticks = 1;
    3214:	fe 01       	movw	r30, r28
    3216:	e3 5e       	subi	r30, 0xE3	; 227
    3218:	fe 4f       	sbci	r31, 0xFE	; 254
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	91 83       	std	Z+1, r25	; 0x01
    3220:	80 83       	st	Z, r24
    3222:	64 c0       	rjmp	.+200    	; 0x32ec <main+0x5ee>
	else if (__tmp > 65535)
    3224:	fe 01       	movw	r30, r28
    3226:	e1 5e       	subi	r30, 0xE1	; 225
    3228:	fe 4f       	sbci	r31, 0xFE	; 254
    322a:	60 81       	ld	r22, Z
    322c:	71 81       	ldd	r23, Z+1	; 0x01
    322e:	82 81       	ldd	r24, Z+2	; 0x02
    3230:	93 81       	ldd	r25, Z+3	; 0x03
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	3f ef       	ldi	r19, 0xFF	; 255
    3236:	4f e7       	ldi	r20, 0x7F	; 127
    3238:	57 e4       	ldi	r21, 0x47	; 71
    323a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    323e:	18 16       	cp	r1, r24
    3240:	0c f0       	brlt	.+2      	; 0x3244 <main+0x546>
    3242:	43 c0       	rjmp	.+134    	; 0x32ca <main+0x5cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3244:	fe 01       	movw	r30, r28
    3246:	ed 5d       	subi	r30, 0xDD	; 221
    3248:	fe 4f       	sbci	r31, 0xFE	; 254
    324a:	60 81       	ld	r22, Z
    324c:	71 81       	ldd	r23, Z+1	; 0x01
    324e:	82 81       	ldd	r24, Z+2	; 0x02
    3250:	93 81       	ldd	r25, Z+3	; 0x03
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	40 e2       	ldi	r20, 0x20	; 32
    3258:	51 e4       	ldi	r21, 0x41	; 65
    325a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	8e 01       	movw	r16, r28
    3264:	03 5e       	subi	r16, 0xE3	; 227
    3266:	1e 4f       	sbci	r17, 0xFE	; 254
    3268:	bc 01       	movw	r22, r24
    326a:	cd 01       	movw	r24, r26
    326c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	f8 01       	movw	r30, r16
    3276:	91 83       	std	Z+1, r25	; 0x01
    3278:	80 83       	st	Z, r24
    327a:	1f c0       	rjmp	.+62     	; 0x32ba <main+0x5bc>
    327c:	fe 01       	movw	r30, r28
    327e:	e5 5e       	subi	r30, 0xE5	; 229
    3280:	fe 4f       	sbci	r31, 0xFE	; 254
    3282:	80 e9       	ldi	r24, 0x90	; 144
    3284:	91 e0       	ldi	r25, 0x01	; 1
    3286:	91 83       	std	Z+1, r25	; 0x01
    3288:	80 83       	st	Z, r24
    328a:	fe 01       	movw	r30, r28
    328c:	e5 5e       	subi	r30, 0xE5	; 229
    328e:	fe 4f       	sbci	r31, 0xFE	; 254
    3290:	80 81       	ld	r24, Z
    3292:	91 81       	ldd	r25, Z+1	; 0x01
    3294:	01 97       	sbiw	r24, 0x01	; 1
    3296:	f1 f7       	brne	.-4      	; 0x3294 <main+0x596>
    3298:	fe 01       	movw	r30, r28
    329a:	e5 5e       	subi	r30, 0xE5	; 229
    329c:	fe 4f       	sbci	r31, 0xFE	; 254
    329e:	91 83       	std	Z+1, r25	; 0x01
    32a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a2:	de 01       	movw	r26, r28
    32a4:	a3 5e       	subi	r26, 0xE3	; 227
    32a6:	be 4f       	sbci	r27, 0xFE	; 254
    32a8:	fe 01       	movw	r30, r28
    32aa:	e3 5e       	subi	r30, 0xE3	; 227
    32ac:	fe 4f       	sbci	r31, 0xFE	; 254
    32ae:	80 81       	ld	r24, Z
    32b0:	91 81       	ldd	r25, Z+1	; 0x01
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	11 96       	adiw	r26, 0x01	; 1
    32b6:	9c 93       	st	X, r25
    32b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ba:	fe 01       	movw	r30, r28
    32bc:	e3 5e       	subi	r30, 0xE3	; 227
    32be:	fe 4f       	sbci	r31, 0xFE	; 254
    32c0:	80 81       	ld	r24, Z
    32c2:	91 81       	ldd	r25, Z+1	; 0x01
    32c4:	00 97       	sbiw	r24, 0x00	; 0
    32c6:	d1 f6       	brne	.-76     	; 0x327c <main+0x57e>
    32c8:	27 c0       	rjmp	.+78     	; 0x3318 <main+0x61a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ca:	8e 01       	movw	r16, r28
    32cc:	03 5e       	subi	r16, 0xE3	; 227
    32ce:	1e 4f       	sbci	r17, 0xFE	; 254
    32d0:	fe 01       	movw	r30, r28
    32d2:	e1 5e       	subi	r30, 0xE1	; 225
    32d4:	fe 4f       	sbci	r31, 0xFE	; 254
    32d6:	60 81       	ld	r22, Z
    32d8:	71 81       	ldd	r23, Z+1	; 0x01
    32da:	82 81       	ldd	r24, Z+2	; 0x02
    32dc:	93 81       	ldd	r25, Z+3	; 0x03
    32de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	f8 01       	movw	r30, r16
    32e8:	91 83       	std	Z+1, r25	; 0x01
    32ea:	80 83       	st	Z, r24
    32ec:	de 01       	movw	r26, r28
    32ee:	a7 5e       	subi	r26, 0xE7	; 231
    32f0:	be 4f       	sbci	r27, 0xFE	; 254
    32f2:	fe 01       	movw	r30, r28
    32f4:	e3 5e       	subi	r30, 0xE3	; 227
    32f6:	fe 4f       	sbci	r31, 0xFE	; 254
    32f8:	80 81       	ld	r24, Z
    32fa:	91 81       	ldd	r25, Z+1	; 0x01
    32fc:	8d 93       	st	X+, r24
    32fe:	9c 93       	st	X, r25
    3300:	fe 01       	movw	r30, r28
    3302:	e7 5e       	subi	r30, 0xE7	; 231
    3304:	fe 4f       	sbci	r31, 0xFE	; 254
    3306:	80 81       	ld	r24, Z
    3308:	91 81       	ldd	r25, Z+1	; 0x01
    330a:	01 97       	sbiw	r24, 0x01	; 1
    330c:	f1 f7       	brne	.-4      	; 0x330a <main+0x60c>
    330e:	fe 01       	movw	r30, r28
    3310:	e7 5e       	subi	r30, 0xE7	; 231
    3312:	fe 4f       	sbci	r31, 0xFE	; 254
    3314:	91 83       	std	Z+1, r25	; 0x01
    3316:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_u8SetPinValue(PIN1,DIO_PORTB,LOW);
    3318:	81 e0       	ldi	r24, 0x01	; 1
    331a:	61 e0       	ldi	r22, 0x01	; 1
    331c:	40 e0       	ldi	r20, 0x00	; 0
    331e:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,HIGH);
    3322:	82 e0       	ldi	r24, 0x02	; 2
    3324:	61 e0       	ldi	r22, 0x01	; 1
    3326:	41 e0       	ldi	r20, 0x01	; 1
    3328:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,tenth);
    332c:	fe 01       	movw	r30, r28
    332e:	ea 5b       	subi	r30, 0xBA	; 186
    3330:	fe 4f       	sbci	r31, 0xFE	; 254
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	60 e0       	ldi	r22, 0x00	; 0
    3336:	40 81       	ld	r20, Z
    3338:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    333c:	fe 01       	movw	r30, r28
    333e:	eb 5e       	subi	r30, 0xEB	; 235
    3340:	fe 4f       	sbci	r31, 0xFE	; 254
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	a0 ea       	ldi	r26, 0xA0	; 160
    3348:	b0 e4       	ldi	r27, 0x40	; 64
    334a:	80 83       	st	Z, r24
    334c:	91 83       	std	Z+1, r25	; 0x01
    334e:	a2 83       	std	Z+2, r26	; 0x02
    3350:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3352:	8e 01       	movw	r16, r28
    3354:	0f 5e       	subi	r16, 0xEF	; 239
    3356:	1e 4f       	sbci	r17, 0xFE	; 254
    3358:	fe 01       	movw	r30, r28
    335a:	eb 5e       	subi	r30, 0xEB	; 235
    335c:	fe 4f       	sbci	r31, 0xFE	; 254
    335e:	60 81       	ld	r22, Z
    3360:	71 81       	ldd	r23, Z+1	; 0x01
    3362:	82 81       	ldd	r24, Z+2	; 0x02
    3364:	93 81       	ldd	r25, Z+3	; 0x03
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	4a e7       	ldi	r20, 0x7A	; 122
    336c:	55 e4       	ldi	r21, 0x45	; 69
    336e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3372:	dc 01       	movw	r26, r24
    3374:	cb 01       	movw	r24, r22
    3376:	f8 01       	movw	r30, r16
    3378:	80 83       	st	Z, r24
    337a:	91 83       	std	Z+1, r25	; 0x01
    337c:	a2 83       	std	Z+2, r26	; 0x02
    337e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3380:	fe 01       	movw	r30, r28
    3382:	ef 5e       	subi	r30, 0xEF	; 239
    3384:	fe 4f       	sbci	r31, 0xFE	; 254
    3386:	60 81       	ld	r22, Z
    3388:	71 81       	ldd	r23, Z+1	; 0x01
    338a:	82 81       	ldd	r24, Z+2	; 0x02
    338c:	93 81       	ldd	r25, Z+3	; 0x03
    338e:	20 e0       	ldi	r18, 0x00	; 0
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	40 e8       	ldi	r20, 0x80	; 128
    3394:	5f e3       	ldi	r21, 0x3F	; 63
    3396:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    339a:	88 23       	and	r24, r24
    339c:	44 f4       	brge	.+16     	; 0x33ae <main+0x6b0>
		__ticks = 1;
    339e:	fe 01       	movw	r30, r28
    33a0:	e1 5f       	subi	r30, 0xF1	; 241
    33a2:	fe 4f       	sbci	r31, 0xFE	; 254
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	91 83       	std	Z+1, r25	; 0x01
    33aa:	80 83       	st	Z, r24
    33ac:	64 c0       	rjmp	.+200    	; 0x3476 <main+0x778>
	else if (__tmp > 65535)
    33ae:	fe 01       	movw	r30, r28
    33b0:	ef 5e       	subi	r30, 0xEF	; 239
    33b2:	fe 4f       	sbci	r31, 0xFE	; 254
    33b4:	60 81       	ld	r22, Z
    33b6:	71 81       	ldd	r23, Z+1	; 0x01
    33b8:	82 81       	ldd	r24, Z+2	; 0x02
    33ba:	93 81       	ldd	r25, Z+3	; 0x03
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	3f ef       	ldi	r19, 0xFF	; 255
    33c0:	4f e7       	ldi	r20, 0x7F	; 127
    33c2:	57 e4       	ldi	r21, 0x47	; 71
    33c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33c8:	18 16       	cp	r1, r24
    33ca:	0c f0       	brlt	.+2      	; 0x33ce <main+0x6d0>
    33cc:	43 c0       	rjmp	.+134    	; 0x3454 <main+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ce:	fe 01       	movw	r30, r28
    33d0:	eb 5e       	subi	r30, 0xEB	; 235
    33d2:	fe 4f       	sbci	r31, 0xFE	; 254
    33d4:	60 81       	ld	r22, Z
    33d6:	71 81       	ldd	r23, Z+1	; 0x01
    33d8:	82 81       	ldd	r24, Z+2	; 0x02
    33da:	93 81       	ldd	r25, Z+3	; 0x03
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	40 e2       	ldi	r20, 0x20	; 32
    33e2:	51 e4       	ldi	r21, 0x41	; 65
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	8e 01       	movw	r16, r28
    33ee:	01 5f       	subi	r16, 0xF1	; 241
    33f0:	1e 4f       	sbci	r17, 0xFE	; 254
    33f2:	bc 01       	movw	r22, r24
    33f4:	cd 01       	movw	r24, r26
    33f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	f8 01       	movw	r30, r16
    3400:	91 83       	std	Z+1, r25	; 0x01
    3402:	80 83       	st	Z, r24
    3404:	1f c0       	rjmp	.+62     	; 0x3444 <main+0x746>
    3406:	fe 01       	movw	r30, r28
    3408:	e3 5f       	subi	r30, 0xF3	; 243
    340a:	fe 4f       	sbci	r31, 0xFE	; 254
    340c:	80 e9       	ldi	r24, 0x90	; 144
    340e:	91 e0       	ldi	r25, 0x01	; 1
    3410:	91 83       	std	Z+1, r25	; 0x01
    3412:	80 83       	st	Z, r24
    3414:	fe 01       	movw	r30, r28
    3416:	e3 5f       	subi	r30, 0xF3	; 243
    3418:	fe 4f       	sbci	r31, 0xFE	; 254
    341a:	80 81       	ld	r24, Z
    341c:	91 81       	ldd	r25, Z+1	; 0x01
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	f1 f7       	brne	.-4      	; 0x341e <main+0x720>
    3422:	fe 01       	movw	r30, r28
    3424:	e3 5f       	subi	r30, 0xF3	; 243
    3426:	fe 4f       	sbci	r31, 0xFE	; 254
    3428:	91 83       	std	Z+1, r25	; 0x01
    342a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    342c:	de 01       	movw	r26, r28
    342e:	a1 5f       	subi	r26, 0xF1	; 241
    3430:	be 4f       	sbci	r27, 0xFE	; 254
    3432:	fe 01       	movw	r30, r28
    3434:	e1 5f       	subi	r30, 0xF1	; 241
    3436:	fe 4f       	sbci	r31, 0xFE	; 254
    3438:	80 81       	ld	r24, Z
    343a:	91 81       	ldd	r25, Z+1	; 0x01
    343c:	01 97       	sbiw	r24, 0x01	; 1
    343e:	11 96       	adiw	r26, 0x01	; 1
    3440:	9c 93       	st	X, r25
    3442:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3444:	fe 01       	movw	r30, r28
    3446:	e1 5f       	subi	r30, 0xF1	; 241
    3448:	fe 4f       	sbci	r31, 0xFE	; 254
    344a:	80 81       	ld	r24, Z
    344c:	91 81       	ldd	r25, Z+1	; 0x01
    344e:	00 97       	sbiw	r24, 0x00	; 0
    3450:	d1 f6       	brne	.-76     	; 0x3406 <main+0x708>
    3452:	27 c0       	rjmp	.+78     	; 0x34a2 <main+0x7a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3454:	8e 01       	movw	r16, r28
    3456:	01 5f       	subi	r16, 0xF1	; 241
    3458:	1e 4f       	sbci	r17, 0xFE	; 254
    345a:	fe 01       	movw	r30, r28
    345c:	ef 5e       	subi	r30, 0xEF	; 239
    345e:	fe 4f       	sbci	r31, 0xFE	; 254
    3460:	60 81       	ld	r22, Z
    3462:	71 81       	ldd	r23, Z+1	; 0x01
    3464:	82 81       	ldd	r24, Z+2	; 0x02
    3466:	93 81       	ldd	r25, Z+3	; 0x03
    3468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	f8 01       	movw	r30, r16
    3472:	91 83       	std	Z+1, r25	; 0x01
    3474:	80 83       	st	Z, r24
    3476:	de 01       	movw	r26, r28
    3478:	a5 5f       	subi	r26, 0xF5	; 245
    347a:	be 4f       	sbci	r27, 0xFE	; 254
    347c:	fe 01       	movw	r30, r28
    347e:	e1 5f       	subi	r30, 0xF1	; 241
    3480:	fe 4f       	sbci	r31, 0xFE	; 254
    3482:	80 81       	ld	r24, Z
    3484:	91 81       	ldd	r25, Z+1	; 0x01
    3486:	8d 93       	st	X+, r24
    3488:	9c 93       	st	X, r25
    348a:	fe 01       	movw	r30, r28
    348c:	e5 5f       	subi	r30, 0xF5	; 245
    348e:	fe 4f       	sbci	r31, 0xFE	; 254
    3490:	80 81       	ld	r24, Z
    3492:	91 81       	ldd	r25, Z+1	; 0x01
    3494:	01 97       	sbiw	r24, 0x01	; 1
    3496:	f1 f7       	brne	.-4      	; 0x3494 <main+0x796>
    3498:	fe 01       	movw	r30, r28
    349a:	e5 5f       	subi	r30, 0xF5	; 245
    349c:	fe 4f       	sbci	r31, 0xFE	; 254
    349e:	91 83       	std	Z+1, r25	; 0x01
    34a0:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_u8SetPinValue(PIN1,DIO_PORTB,HIGH);
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	61 e0       	ldi	r22, 0x01	; 1
    34a6:	41 e0       	ldi	r20, 0x01	; 1
    34a8:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,LOW);
    34ac:	82 e0       	ldi	r24, 0x02	; 2
    34ae:	61 e0       	ldi	r22, 0x01	; 1
    34b0:	40 e0       	ldi	r20, 0x00	; 0
    34b2:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,units);
    34b6:	fe 01       	movw	r30, r28
    34b8:	eb 5b       	subi	r30, 0xBB	; 187
    34ba:	fe 4f       	sbci	r31, 0xFE	; 254
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	60 e0       	ldi	r22, 0x00	; 0
    34c0:	40 81       	ld	r20, Z
    34c2:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    34c6:	fe 01       	movw	r30, r28
    34c8:	e9 5f       	subi	r30, 0xF9	; 249
    34ca:	fe 4f       	sbci	r31, 0xFE	; 254
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	a0 ea       	ldi	r26, 0xA0	; 160
    34d2:	b0 e4       	ldi	r27, 0x40	; 64
    34d4:	80 83       	st	Z, r24
    34d6:	91 83       	std	Z+1, r25	; 0x01
    34d8:	a2 83       	std	Z+2, r26	; 0x02
    34da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34dc:	8e 01       	movw	r16, r28
    34de:	0d 5f       	subi	r16, 0xFD	; 253
    34e0:	1e 4f       	sbci	r17, 0xFE	; 254
    34e2:	fe 01       	movw	r30, r28
    34e4:	e9 5f       	subi	r30, 0xF9	; 249
    34e6:	fe 4f       	sbci	r31, 0xFE	; 254
    34e8:	60 81       	ld	r22, Z
    34ea:	71 81       	ldd	r23, Z+1	; 0x01
    34ec:	82 81       	ldd	r24, Z+2	; 0x02
    34ee:	93 81       	ldd	r25, Z+3	; 0x03
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	4a e7       	ldi	r20, 0x7A	; 122
    34f6:	55 e4       	ldi	r21, 0x45	; 69
    34f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	f8 01       	movw	r30, r16
    3502:	80 83       	st	Z, r24
    3504:	91 83       	std	Z+1, r25	; 0x01
    3506:	a2 83       	std	Z+2, r26	; 0x02
    3508:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    350a:	fe 01       	movw	r30, r28
    350c:	ed 5f       	subi	r30, 0xFD	; 253
    350e:	fe 4f       	sbci	r31, 0xFE	; 254
    3510:	60 81       	ld	r22, Z
    3512:	71 81       	ldd	r23, Z+1	; 0x01
    3514:	82 81       	ldd	r24, Z+2	; 0x02
    3516:	93 81       	ldd	r25, Z+3	; 0x03
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e8       	ldi	r20, 0x80	; 128
    351e:	5f e3       	ldi	r21, 0x3F	; 63
    3520:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3524:	88 23       	and	r24, r24
    3526:	44 f4       	brge	.+16     	; 0x3538 <main+0x83a>
		__ticks = 1;
    3528:	fe 01       	movw	r30, r28
    352a:	ef 5f       	subi	r30, 0xFF	; 255
    352c:	fe 4f       	sbci	r31, 0xFE	; 254
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	91 83       	std	Z+1, r25	; 0x01
    3534:	80 83       	st	Z, r24
    3536:	64 c0       	rjmp	.+200    	; 0x3600 <main+0x902>
	else if (__tmp > 65535)
    3538:	fe 01       	movw	r30, r28
    353a:	ed 5f       	subi	r30, 0xFD	; 253
    353c:	fe 4f       	sbci	r31, 0xFE	; 254
    353e:	60 81       	ld	r22, Z
    3540:	71 81       	ldd	r23, Z+1	; 0x01
    3542:	82 81       	ldd	r24, Z+2	; 0x02
    3544:	93 81       	ldd	r25, Z+3	; 0x03
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	3f ef       	ldi	r19, 0xFF	; 255
    354a:	4f e7       	ldi	r20, 0x7F	; 127
    354c:	57 e4       	ldi	r21, 0x47	; 71
    354e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3552:	18 16       	cp	r1, r24
    3554:	0c f0       	brlt	.+2      	; 0x3558 <main+0x85a>
    3556:	43 c0       	rjmp	.+134    	; 0x35de <main+0x8e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3558:	fe 01       	movw	r30, r28
    355a:	e9 5f       	subi	r30, 0xF9	; 249
    355c:	fe 4f       	sbci	r31, 0xFE	; 254
    355e:	60 81       	ld	r22, Z
    3560:	71 81       	ldd	r23, Z+1	; 0x01
    3562:	82 81       	ldd	r24, Z+2	; 0x02
    3564:	93 81       	ldd	r25, Z+3	; 0x03
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e2       	ldi	r20, 0x20	; 32
    356c:	51 e4       	ldi	r21, 0x41	; 65
    356e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	8e 01       	movw	r16, r28
    3578:	0f 5f       	subi	r16, 0xFF	; 255
    357a:	1e 4f       	sbci	r17, 0xFE	; 254
    357c:	bc 01       	movw	r22, r24
    357e:	cd 01       	movw	r24, r26
    3580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	f8 01       	movw	r30, r16
    358a:	91 83       	std	Z+1, r25	; 0x01
    358c:	80 83       	st	Z, r24
    358e:	1f c0       	rjmp	.+62     	; 0x35ce <main+0x8d0>
    3590:	fe 01       	movw	r30, r28
    3592:	e1 50       	subi	r30, 0x01	; 1
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	80 e9       	ldi	r24, 0x90	; 144
    3598:	91 e0       	ldi	r25, 0x01	; 1
    359a:	91 83       	std	Z+1, r25	; 0x01
    359c:	80 83       	st	Z, r24
    359e:	fe 01       	movw	r30, r28
    35a0:	e1 50       	subi	r30, 0x01	; 1
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	80 81       	ld	r24, Z
    35a6:	91 81       	ldd	r25, Z+1	; 0x01
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	f1 f7       	brne	.-4      	; 0x35a8 <main+0x8aa>
    35ac:	fe 01       	movw	r30, r28
    35ae:	e1 50       	subi	r30, 0x01	; 1
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	91 83       	std	Z+1, r25	; 0x01
    35b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b6:	de 01       	movw	r26, r28
    35b8:	af 5f       	subi	r26, 0xFF	; 255
    35ba:	be 4f       	sbci	r27, 0xFE	; 254
    35bc:	fe 01       	movw	r30, r28
    35be:	ef 5f       	subi	r30, 0xFF	; 255
    35c0:	fe 4f       	sbci	r31, 0xFE	; 254
    35c2:	80 81       	ld	r24, Z
    35c4:	91 81       	ldd	r25, Z+1	; 0x01
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	11 96       	adiw	r26, 0x01	; 1
    35ca:	9c 93       	st	X, r25
    35cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ce:	fe 01       	movw	r30, r28
    35d0:	ef 5f       	subi	r30, 0xFF	; 255
    35d2:	fe 4f       	sbci	r31, 0xFE	; 254
    35d4:	80 81       	ld	r24, Z
    35d6:	91 81       	ldd	r25, Z+1	; 0x01
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	d1 f6       	brne	.-76     	; 0x3590 <main+0x892>
    35dc:	27 c0       	rjmp	.+78     	; 0x362c <main+0x92e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35de:	8e 01       	movw	r16, r28
    35e0:	0f 5f       	subi	r16, 0xFF	; 255
    35e2:	1e 4f       	sbci	r17, 0xFE	; 254
    35e4:	fe 01       	movw	r30, r28
    35e6:	ed 5f       	subi	r30, 0xFD	; 253
    35e8:	fe 4f       	sbci	r31, 0xFE	; 254
    35ea:	60 81       	ld	r22, Z
    35ec:	71 81       	ldd	r23, Z+1	; 0x01
    35ee:	82 81       	ldd	r24, Z+2	; 0x02
    35f0:	93 81       	ldd	r25, Z+3	; 0x03
    35f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	f8 01       	movw	r30, r16
    35fc:	91 83       	std	Z+1, r25	; 0x01
    35fe:	80 83       	st	Z, r24
    3600:	de 01       	movw	r26, r28
    3602:	a3 50       	subi	r26, 0x03	; 3
    3604:	bf 4f       	sbci	r27, 0xFF	; 255
    3606:	fe 01       	movw	r30, r28
    3608:	ef 5f       	subi	r30, 0xFF	; 255
    360a:	fe 4f       	sbci	r31, 0xFE	; 254
    360c:	80 81       	ld	r24, Z
    360e:	91 81       	ldd	r25, Z+1	; 0x01
    3610:	8d 93       	st	X+, r24
    3612:	9c 93       	st	X, r25
    3614:	fe 01       	movw	r30, r28
    3616:	e3 50       	subi	r30, 0x03	; 3
    3618:	ff 4f       	sbci	r31, 0xFF	; 255
    361a:	80 81       	ld	r24, Z
    361c:	91 81       	ldd	r25, Z+1	; 0x01
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	f1 f7       	brne	.-4      	; 0x361e <main+0x920>
    3622:	fe 01       	movw	r30, r28
    3624:	e3 50       	subi	r30, 0x03	; 3
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	91 83       	std	Z+1, r25	; 0x01
    362a:	80 83       	st	Z, r24
			_delay_ms(5);

			//to go to set temp mode
			DIO_u8GetPinValue(PIN6,DIO_PORTD,&inc);
    362c:	9e 01       	movw	r18, r28
    362e:	29 5b       	subi	r18, 0xB9	; 185
    3630:	3e 4f       	sbci	r19, 0xFE	; 254
    3632:	86 e0       	ldi	r24, 0x06	; 6
    3634:	63 e0       	ldi	r22, 0x03	; 3
    3636:	a9 01       	movw	r20, r18
    3638:	0e 94 05 09 	call	0x120a	; 0x120a <DIO_u8GetPinValue>
			DIO_u8GetPinValue(PIN0,DIO_PORTB,&dec);
    363c:	9e 01       	movw	r18, r28
    363e:	28 5b       	subi	r18, 0xB8	; 184
    3640:	3e 4f       	sbci	r19, 0xFE	; 254
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	61 e0       	ldi	r22, 0x01	; 1
    3646:	a9 01       	movw	r20, r18
    3648:	0e 94 05 09 	call	0x120a	; 0x120a <DIO_u8GetPinValue>
			if(dec || inc){inc = 0; dec = 0;On_Off_Set_Flag = 2;_delay_ms(50);Set_mode_count = 0; }
    364c:	fe 01       	movw	r30, r28
    364e:	e8 5b       	subi	r30, 0xB8	; 184
    3650:	fe 4f       	sbci	r31, 0xFE	; 254
    3652:	80 81       	ld	r24, Z
    3654:	88 23       	and	r24, r24
    3656:	39 f4       	brne	.+14     	; 0x3666 <main+0x968>
    3658:	fe 01       	movw	r30, r28
    365a:	e9 5b       	subi	r30, 0xB9	; 185
    365c:	fe 4f       	sbci	r31, 0xFE	; 254
    365e:	80 81       	ld	r24, Z
    3660:	88 23       	and	r24, r24
    3662:	09 f4       	brne	.+2      	; 0x3666 <main+0x968>
    3664:	c3 c0       	rjmp	.+390    	; 0x37ec <main+0xaee>
    3666:	fe 01       	movw	r30, r28
    3668:	e9 5b       	subi	r30, 0xB9	; 185
    366a:	fe 4f       	sbci	r31, 0xFE	; 254
    366c:	10 82       	st	Z, r1
    366e:	fe 01       	movw	r30, r28
    3670:	e8 5b       	subi	r30, 0xB8	; 184
    3672:	fe 4f       	sbci	r31, 0xFE	; 254
    3674:	10 82       	st	Z, r1
    3676:	82 e0       	ldi	r24, 0x02	; 2
    3678:	80 93 6e 00 	sts	0x006E, r24
    367c:	fe 01       	movw	r30, r28
    367e:	e7 50       	subi	r30, 0x07	; 7
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	a8 e4       	ldi	r26, 0x48	; 72
    3688:	b2 e4       	ldi	r27, 0x42	; 66
    368a:	80 83       	st	Z, r24
    368c:	91 83       	std	Z+1, r25	; 0x01
    368e:	a2 83       	std	Z+2, r26	; 0x02
    3690:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3692:	8e 01       	movw	r16, r28
    3694:	0b 50       	subi	r16, 0x0B	; 11
    3696:	1f 4f       	sbci	r17, 0xFF	; 255
    3698:	fe 01       	movw	r30, r28
    369a:	e7 50       	subi	r30, 0x07	; 7
    369c:	ff 4f       	sbci	r31, 0xFF	; 255
    369e:	60 81       	ld	r22, Z
    36a0:	71 81       	ldd	r23, Z+1	; 0x01
    36a2:	82 81       	ldd	r24, Z+2	; 0x02
    36a4:	93 81       	ldd	r25, Z+3	; 0x03
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	4a e7       	ldi	r20, 0x7A	; 122
    36ac:	55 e4       	ldi	r21, 0x45	; 69
    36ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	f8 01       	movw	r30, r16
    36b8:	80 83       	st	Z, r24
    36ba:	91 83       	std	Z+1, r25	; 0x01
    36bc:	a2 83       	std	Z+2, r26	; 0x02
    36be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36c0:	fe 01       	movw	r30, r28
    36c2:	eb 50       	subi	r30, 0x0B	; 11
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	60 81       	ld	r22, Z
    36c8:	71 81       	ldd	r23, Z+1	; 0x01
    36ca:	82 81       	ldd	r24, Z+2	; 0x02
    36cc:	93 81       	ldd	r25, Z+3	; 0x03
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	40 e8       	ldi	r20, 0x80	; 128
    36d4:	5f e3       	ldi	r21, 0x3F	; 63
    36d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36da:	88 23       	and	r24, r24
    36dc:	44 f4       	brge	.+16     	; 0x36ee <main+0x9f0>
		__ticks = 1;
    36de:	fe 01       	movw	r30, r28
    36e0:	ed 50       	subi	r30, 0x0D	; 13
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	91 83       	std	Z+1, r25	; 0x01
    36ea:	80 83       	st	Z, r24
    36ec:	64 c0       	rjmp	.+200    	; 0x37b6 <main+0xab8>
	else if (__tmp > 65535)
    36ee:	fe 01       	movw	r30, r28
    36f0:	eb 50       	subi	r30, 0x0B	; 11
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	60 81       	ld	r22, Z
    36f6:	71 81       	ldd	r23, Z+1	; 0x01
    36f8:	82 81       	ldd	r24, Z+2	; 0x02
    36fa:	93 81       	ldd	r25, Z+3	; 0x03
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	3f ef       	ldi	r19, 0xFF	; 255
    3700:	4f e7       	ldi	r20, 0x7F	; 127
    3702:	57 e4       	ldi	r21, 0x47	; 71
    3704:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3708:	18 16       	cp	r1, r24
    370a:	0c f0       	brlt	.+2      	; 0x370e <main+0xa10>
    370c:	43 c0       	rjmp	.+134    	; 0x3794 <main+0xa96>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    370e:	fe 01       	movw	r30, r28
    3710:	e7 50       	subi	r30, 0x07	; 7
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	60 81       	ld	r22, Z
    3716:	71 81       	ldd	r23, Z+1	; 0x01
    3718:	82 81       	ldd	r24, Z+2	; 0x02
    371a:	93 81       	ldd	r25, Z+3	; 0x03
    371c:	20 e0       	ldi	r18, 0x00	; 0
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	40 e2       	ldi	r20, 0x20	; 32
    3722:	51 e4       	ldi	r21, 0x41	; 65
    3724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3728:	dc 01       	movw	r26, r24
    372a:	cb 01       	movw	r24, r22
    372c:	8e 01       	movw	r16, r28
    372e:	0d 50       	subi	r16, 0x0D	; 13
    3730:	1f 4f       	sbci	r17, 0xFF	; 255
    3732:	bc 01       	movw	r22, r24
    3734:	cd 01       	movw	r24, r26
    3736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	f8 01       	movw	r30, r16
    3740:	91 83       	std	Z+1, r25	; 0x01
    3742:	80 83       	st	Z, r24
    3744:	1f c0       	rjmp	.+62     	; 0x3784 <main+0xa86>
    3746:	fe 01       	movw	r30, r28
    3748:	ef 50       	subi	r30, 0x0F	; 15
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	80 e9       	ldi	r24, 0x90	; 144
    374e:	91 e0       	ldi	r25, 0x01	; 1
    3750:	91 83       	std	Z+1, r25	; 0x01
    3752:	80 83       	st	Z, r24
    3754:	fe 01       	movw	r30, r28
    3756:	ef 50       	subi	r30, 0x0F	; 15
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	80 81       	ld	r24, Z
    375c:	91 81       	ldd	r25, Z+1	; 0x01
    375e:	01 97       	sbiw	r24, 0x01	; 1
    3760:	f1 f7       	brne	.-4      	; 0x375e <main+0xa60>
    3762:	fe 01       	movw	r30, r28
    3764:	ef 50       	subi	r30, 0x0F	; 15
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	91 83       	std	Z+1, r25	; 0x01
    376a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    376c:	de 01       	movw	r26, r28
    376e:	ad 50       	subi	r26, 0x0D	; 13
    3770:	bf 4f       	sbci	r27, 0xFF	; 255
    3772:	fe 01       	movw	r30, r28
    3774:	ed 50       	subi	r30, 0x0D	; 13
    3776:	ff 4f       	sbci	r31, 0xFF	; 255
    3778:	80 81       	ld	r24, Z
    377a:	91 81       	ldd	r25, Z+1	; 0x01
    377c:	01 97       	sbiw	r24, 0x01	; 1
    377e:	11 96       	adiw	r26, 0x01	; 1
    3780:	9c 93       	st	X, r25
    3782:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3784:	fe 01       	movw	r30, r28
    3786:	ed 50       	subi	r30, 0x0D	; 13
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	80 81       	ld	r24, Z
    378c:	91 81       	ldd	r25, Z+1	; 0x01
    378e:	00 97       	sbiw	r24, 0x00	; 0
    3790:	d1 f6       	brne	.-76     	; 0x3746 <main+0xa48>
    3792:	28 c0       	rjmp	.+80     	; 0x37e4 <main+0xae6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3794:	8e 01       	movw	r16, r28
    3796:	0d 50       	subi	r16, 0x0D	; 13
    3798:	1f 4f       	sbci	r17, 0xFF	; 255
    379a:	fe 01       	movw	r30, r28
    379c:	eb 50       	subi	r30, 0x0B	; 11
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	60 81       	ld	r22, Z
    37a2:	71 81       	ldd	r23, Z+1	; 0x01
    37a4:	82 81       	ldd	r24, Z+2	; 0x02
    37a6:	93 81       	ldd	r25, Z+3	; 0x03
    37a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	f8 01       	movw	r30, r16
    37b2:	91 83       	std	Z+1, r25	; 0x01
    37b4:	80 83       	st	Z, r24
    37b6:	de 01       	movw	r26, r28
    37b8:	a1 51       	subi	r26, 0x11	; 17
    37ba:	bf 4f       	sbci	r27, 0xFF	; 255
    37bc:	fe 01       	movw	r30, r28
    37be:	ed 50       	subi	r30, 0x0D	; 13
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	80 81       	ld	r24, Z
    37c4:	91 81       	ldd	r25, Z+1	; 0x01
    37c6:	11 96       	adiw	r26, 0x01	; 1
    37c8:	9c 93       	st	X, r25
    37ca:	8e 93       	st	-X, r24
    37cc:	fe 01       	movw	r30, r28
    37ce:	e1 51       	subi	r30, 0x11	; 17
    37d0:	ff 4f       	sbci	r31, 0xFF	; 255
    37d2:	80 81       	ld	r24, Z
    37d4:	91 81       	ldd	r25, Z+1	; 0x01
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	f1 f7       	brne	.-4      	; 0x37d6 <main+0xad8>
    37da:	fe 01       	movw	r30, r28
    37dc:	e1 51       	subi	r30, 0x11	; 17
    37de:	ff 4f       	sbci	r31, 0xFF	; 255
    37e0:	91 83       	std	Z+1, r25	; 0x01
    37e2:	80 83       	st	Z, r24
    37e4:	10 92 71 00 	sts	0x0071, r1
    37e8:	10 92 70 00 	sts	0x0070, r1
			//-----------------

			//choose led to be blinking
			if(current_state == Peltier_Cooling){current_led = COOLING_LED;}
    37ec:	fe 01       	movw	r30, r28
    37ee:	ec 5b       	subi	r30, 0xBC	; 188
    37f0:	fe 4f       	sbci	r31, 0xFE	; 254
    37f2:	80 81       	ld	r24, Z
    37f4:	81 30       	cpi	r24, 0x01	; 1
    37f6:	21 f4       	brne	.+8      	; 0x3800 <main+0xb02>
    37f8:	87 e0       	ldi	r24, 0x07	; 7
    37fa:	80 93 6f 00 	sts	0x006F, r24
    37fe:	12 c0       	rjmp	.+36     	; 0x3824 <main+0xb26>
			else if (current_state == Peltier_Heating) {current_led = HEATING_LED;}
    3800:	fe 01       	movw	r30, r28
    3802:	ec 5b       	subi	r30, 0xBC	; 188
    3804:	fe 4f       	sbci	r31, 0xFE	; 254
    3806:	80 81       	ld	r24, Z
    3808:	82 30       	cpi	r24, 0x02	; 2
    380a:	21 f4       	brne	.+8      	; 0x3814 <main+0xb16>
    380c:	82 e0       	ldi	r24, 0x02	; 2
    380e:	80 93 6f 00 	sts	0x006F, r24
    3812:	08 c0       	rjmp	.+16     	; 0x3824 <main+0xb26>
			else if (current_state == Peltier_OFF) {current_led = 0;}
    3814:	fe 01       	movw	r30, r28
    3816:	ec 5b       	subi	r30, 0xBC	; 188
    3818:	fe 4f       	sbci	r31, 0xFE	; 254
    381a:	80 81       	ld	r24, Z
    381c:	88 23       	and	r24, r24
    381e:	11 f4       	brne	.+4      	; 0x3824 <main+0xb26>
    3820:	10 92 6f 00 	sts	0x006F, r1

			//set the state according to current & setting temperature
			if(current_temp <(set_temp-5)){new_state = Peltier_Heating;}
    3824:	80 91 68 00 	lds	r24, 0x0068
    3828:	88 2f       	mov	r24, r24
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	05 97       	sbiw	r24, 0x05	; 5
    382e:	9c 01       	movw	r18, r24
    3830:	44 27       	eor	r20, r20
    3832:	37 fd       	sbrc	r19, 7
    3834:	40 95       	com	r20
    3836:	54 2f       	mov	r21, r20
    3838:	80 91 69 00 	lds	r24, 0x0069
    383c:	90 91 6a 00 	lds	r25, 0x006A
    3840:	a0 91 6b 00 	lds	r26, 0x006B
    3844:	b0 91 6c 00 	lds	r27, 0x006C
    3848:	82 17       	cp	r24, r18
    384a:	93 07       	cpc	r25, r19
    384c:	a4 07       	cpc	r26, r20
    384e:	b5 07       	cpc	r27, r21
    3850:	30 f4       	brcc	.+12     	; 0x385e <main+0xb60>
    3852:	fe 01       	movw	r30, r28
    3854:	ed 5b       	subi	r30, 0xBD	; 189
    3856:	fe 4f       	sbci	r31, 0xFE	; 254
    3858:	82 e0       	ldi	r24, 0x02	; 2
    385a:	80 83       	st	Z, r24
    385c:	21 c0       	rjmp	.+66     	; 0x38a0 <main+0xba2>
			else if (current_temp >(set_temp+5)){new_state = Peltier_Cooling;}
    385e:	80 91 68 00 	lds	r24, 0x0068
    3862:	88 2f       	mov	r24, r24
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	05 96       	adiw	r24, 0x05	; 5
    3868:	9c 01       	movw	r18, r24
    386a:	44 27       	eor	r20, r20
    386c:	37 fd       	sbrc	r19, 7
    386e:	40 95       	com	r20
    3870:	54 2f       	mov	r21, r20
    3872:	80 91 69 00 	lds	r24, 0x0069
    3876:	90 91 6a 00 	lds	r25, 0x006A
    387a:	a0 91 6b 00 	lds	r26, 0x006B
    387e:	b0 91 6c 00 	lds	r27, 0x006C
    3882:	28 17       	cp	r18, r24
    3884:	39 07       	cpc	r19, r25
    3886:	4a 07       	cpc	r20, r26
    3888:	5b 07       	cpc	r21, r27
    388a:	30 f4       	brcc	.+12     	; 0x3898 <main+0xb9a>
    388c:	fe 01       	movw	r30, r28
    388e:	ed 5b       	subi	r30, 0xBD	; 189
    3890:	fe 4f       	sbci	r31, 0xFE	; 254
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	80 83       	st	Z, r24
    3896:	04 c0       	rjmp	.+8      	; 0x38a0 <main+0xba2>
			else{new_state = Peltier_OFF;}
    3898:	fe 01       	movw	r30, r28
    389a:	ed 5b       	subi	r30, 0xBD	; 189
    389c:	fe 4f       	sbci	r31, 0xFE	; 254
    389e:	10 82       	st	Z, r1

			//run the cooler (heating or cooling) or turn it off
			if(current_state != new_state)
    38a0:	fe 01       	movw	r30, r28
    38a2:	ec 5b       	subi	r30, 0xBC	; 188
    38a4:	fe 4f       	sbci	r31, 0xFE	; 254
    38a6:	de 01       	movw	r26, r28
    38a8:	ad 5b       	subi	r26, 0xBD	; 189
    38aa:	be 4f       	sbci	r27, 0xFE	; 254
    38ac:	90 81       	ld	r25, Z
    38ae:	8c 91       	ld	r24, X
    38b0:	98 17       	cp	r25, r24
    38b2:	11 f1       	breq	.+68     	; 0x38f8 <main+0xbfa>
			{
				current_state = new_state;
    38b4:	de 01       	movw	r26, r28
    38b6:	ac 5b       	subi	r26, 0xBC	; 188
    38b8:	be 4f       	sbci	r27, 0xFE	; 254
    38ba:	fe 01       	movw	r30, r28
    38bc:	ed 5b       	subi	r30, 0xBD	; 189
    38be:	fe 4f       	sbci	r31, 0xFE	; 254
    38c0:	80 81       	ld	r24, Z
    38c2:	8c 93       	st	X, r24
				if(current_state == Peltier_OFF){H_voidPeltier_OFF();}
    38c4:	fe 01       	movw	r30, r28
    38c6:	ec 5b       	subi	r30, 0xBC	; 188
    38c8:	fe 4f       	sbci	r31, 0xFE	; 254
    38ca:	80 81       	ld	r24, Z
    38cc:	88 23       	and	r24, r24
    38ce:	19 f4       	brne	.+6      	; 0x38d6 <main+0xbd8>
    38d0:	0e 94 c9 0c 	call	0x1992	; 0x1992 <H_voidPeltier_OFF>
    38d4:	11 c0       	rjmp	.+34     	; 0x38f8 <main+0xbfa>
				else if(current_state == Peltier_Cooling){H_voidPeltier_Cooling();}
    38d6:	fe 01       	movw	r30, r28
    38d8:	ec 5b       	subi	r30, 0xBC	; 188
    38da:	fe 4f       	sbci	r31, 0xFE	; 254
    38dc:	80 81       	ld	r24, Z
    38de:	81 30       	cpi	r24, 0x01	; 1
    38e0:	19 f4       	brne	.+6      	; 0x38e8 <main+0xbea>
    38e2:	0e 94 93 0c 	call	0x1926	; 0x1926 <H_voidPeltier_Cooling>
    38e6:	08 c0       	rjmp	.+16     	; 0x38f8 <main+0xbfa>
				else if(current_state == Peltier_Heating){H_voidPeltier_Heating();}
    38e8:	fe 01       	movw	r30, r28
    38ea:	ec 5b       	subi	r30, 0xBC	; 188
    38ec:	fe 4f       	sbci	r31, 0xFE	; 254
    38ee:	80 81       	ld	r24, Z
    38f0:	82 30       	cpi	r24, 0x02	; 2
    38f2:	11 f4       	brne	.+4      	; 0x38f8 <main+0xbfa>
    38f4:	0e 94 ae 0c 	call	0x195c	; 0x195c <H_voidPeltier_Heating>
			}

			// show the current temp.
			DIO_u8SetPinValue(PIN1,DIO_PORTB,LOW);
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	61 e0       	ldi	r22, 0x01	; 1
    38fc:	40 e0       	ldi	r20, 0x00	; 0
    38fe:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,HIGH);
    3902:	82 e0       	ldi	r24, 0x02	; 2
    3904:	61 e0       	ldi	r22, 0x01	; 1
    3906:	41 e0       	ldi	r20, 0x01	; 1
    3908:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,tenth);
    390c:	fe 01       	movw	r30, r28
    390e:	ea 5b       	subi	r30, 0xBA	; 186
    3910:	fe 4f       	sbci	r31, 0xFE	; 254
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	60 e0       	ldi	r22, 0x00	; 0
    3916:	40 81       	ld	r20, Z
    3918:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    391c:	fe 01       	movw	r30, r28
    391e:	e5 51       	subi	r30, 0x15	; 21
    3920:	ff 4f       	sbci	r31, 0xFF	; 255
    3922:	80 e0       	ldi	r24, 0x00	; 0
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	a0 ea       	ldi	r26, 0xA0	; 160
    3928:	b0 e4       	ldi	r27, 0x40	; 64
    392a:	80 83       	st	Z, r24
    392c:	91 83       	std	Z+1, r25	; 0x01
    392e:	a2 83       	std	Z+2, r26	; 0x02
    3930:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3932:	8e 01       	movw	r16, r28
    3934:	09 51       	subi	r16, 0x19	; 25
    3936:	1f 4f       	sbci	r17, 0xFF	; 255
    3938:	fe 01       	movw	r30, r28
    393a:	e5 51       	subi	r30, 0x15	; 21
    393c:	ff 4f       	sbci	r31, 0xFF	; 255
    393e:	60 81       	ld	r22, Z
    3940:	71 81       	ldd	r23, Z+1	; 0x01
    3942:	82 81       	ldd	r24, Z+2	; 0x02
    3944:	93 81       	ldd	r25, Z+3	; 0x03
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	4a e7       	ldi	r20, 0x7A	; 122
    394c:	55 e4       	ldi	r21, 0x45	; 69
    394e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	f8 01       	movw	r30, r16
    3958:	80 83       	st	Z, r24
    395a:	91 83       	std	Z+1, r25	; 0x01
    395c:	a2 83       	std	Z+2, r26	; 0x02
    395e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3960:	fe 01       	movw	r30, r28
    3962:	e9 51       	subi	r30, 0x19	; 25
    3964:	ff 4f       	sbci	r31, 0xFF	; 255
    3966:	60 81       	ld	r22, Z
    3968:	71 81       	ldd	r23, Z+1	; 0x01
    396a:	82 81       	ldd	r24, Z+2	; 0x02
    396c:	93 81       	ldd	r25, Z+3	; 0x03
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	40 e8       	ldi	r20, 0x80	; 128
    3974:	5f e3       	ldi	r21, 0x3F	; 63
    3976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    397a:	88 23       	and	r24, r24
    397c:	44 f4       	brge	.+16     	; 0x398e <main+0xc90>
		__ticks = 1;
    397e:	fe 01       	movw	r30, r28
    3980:	eb 51       	subi	r30, 0x1B	; 27
    3982:	ff 4f       	sbci	r31, 0xFF	; 255
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	91 83       	std	Z+1, r25	; 0x01
    398a:	80 83       	st	Z, r24
    398c:	64 c0       	rjmp	.+200    	; 0x3a56 <main+0xd58>
	else if (__tmp > 65535)
    398e:	fe 01       	movw	r30, r28
    3990:	e9 51       	subi	r30, 0x19	; 25
    3992:	ff 4f       	sbci	r31, 0xFF	; 255
    3994:	60 81       	ld	r22, Z
    3996:	71 81       	ldd	r23, Z+1	; 0x01
    3998:	82 81       	ldd	r24, Z+2	; 0x02
    399a:	93 81       	ldd	r25, Z+3	; 0x03
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	3f ef       	ldi	r19, 0xFF	; 255
    39a0:	4f e7       	ldi	r20, 0x7F	; 127
    39a2:	57 e4       	ldi	r21, 0x47	; 71
    39a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39a8:	18 16       	cp	r1, r24
    39aa:	0c f0       	brlt	.+2      	; 0x39ae <main+0xcb0>
    39ac:	43 c0       	rjmp	.+134    	; 0x3a34 <main+0xd36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ae:	fe 01       	movw	r30, r28
    39b0:	e5 51       	subi	r30, 0x15	; 21
    39b2:	ff 4f       	sbci	r31, 0xFF	; 255
    39b4:	60 81       	ld	r22, Z
    39b6:	71 81       	ldd	r23, Z+1	; 0x01
    39b8:	82 81       	ldd	r24, Z+2	; 0x02
    39ba:	93 81       	ldd	r25, Z+3	; 0x03
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	40 e2       	ldi	r20, 0x20	; 32
    39c2:	51 e4       	ldi	r21, 0x41	; 65
    39c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	8e 01       	movw	r16, r28
    39ce:	0b 51       	subi	r16, 0x1B	; 27
    39d0:	1f 4f       	sbci	r17, 0xFF	; 255
    39d2:	bc 01       	movw	r22, r24
    39d4:	cd 01       	movw	r24, r26
    39d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	f8 01       	movw	r30, r16
    39e0:	91 83       	std	Z+1, r25	; 0x01
    39e2:	80 83       	st	Z, r24
    39e4:	1f c0       	rjmp	.+62     	; 0x3a24 <main+0xd26>
    39e6:	fe 01       	movw	r30, r28
    39e8:	ed 51       	subi	r30, 0x1D	; 29
    39ea:	ff 4f       	sbci	r31, 0xFF	; 255
    39ec:	80 e9       	ldi	r24, 0x90	; 144
    39ee:	91 e0       	ldi	r25, 0x01	; 1
    39f0:	91 83       	std	Z+1, r25	; 0x01
    39f2:	80 83       	st	Z, r24
    39f4:	fe 01       	movw	r30, r28
    39f6:	ed 51       	subi	r30, 0x1D	; 29
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	80 81       	ld	r24, Z
    39fc:	91 81       	ldd	r25, Z+1	; 0x01
    39fe:	01 97       	sbiw	r24, 0x01	; 1
    3a00:	f1 f7       	brne	.-4      	; 0x39fe <main+0xd00>
    3a02:	fe 01       	movw	r30, r28
    3a04:	ed 51       	subi	r30, 0x1D	; 29
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	91 83       	std	Z+1, r25	; 0x01
    3a0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a0c:	de 01       	movw	r26, r28
    3a0e:	ab 51       	subi	r26, 0x1B	; 27
    3a10:	bf 4f       	sbci	r27, 0xFF	; 255
    3a12:	fe 01       	movw	r30, r28
    3a14:	eb 51       	subi	r30, 0x1B	; 27
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	80 81       	ld	r24, Z
    3a1a:	91 81       	ldd	r25, Z+1	; 0x01
    3a1c:	01 97       	sbiw	r24, 0x01	; 1
    3a1e:	11 96       	adiw	r26, 0x01	; 1
    3a20:	9c 93       	st	X, r25
    3a22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a24:	fe 01       	movw	r30, r28
    3a26:	eb 51       	subi	r30, 0x1B	; 27
    3a28:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2a:	80 81       	ld	r24, Z
    3a2c:	91 81       	ldd	r25, Z+1	; 0x01
    3a2e:	00 97       	sbiw	r24, 0x00	; 0
    3a30:	d1 f6       	brne	.-76     	; 0x39e6 <main+0xce8>
    3a32:	27 c0       	rjmp	.+78     	; 0x3a82 <main+0xd84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a34:	8e 01       	movw	r16, r28
    3a36:	0b 51       	subi	r16, 0x1B	; 27
    3a38:	1f 4f       	sbci	r17, 0xFF	; 255
    3a3a:	fe 01       	movw	r30, r28
    3a3c:	e9 51       	subi	r30, 0x19	; 25
    3a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a40:	60 81       	ld	r22, Z
    3a42:	71 81       	ldd	r23, Z+1	; 0x01
    3a44:	82 81       	ldd	r24, Z+2	; 0x02
    3a46:	93 81       	ldd	r25, Z+3	; 0x03
    3a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	f8 01       	movw	r30, r16
    3a52:	91 83       	std	Z+1, r25	; 0x01
    3a54:	80 83       	st	Z, r24
    3a56:	de 01       	movw	r26, r28
    3a58:	af 51       	subi	r26, 0x1F	; 31
    3a5a:	bf 4f       	sbci	r27, 0xFF	; 255
    3a5c:	fe 01       	movw	r30, r28
    3a5e:	eb 51       	subi	r30, 0x1B	; 27
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	80 81       	ld	r24, Z
    3a64:	91 81       	ldd	r25, Z+1	; 0x01
    3a66:	8d 93       	st	X+, r24
    3a68:	9c 93       	st	X, r25
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	ef 51       	subi	r30, 0x1F	; 31
    3a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a70:	80 81       	ld	r24, Z
    3a72:	91 81       	ldd	r25, Z+1	; 0x01
    3a74:	01 97       	sbiw	r24, 0x01	; 1
    3a76:	f1 f7       	brne	.-4      	; 0x3a74 <main+0xd76>
    3a78:	fe 01       	movw	r30, r28
    3a7a:	ef 51       	subi	r30, 0x1F	; 31
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	91 83       	std	Z+1, r25	; 0x01
    3a80:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_u8SetPinValue(PIN1,DIO_PORTB,HIGH);
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	61 e0       	ldi	r22, 0x01	; 1
    3a86:	41 e0       	ldi	r20, 0x01	; 1
    3a88:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,LOW);
    3a8c:	82 e0       	ldi	r24, 0x02	; 2
    3a8e:	61 e0       	ldi	r22, 0x01	; 1
    3a90:	40 e0       	ldi	r20, 0x00	; 0
    3a92:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,units);
    3a96:	fe 01       	movw	r30, r28
    3a98:	eb 5b       	subi	r30, 0xBB	; 187
    3a9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a9c:	81 e0       	ldi	r24, 0x01	; 1
    3a9e:	60 e0       	ldi	r22, 0x00	; 0
    3aa0:	40 81       	ld	r20, Z
    3aa2:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    3aa6:	fe 01       	movw	r30, r28
    3aa8:	e3 52       	subi	r30, 0x23	; 35
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	a0 ea       	ldi	r26, 0xA0	; 160
    3ab2:	b0 e4       	ldi	r27, 0x40	; 64
    3ab4:	80 83       	st	Z, r24
    3ab6:	91 83       	std	Z+1, r25	; 0x01
    3ab8:	a2 83       	std	Z+2, r26	; 0x02
    3aba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3abc:	8e 01       	movw	r16, r28
    3abe:	07 52       	subi	r16, 0x27	; 39
    3ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	e3 52       	subi	r30, 0x23	; 35
    3ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac8:	60 81       	ld	r22, Z
    3aca:	71 81       	ldd	r23, Z+1	; 0x01
    3acc:	82 81       	ldd	r24, Z+2	; 0x02
    3ace:	93 81       	ldd	r25, Z+3	; 0x03
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	4a e7       	ldi	r20, 0x7A	; 122
    3ad6:	55 e4       	ldi	r21, 0x45	; 69
    3ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	f8 01       	movw	r30, r16
    3ae2:	80 83       	st	Z, r24
    3ae4:	91 83       	std	Z+1, r25	; 0x01
    3ae6:	a2 83       	std	Z+2, r26	; 0x02
    3ae8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3aea:	fe 01       	movw	r30, r28
    3aec:	e7 52       	subi	r30, 0x27	; 39
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	60 81       	ld	r22, Z
    3af2:	71 81       	ldd	r23, Z+1	; 0x01
    3af4:	82 81       	ldd	r24, Z+2	; 0x02
    3af6:	93 81       	ldd	r25, Z+3	; 0x03
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	40 e8       	ldi	r20, 0x80	; 128
    3afe:	5f e3       	ldi	r21, 0x3F	; 63
    3b00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b04:	88 23       	and	r24, r24
    3b06:	44 f4       	brge	.+16     	; 0x3b18 <main+0xe1a>
		__ticks = 1;
    3b08:	fe 01       	movw	r30, r28
    3b0a:	e9 52       	subi	r30, 0x29	; 41
    3b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	91 83       	std	Z+1, r25	; 0x01
    3b14:	80 83       	st	Z, r24
    3b16:	64 c0       	rjmp	.+200    	; 0x3be0 <main+0xee2>
	else if (__tmp > 65535)
    3b18:	fe 01       	movw	r30, r28
    3b1a:	e7 52       	subi	r30, 0x27	; 39
    3b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1e:	60 81       	ld	r22, Z
    3b20:	71 81       	ldd	r23, Z+1	; 0x01
    3b22:	82 81       	ldd	r24, Z+2	; 0x02
    3b24:	93 81       	ldd	r25, Z+3	; 0x03
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	3f ef       	ldi	r19, 0xFF	; 255
    3b2a:	4f e7       	ldi	r20, 0x7F	; 127
    3b2c:	57 e4       	ldi	r21, 0x47	; 71
    3b2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b32:	18 16       	cp	r1, r24
    3b34:	0c f0       	brlt	.+2      	; 0x3b38 <main+0xe3a>
    3b36:	43 c0       	rjmp	.+134    	; 0x3bbe <main+0xec0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b38:	fe 01       	movw	r30, r28
    3b3a:	e3 52       	subi	r30, 0x23	; 35
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	60 81       	ld	r22, Z
    3b40:	71 81       	ldd	r23, Z+1	; 0x01
    3b42:	82 81       	ldd	r24, Z+2	; 0x02
    3b44:	93 81       	ldd	r25, Z+3	; 0x03
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	40 e2       	ldi	r20, 0x20	; 32
    3b4c:	51 e4       	ldi	r21, 0x41	; 65
    3b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b52:	dc 01       	movw	r26, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	8e 01       	movw	r16, r28
    3b58:	09 52       	subi	r16, 0x29	; 41
    3b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b5c:	bc 01       	movw	r22, r24
    3b5e:	cd 01       	movw	r24, r26
    3b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	f8 01       	movw	r30, r16
    3b6a:	91 83       	std	Z+1, r25	; 0x01
    3b6c:	80 83       	st	Z, r24
    3b6e:	1f c0       	rjmp	.+62     	; 0x3bae <main+0xeb0>
    3b70:	fe 01       	movw	r30, r28
    3b72:	eb 52       	subi	r30, 0x2B	; 43
    3b74:	ff 4f       	sbci	r31, 0xFF	; 255
    3b76:	80 e9       	ldi	r24, 0x90	; 144
    3b78:	91 e0       	ldi	r25, 0x01	; 1
    3b7a:	91 83       	std	Z+1, r25	; 0x01
    3b7c:	80 83       	st	Z, r24
    3b7e:	fe 01       	movw	r30, r28
    3b80:	eb 52       	subi	r30, 0x2B	; 43
    3b82:	ff 4f       	sbci	r31, 0xFF	; 255
    3b84:	80 81       	ld	r24, Z
    3b86:	91 81       	ldd	r25, Z+1	; 0x01
    3b88:	01 97       	sbiw	r24, 0x01	; 1
    3b8a:	f1 f7       	brne	.-4      	; 0x3b88 <main+0xe8a>
    3b8c:	fe 01       	movw	r30, r28
    3b8e:	eb 52       	subi	r30, 0x2B	; 43
    3b90:	ff 4f       	sbci	r31, 0xFF	; 255
    3b92:	91 83       	std	Z+1, r25	; 0x01
    3b94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b96:	de 01       	movw	r26, r28
    3b98:	a9 52       	subi	r26, 0x29	; 41
    3b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e9 52       	subi	r30, 0x29	; 41
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	80 81       	ld	r24, Z
    3ba4:	91 81       	ldd	r25, Z+1	; 0x01
    3ba6:	01 97       	sbiw	r24, 0x01	; 1
    3ba8:	11 96       	adiw	r26, 0x01	; 1
    3baa:	9c 93       	st	X, r25
    3bac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bae:	fe 01       	movw	r30, r28
    3bb0:	e9 52       	subi	r30, 0x29	; 41
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	80 81       	ld	r24, Z
    3bb6:	91 81       	ldd	r25, Z+1	; 0x01
    3bb8:	00 97       	sbiw	r24, 0x00	; 0
    3bba:	d1 f6       	brne	.-76     	; 0x3b70 <main+0xe72>
    3bbc:	27 c0       	rjmp	.+78     	; 0x3c0c <main+0xf0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bbe:	8e 01       	movw	r16, r28
    3bc0:	09 52       	subi	r16, 0x29	; 41
    3bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc4:	fe 01       	movw	r30, r28
    3bc6:	e7 52       	subi	r30, 0x27	; 39
    3bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bca:	60 81       	ld	r22, Z
    3bcc:	71 81       	ldd	r23, Z+1	; 0x01
    3bce:	82 81       	ldd	r24, Z+2	; 0x02
    3bd0:	93 81       	ldd	r25, Z+3	; 0x03
    3bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	f8 01       	movw	r30, r16
    3bdc:	91 83       	std	Z+1, r25	; 0x01
    3bde:	80 83       	st	Z, r24
    3be0:	de 01       	movw	r26, r28
    3be2:	ad 52       	subi	r26, 0x2D	; 45
    3be4:	bf 4f       	sbci	r27, 0xFF	; 255
    3be6:	fe 01       	movw	r30, r28
    3be8:	e9 52       	subi	r30, 0x29	; 41
    3bea:	ff 4f       	sbci	r31, 0xFF	; 255
    3bec:	80 81       	ld	r24, Z
    3bee:	91 81       	ldd	r25, Z+1	; 0x01
    3bf0:	8d 93       	st	X+, r24
    3bf2:	9c 93       	st	X, r25
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	ed 52       	subi	r30, 0x2D	; 45
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	80 81       	ld	r24, Z
    3bfc:	91 81       	ldd	r25, Z+1	; 0x01
    3bfe:	01 97       	sbiw	r24, 0x01	; 1
    3c00:	f1 f7       	brne	.-4      	; 0x3bfe <main+0xf00>
    3c02:	fe 01       	movw	r30, r28
    3c04:	ed 52       	subi	r30, 0x2D	; 45
    3c06:	ff 4f       	sbci	r31, 0xFF	; 255
    3c08:	91 83       	std	Z+1, r25	; 0x01
    3c0a:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_u8SetPinValue(PIN1,DIO_PORTB,LOW);
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	61 e0       	ldi	r22, 0x01	; 1
    3c10:	40 e0       	ldi	r20, 0x00	; 0
    3c12:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,HIGH);
    3c16:	82 e0       	ldi	r24, 0x02	; 2
    3c18:	61 e0       	ldi	r22, 0x01	; 1
    3c1a:	41 e0       	ldi	r20, 0x01	; 1
    3c1c:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,tenth);
    3c20:	fe 01       	movw	r30, r28
    3c22:	ea 5b       	subi	r30, 0xBA	; 186
    3c24:	fe 4f       	sbci	r31, 0xFE	; 254
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	60 e0       	ldi	r22, 0x00	; 0
    3c2a:	40 81       	ld	r20, Z
    3c2c:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    3c30:	fe 01       	movw	r30, r28
    3c32:	e1 53       	subi	r30, 0x31	; 49
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	a0 ea       	ldi	r26, 0xA0	; 160
    3c3c:	b0 e4       	ldi	r27, 0x40	; 64
    3c3e:	80 83       	st	Z, r24
    3c40:	91 83       	std	Z+1, r25	; 0x01
    3c42:	a2 83       	std	Z+2, r26	; 0x02
    3c44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c46:	8e 01       	movw	r16, r28
    3c48:	05 53       	subi	r16, 0x35	; 53
    3c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c4c:	fe 01       	movw	r30, r28
    3c4e:	e1 53       	subi	r30, 0x31	; 49
    3c50:	ff 4f       	sbci	r31, 0xFF	; 255
    3c52:	60 81       	ld	r22, Z
    3c54:	71 81       	ldd	r23, Z+1	; 0x01
    3c56:	82 81       	ldd	r24, Z+2	; 0x02
    3c58:	93 81       	ldd	r25, Z+3	; 0x03
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	4a e7       	ldi	r20, 0x7A	; 122
    3c60:	55 e4       	ldi	r21, 0x45	; 69
    3c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	f8 01       	movw	r30, r16
    3c6c:	80 83       	st	Z, r24
    3c6e:	91 83       	std	Z+1, r25	; 0x01
    3c70:	a2 83       	std	Z+2, r26	; 0x02
    3c72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c74:	fe 01       	movw	r30, r28
    3c76:	e5 53       	subi	r30, 0x35	; 53
    3c78:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7a:	60 81       	ld	r22, Z
    3c7c:	71 81       	ldd	r23, Z+1	; 0x01
    3c7e:	82 81       	ldd	r24, Z+2	; 0x02
    3c80:	93 81       	ldd	r25, Z+3	; 0x03
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	40 e8       	ldi	r20, 0x80	; 128
    3c88:	5f e3       	ldi	r21, 0x3F	; 63
    3c8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c8e:	88 23       	and	r24, r24
    3c90:	44 f4       	brge	.+16     	; 0x3ca2 <main+0xfa4>
		__ticks = 1;
    3c92:	fe 01       	movw	r30, r28
    3c94:	e7 53       	subi	r30, 0x37	; 55
    3c96:	ff 4f       	sbci	r31, 0xFF	; 255
    3c98:	81 e0       	ldi	r24, 0x01	; 1
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	91 83       	std	Z+1, r25	; 0x01
    3c9e:	80 83       	st	Z, r24
    3ca0:	64 c0       	rjmp	.+200    	; 0x3d6a <main+0x106c>
	else if (__tmp > 65535)
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	e5 53       	subi	r30, 0x35	; 53
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	60 81       	ld	r22, Z
    3caa:	71 81       	ldd	r23, Z+1	; 0x01
    3cac:	82 81       	ldd	r24, Z+2	; 0x02
    3cae:	93 81       	ldd	r25, Z+3	; 0x03
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	3f ef       	ldi	r19, 0xFF	; 255
    3cb4:	4f e7       	ldi	r20, 0x7F	; 127
    3cb6:	57 e4       	ldi	r21, 0x47	; 71
    3cb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cbc:	18 16       	cp	r1, r24
    3cbe:	0c f0       	brlt	.+2      	; 0x3cc2 <main+0xfc4>
    3cc0:	43 c0       	rjmp	.+134    	; 0x3d48 <main+0x104a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cc2:	fe 01       	movw	r30, r28
    3cc4:	e1 53       	subi	r30, 0x31	; 49
    3cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc8:	60 81       	ld	r22, Z
    3cca:	71 81       	ldd	r23, Z+1	; 0x01
    3ccc:	82 81       	ldd	r24, Z+2	; 0x02
    3cce:	93 81       	ldd	r25, Z+3	; 0x03
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	40 e2       	ldi	r20, 0x20	; 32
    3cd6:	51 e4       	ldi	r21, 0x41	; 65
    3cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cdc:	dc 01       	movw	r26, r24
    3cde:	cb 01       	movw	r24, r22
    3ce0:	8e 01       	movw	r16, r28
    3ce2:	07 53       	subi	r16, 0x37	; 55
    3ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce6:	bc 01       	movw	r22, r24
    3ce8:	cd 01       	movw	r24, r26
    3cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cee:	dc 01       	movw	r26, r24
    3cf0:	cb 01       	movw	r24, r22
    3cf2:	f8 01       	movw	r30, r16
    3cf4:	91 83       	std	Z+1, r25	; 0x01
    3cf6:	80 83       	st	Z, r24
    3cf8:	1f c0       	rjmp	.+62     	; 0x3d38 <main+0x103a>
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	e9 53       	subi	r30, 0x39	; 57
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	80 e9       	ldi	r24, 0x90	; 144
    3d02:	91 e0       	ldi	r25, 0x01	; 1
    3d04:	91 83       	std	Z+1, r25	; 0x01
    3d06:	80 83       	st	Z, r24
    3d08:	fe 01       	movw	r30, r28
    3d0a:	e9 53       	subi	r30, 0x39	; 57
    3d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0e:	80 81       	ld	r24, Z
    3d10:	91 81       	ldd	r25, Z+1	; 0x01
    3d12:	01 97       	sbiw	r24, 0x01	; 1
    3d14:	f1 f7       	brne	.-4      	; 0x3d12 <main+0x1014>
    3d16:	fe 01       	movw	r30, r28
    3d18:	e9 53       	subi	r30, 0x39	; 57
    3d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1c:	91 83       	std	Z+1, r25	; 0x01
    3d1e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d20:	de 01       	movw	r26, r28
    3d22:	a7 53       	subi	r26, 0x37	; 55
    3d24:	bf 4f       	sbci	r27, 0xFF	; 255
    3d26:	fe 01       	movw	r30, r28
    3d28:	e7 53       	subi	r30, 0x37	; 55
    3d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2c:	80 81       	ld	r24, Z
    3d2e:	91 81       	ldd	r25, Z+1	; 0x01
    3d30:	01 97       	sbiw	r24, 0x01	; 1
    3d32:	11 96       	adiw	r26, 0x01	; 1
    3d34:	9c 93       	st	X, r25
    3d36:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d38:	fe 01       	movw	r30, r28
    3d3a:	e7 53       	subi	r30, 0x37	; 55
    3d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3e:	80 81       	ld	r24, Z
    3d40:	91 81       	ldd	r25, Z+1	; 0x01
    3d42:	00 97       	sbiw	r24, 0x00	; 0
    3d44:	d1 f6       	brne	.-76     	; 0x3cfa <main+0xffc>
    3d46:	27 c0       	rjmp	.+78     	; 0x3d96 <main+0x1098>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d48:	8e 01       	movw	r16, r28
    3d4a:	07 53       	subi	r16, 0x37	; 55
    3d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d4e:	fe 01       	movw	r30, r28
    3d50:	e5 53       	subi	r30, 0x35	; 53
    3d52:	ff 4f       	sbci	r31, 0xFF	; 255
    3d54:	60 81       	ld	r22, Z
    3d56:	71 81       	ldd	r23, Z+1	; 0x01
    3d58:	82 81       	ldd	r24, Z+2	; 0x02
    3d5a:	93 81       	ldd	r25, Z+3	; 0x03
    3d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	f8 01       	movw	r30, r16
    3d66:	91 83       	std	Z+1, r25	; 0x01
    3d68:	80 83       	st	Z, r24
    3d6a:	de 01       	movw	r26, r28
    3d6c:	ab 53       	subi	r26, 0x3B	; 59
    3d6e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d70:	fe 01       	movw	r30, r28
    3d72:	e7 53       	subi	r30, 0x37	; 55
    3d74:	ff 4f       	sbci	r31, 0xFF	; 255
    3d76:	80 81       	ld	r24, Z
    3d78:	91 81       	ldd	r25, Z+1	; 0x01
    3d7a:	8d 93       	st	X+, r24
    3d7c:	9c 93       	st	X, r25
    3d7e:	fe 01       	movw	r30, r28
    3d80:	eb 53       	subi	r30, 0x3B	; 59
    3d82:	ff 4f       	sbci	r31, 0xFF	; 255
    3d84:	80 81       	ld	r24, Z
    3d86:	91 81       	ldd	r25, Z+1	; 0x01
    3d88:	01 97       	sbiw	r24, 0x01	; 1
    3d8a:	f1 f7       	brne	.-4      	; 0x3d88 <main+0x108a>
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	eb 53       	subi	r30, 0x3B	; 59
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	91 83       	std	Z+1, r25	; 0x01
    3d94:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_u8SetPinValue(PIN1,DIO_PORTB,HIGH);
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	61 e0       	ldi	r22, 0x01	; 1
    3d9a:	41 e0       	ldi	r20, 0x01	; 1
    3d9c:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,LOW);
    3da0:	82 e0       	ldi	r24, 0x02	; 2
    3da2:	61 e0       	ldi	r22, 0x01	; 1
    3da4:	40 e0       	ldi	r20, 0x00	; 0
    3da6:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,units);
    3daa:	fe 01       	movw	r30, r28
    3dac:	eb 5b       	subi	r30, 0xBB	; 187
    3dae:	fe 4f       	sbci	r31, 0xFE	; 254
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	60 e0       	ldi	r22, 0x00	; 0
    3db4:	40 81       	ld	r20, Z
    3db6:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    3dba:	fe 01       	movw	r30, r28
    3dbc:	ef 53       	subi	r30, 0x3F	; 63
    3dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc0:	80 e0       	ldi	r24, 0x00	; 0
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	a0 ea       	ldi	r26, 0xA0	; 160
    3dc6:	b0 e4       	ldi	r27, 0x40	; 64
    3dc8:	80 83       	st	Z, r24
    3dca:	91 83       	std	Z+1, r25	; 0x01
    3dcc:	a2 83       	std	Z+2, r26	; 0x02
    3dce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dd0:	8e 01       	movw	r16, r28
    3dd2:	03 54       	subi	r16, 0x43	; 67
    3dd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	ef 53       	subi	r30, 0x3F	; 63
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	60 81       	ld	r22, Z
    3dde:	71 81       	ldd	r23, Z+1	; 0x01
    3de0:	82 81       	ldd	r24, Z+2	; 0x02
    3de2:	93 81       	ldd	r25, Z+3	; 0x03
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	4a e7       	ldi	r20, 0x7A	; 122
    3dea:	55 e4       	ldi	r21, 0x45	; 69
    3dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df0:	dc 01       	movw	r26, r24
    3df2:	cb 01       	movw	r24, r22
    3df4:	f8 01       	movw	r30, r16
    3df6:	80 83       	st	Z, r24
    3df8:	91 83       	std	Z+1, r25	; 0x01
    3dfa:	a2 83       	std	Z+2, r26	; 0x02
    3dfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dfe:	fe 01       	movw	r30, r28
    3e00:	e3 54       	subi	r30, 0x43	; 67
    3e02:	ff 4f       	sbci	r31, 0xFF	; 255
    3e04:	60 81       	ld	r22, Z
    3e06:	71 81       	ldd	r23, Z+1	; 0x01
    3e08:	82 81       	ldd	r24, Z+2	; 0x02
    3e0a:	93 81       	ldd	r25, Z+3	; 0x03
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	30 e0       	ldi	r19, 0x00	; 0
    3e10:	40 e8       	ldi	r20, 0x80	; 128
    3e12:	5f e3       	ldi	r21, 0x3F	; 63
    3e14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e18:	88 23       	and	r24, r24
    3e1a:	44 f4       	brge	.+16     	; 0x3e2c <main+0x112e>
		__ticks = 1;
    3e1c:	fe 01       	movw	r30, r28
    3e1e:	e5 54       	subi	r30, 0x45	; 69
    3e20:	ff 4f       	sbci	r31, 0xFF	; 255
    3e22:	81 e0       	ldi	r24, 0x01	; 1
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	91 83       	std	Z+1, r25	; 0x01
    3e28:	80 83       	st	Z, r24
    3e2a:	64 c0       	rjmp	.+200    	; 0x3ef4 <main+0x11f6>
	else if (__tmp > 65535)
    3e2c:	fe 01       	movw	r30, r28
    3e2e:	e3 54       	subi	r30, 0x43	; 67
    3e30:	ff 4f       	sbci	r31, 0xFF	; 255
    3e32:	60 81       	ld	r22, Z
    3e34:	71 81       	ldd	r23, Z+1	; 0x01
    3e36:	82 81       	ldd	r24, Z+2	; 0x02
    3e38:	93 81       	ldd	r25, Z+3	; 0x03
    3e3a:	20 e0       	ldi	r18, 0x00	; 0
    3e3c:	3f ef       	ldi	r19, 0xFF	; 255
    3e3e:	4f e7       	ldi	r20, 0x7F	; 127
    3e40:	57 e4       	ldi	r21, 0x47	; 71
    3e42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e46:	18 16       	cp	r1, r24
    3e48:	0c f0       	brlt	.+2      	; 0x3e4c <main+0x114e>
    3e4a:	43 c0       	rjmp	.+134    	; 0x3ed2 <main+0x11d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	ef 53       	subi	r30, 0x3F	; 63
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	60 81       	ld	r22, Z
    3e54:	71 81       	ldd	r23, Z+1	; 0x01
    3e56:	82 81       	ldd	r24, Z+2	; 0x02
    3e58:	93 81       	ldd	r25, Z+3	; 0x03
    3e5a:	20 e0       	ldi	r18, 0x00	; 0
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	40 e2       	ldi	r20, 0x20	; 32
    3e60:	51 e4       	ldi	r21, 0x41	; 65
    3e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	8e 01       	movw	r16, r28
    3e6c:	05 54       	subi	r16, 0x45	; 69
    3e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e70:	bc 01       	movw	r22, r24
    3e72:	cd 01       	movw	r24, r26
    3e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e78:	dc 01       	movw	r26, r24
    3e7a:	cb 01       	movw	r24, r22
    3e7c:	f8 01       	movw	r30, r16
    3e7e:	91 83       	std	Z+1, r25	; 0x01
    3e80:	80 83       	st	Z, r24
    3e82:	1f c0       	rjmp	.+62     	; 0x3ec2 <main+0x11c4>
    3e84:	fe 01       	movw	r30, r28
    3e86:	e7 54       	subi	r30, 0x47	; 71
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	80 e9       	ldi	r24, 0x90	; 144
    3e8c:	91 e0       	ldi	r25, 0x01	; 1
    3e8e:	91 83       	std	Z+1, r25	; 0x01
    3e90:	80 83       	st	Z, r24
    3e92:	fe 01       	movw	r30, r28
    3e94:	e7 54       	subi	r30, 0x47	; 71
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	80 81       	ld	r24, Z
    3e9a:	91 81       	ldd	r25, Z+1	; 0x01
    3e9c:	01 97       	sbiw	r24, 0x01	; 1
    3e9e:	f1 f7       	brne	.-4      	; 0x3e9c <main+0x119e>
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	e7 54       	subi	r30, 0x47	; 71
    3ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea6:	91 83       	std	Z+1, r25	; 0x01
    3ea8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eaa:	de 01       	movw	r26, r28
    3eac:	a5 54       	subi	r26, 0x45	; 69
    3eae:	bf 4f       	sbci	r27, 0xFF	; 255
    3eb0:	fe 01       	movw	r30, r28
    3eb2:	e5 54       	subi	r30, 0x45	; 69
    3eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb6:	80 81       	ld	r24, Z
    3eb8:	91 81       	ldd	r25, Z+1	; 0x01
    3eba:	01 97       	sbiw	r24, 0x01	; 1
    3ebc:	11 96       	adiw	r26, 0x01	; 1
    3ebe:	9c 93       	st	X, r25
    3ec0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	e5 54       	subi	r30, 0x45	; 69
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	80 81       	ld	r24, Z
    3eca:	91 81       	ldd	r25, Z+1	; 0x01
    3ecc:	00 97       	sbiw	r24, 0x00	; 0
    3ece:	d1 f6       	brne	.-76     	; 0x3e84 <main+0x1186>
    3ed0:	27 c0       	rjmp	.+78     	; 0x3f20 <main+0x1222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ed2:	8e 01       	movw	r16, r28
    3ed4:	05 54       	subi	r16, 0x45	; 69
    3ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed8:	fe 01       	movw	r30, r28
    3eda:	e3 54       	subi	r30, 0x43	; 67
    3edc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ede:	60 81       	ld	r22, Z
    3ee0:	71 81       	ldd	r23, Z+1	; 0x01
    3ee2:	82 81       	ldd	r24, Z+2	; 0x02
    3ee4:	93 81       	ldd	r25, Z+3	; 0x03
    3ee6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eea:	dc 01       	movw	r26, r24
    3eec:	cb 01       	movw	r24, r22
    3eee:	f8 01       	movw	r30, r16
    3ef0:	91 83       	std	Z+1, r25	; 0x01
    3ef2:	80 83       	st	Z, r24
    3ef4:	de 01       	movw	r26, r28
    3ef6:	a9 54       	subi	r26, 0x49	; 73
    3ef8:	bf 4f       	sbci	r27, 0xFF	; 255
    3efa:	fe 01       	movw	r30, r28
    3efc:	e5 54       	subi	r30, 0x45	; 69
    3efe:	ff 4f       	sbci	r31, 0xFF	; 255
    3f00:	80 81       	ld	r24, Z
    3f02:	91 81       	ldd	r25, Z+1	; 0x01
    3f04:	8d 93       	st	X+, r24
    3f06:	9c 93       	st	X, r25
    3f08:	fe 01       	movw	r30, r28
    3f0a:	e9 54       	subi	r30, 0x49	; 73
    3f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0e:	80 81       	ld	r24, Z
    3f10:	91 81       	ldd	r25, Z+1	; 0x01
    3f12:	01 97       	sbiw	r24, 0x01	; 1
    3f14:	f1 f7       	brne	.-4      	; 0x3f12 <main+0x1214>
    3f16:	fe 01       	movw	r30, r28
    3f18:	e9 54       	subi	r30, 0x49	; 73
    3f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1c:	91 83       	std	Z+1, r25	; 0x01
    3f1e:	80 83       	st	Z, r24
			_delay_ms(5);

			//test if any of the setting temperature buttons is pressed
			DIO_u8GetPinValue(PIN6,DIO_PORTD,&inc);
    3f20:	9e 01       	movw	r18, r28
    3f22:	29 5b       	subi	r18, 0xB9	; 185
    3f24:	3e 4f       	sbci	r19, 0xFE	; 254
    3f26:	86 e0       	ldi	r24, 0x06	; 6
    3f28:	63 e0       	ldi	r22, 0x03	; 3
    3f2a:	a9 01       	movw	r20, r18
    3f2c:	0e 94 05 09 	call	0x120a	; 0x120a <DIO_u8GetPinValue>
			DIO_u8GetPinValue(PIN0,DIO_PORTB,&dec);
    3f30:	9e 01       	movw	r18, r28
    3f32:	28 5b       	subi	r18, 0xB8	; 184
    3f34:	3e 4f       	sbci	r19, 0xFE	; 254
    3f36:	80 e0       	ldi	r24, 0x00	; 0
    3f38:	61 e0       	ldi	r22, 0x01	; 1
    3f3a:	a9 01       	movw	r20, r18
    3f3c:	0e 94 05 09 	call	0x120a	; 0x120a <DIO_u8GetPinValue>
			if(dec || inc){inc = 0; dec = 0;On_Off_Set_Flag = 2;_delay_ms(50);Set_mode_count = 0; }
    3f40:	fe 01       	movw	r30, r28
    3f42:	e8 5b       	subi	r30, 0xB8	; 184
    3f44:	fe 4f       	sbci	r31, 0xFE	; 254
    3f46:	80 81       	ld	r24, Z
    3f48:	88 23       	and	r24, r24
    3f4a:	41 f4       	brne	.+16     	; 0x3f5c <main+0x125e>
    3f4c:	fe 01       	movw	r30, r28
    3f4e:	e9 5b       	subi	r30, 0xB9	; 185
    3f50:	fe 4f       	sbci	r31, 0xFE	; 254
    3f52:	80 81       	ld	r24, Z
    3f54:	88 23       	and	r24, r24
    3f56:	11 f4       	brne	.+4      	; 0x3f5c <main+0x125e>
    3f58:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <main+0xe4>
    3f5c:	fe 01       	movw	r30, r28
    3f5e:	e9 5b       	subi	r30, 0xB9	; 185
    3f60:	fe 4f       	sbci	r31, 0xFE	; 254
    3f62:	10 82       	st	Z, r1
    3f64:	fe 01       	movw	r30, r28
    3f66:	e8 5b       	subi	r30, 0xB8	; 184
    3f68:	fe 4f       	sbci	r31, 0xFE	; 254
    3f6a:	10 82       	st	Z, r1
    3f6c:	82 e0       	ldi	r24, 0x02	; 2
    3f6e:	80 93 6e 00 	sts	0x006E, r24
    3f72:	fe 01       	movw	r30, r28
    3f74:	ed 54       	subi	r30, 0x4D	; 77
    3f76:	ff 4f       	sbci	r31, 0xFF	; 255
    3f78:	80 e0       	ldi	r24, 0x00	; 0
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	a8 e4       	ldi	r26, 0x48	; 72
    3f7e:	b2 e4       	ldi	r27, 0x42	; 66
    3f80:	80 83       	st	Z, r24
    3f82:	91 83       	std	Z+1, r25	; 0x01
    3f84:	a2 83       	std	Z+2, r26	; 0x02
    3f86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f88:	8e 01       	movw	r16, r28
    3f8a:	01 55       	subi	r16, 0x51	; 81
    3f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f8e:	fe 01       	movw	r30, r28
    3f90:	ed 54       	subi	r30, 0x4D	; 77
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	60 81       	ld	r22, Z
    3f96:	71 81       	ldd	r23, Z+1	; 0x01
    3f98:	82 81       	ldd	r24, Z+2	; 0x02
    3f9a:	93 81       	ldd	r25, Z+3	; 0x03
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	4a e7       	ldi	r20, 0x7A	; 122
    3fa2:	55 e4       	ldi	r21, 0x45	; 69
    3fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa8:	dc 01       	movw	r26, r24
    3faa:	cb 01       	movw	r24, r22
    3fac:	f8 01       	movw	r30, r16
    3fae:	80 83       	st	Z, r24
    3fb0:	91 83       	std	Z+1, r25	; 0x01
    3fb2:	a2 83       	std	Z+2, r26	; 0x02
    3fb4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fb6:	fe 01       	movw	r30, r28
    3fb8:	e1 55       	subi	r30, 0x51	; 81
    3fba:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbc:	60 81       	ld	r22, Z
    3fbe:	71 81       	ldd	r23, Z+1	; 0x01
    3fc0:	82 81       	ldd	r24, Z+2	; 0x02
    3fc2:	93 81       	ldd	r25, Z+3	; 0x03
    3fc4:	20 e0       	ldi	r18, 0x00	; 0
    3fc6:	30 e0       	ldi	r19, 0x00	; 0
    3fc8:	40 e8       	ldi	r20, 0x80	; 128
    3fca:	5f e3       	ldi	r21, 0x3F	; 63
    3fcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fd0:	88 23       	and	r24, r24
    3fd2:	44 f4       	brge	.+16     	; 0x3fe4 <main+0x12e6>
		__ticks = 1;
    3fd4:	fe 01       	movw	r30, r28
    3fd6:	e3 55       	subi	r30, 0x53	; 83
    3fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fda:	81 e0       	ldi	r24, 0x01	; 1
    3fdc:	90 e0       	ldi	r25, 0x00	; 0
    3fde:	91 83       	std	Z+1, r25	; 0x01
    3fe0:	80 83       	st	Z, r24
    3fe2:	64 c0       	rjmp	.+200    	; 0x40ac <main+0x13ae>
	else if (__tmp > 65535)
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	e1 55       	subi	r30, 0x51	; 81
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	60 81       	ld	r22, Z
    3fec:	71 81       	ldd	r23, Z+1	; 0x01
    3fee:	82 81       	ldd	r24, Z+2	; 0x02
    3ff0:	93 81       	ldd	r25, Z+3	; 0x03
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	3f ef       	ldi	r19, 0xFF	; 255
    3ff6:	4f e7       	ldi	r20, 0x7F	; 127
    3ff8:	57 e4       	ldi	r21, 0x47	; 71
    3ffa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ffe:	18 16       	cp	r1, r24
    4000:	0c f0       	brlt	.+2      	; 0x4004 <main+0x1306>
    4002:	43 c0       	rjmp	.+134    	; 0x408a <main+0x138c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4004:	fe 01       	movw	r30, r28
    4006:	ed 54       	subi	r30, 0x4D	; 77
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	60 81       	ld	r22, Z
    400c:	71 81       	ldd	r23, Z+1	; 0x01
    400e:	82 81       	ldd	r24, Z+2	; 0x02
    4010:	93 81       	ldd	r25, Z+3	; 0x03
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	40 e2       	ldi	r20, 0x20	; 32
    4018:	51 e4       	ldi	r21, 0x41	; 65
    401a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    401e:	dc 01       	movw	r26, r24
    4020:	cb 01       	movw	r24, r22
    4022:	8e 01       	movw	r16, r28
    4024:	03 55       	subi	r16, 0x53	; 83
    4026:	1f 4f       	sbci	r17, 0xFF	; 255
    4028:	bc 01       	movw	r22, r24
    402a:	cd 01       	movw	r24, r26
    402c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4030:	dc 01       	movw	r26, r24
    4032:	cb 01       	movw	r24, r22
    4034:	f8 01       	movw	r30, r16
    4036:	91 83       	std	Z+1, r25	; 0x01
    4038:	80 83       	st	Z, r24
    403a:	1f c0       	rjmp	.+62     	; 0x407a <main+0x137c>
    403c:	fe 01       	movw	r30, r28
    403e:	e5 55       	subi	r30, 0x55	; 85
    4040:	ff 4f       	sbci	r31, 0xFF	; 255
    4042:	80 e9       	ldi	r24, 0x90	; 144
    4044:	91 e0       	ldi	r25, 0x01	; 1
    4046:	91 83       	std	Z+1, r25	; 0x01
    4048:	80 83       	st	Z, r24
    404a:	fe 01       	movw	r30, r28
    404c:	e5 55       	subi	r30, 0x55	; 85
    404e:	ff 4f       	sbci	r31, 0xFF	; 255
    4050:	80 81       	ld	r24, Z
    4052:	91 81       	ldd	r25, Z+1	; 0x01
    4054:	01 97       	sbiw	r24, 0x01	; 1
    4056:	f1 f7       	brne	.-4      	; 0x4054 <main+0x1356>
    4058:	fe 01       	movw	r30, r28
    405a:	e5 55       	subi	r30, 0x55	; 85
    405c:	ff 4f       	sbci	r31, 0xFF	; 255
    405e:	91 83       	std	Z+1, r25	; 0x01
    4060:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4062:	de 01       	movw	r26, r28
    4064:	a3 55       	subi	r26, 0x53	; 83
    4066:	bf 4f       	sbci	r27, 0xFF	; 255
    4068:	fe 01       	movw	r30, r28
    406a:	e3 55       	subi	r30, 0x53	; 83
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	80 81       	ld	r24, Z
    4070:	91 81       	ldd	r25, Z+1	; 0x01
    4072:	01 97       	sbiw	r24, 0x01	; 1
    4074:	11 96       	adiw	r26, 0x01	; 1
    4076:	9c 93       	st	X, r25
    4078:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    407a:	fe 01       	movw	r30, r28
    407c:	e3 55       	subi	r30, 0x53	; 83
    407e:	ff 4f       	sbci	r31, 0xFF	; 255
    4080:	80 81       	ld	r24, Z
    4082:	91 81       	ldd	r25, Z+1	; 0x01
    4084:	00 97       	sbiw	r24, 0x00	; 0
    4086:	d1 f6       	brne	.-76     	; 0x403c <main+0x133e>
    4088:	28 c0       	rjmp	.+80     	; 0x40da <main+0x13dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    408a:	8e 01       	movw	r16, r28
    408c:	03 55       	subi	r16, 0x53	; 83
    408e:	1f 4f       	sbci	r17, 0xFF	; 255
    4090:	fe 01       	movw	r30, r28
    4092:	e1 55       	subi	r30, 0x51	; 81
    4094:	ff 4f       	sbci	r31, 0xFF	; 255
    4096:	60 81       	ld	r22, Z
    4098:	71 81       	ldd	r23, Z+1	; 0x01
    409a:	82 81       	ldd	r24, Z+2	; 0x02
    409c:	93 81       	ldd	r25, Z+3	; 0x03
    409e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40a2:	dc 01       	movw	r26, r24
    40a4:	cb 01       	movw	r24, r22
    40a6:	f8 01       	movw	r30, r16
    40a8:	91 83       	std	Z+1, r25	; 0x01
    40aa:	80 83       	st	Z, r24
    40ac:	de 01       	movw	r26, r28
    40ae:	a7 55       	subi	r26, 0x57	; 87
    40b0:	bf 4f       	sbci	r27, 0xFF	; 255
    40b2:	fe 01       	movw	r30, r28
    40b4:	e3 55       	subi	r30, 0x53	; 83
    40b6:	ff 4f       	sbci	r31, 0xFF	; 255
    40b8:	80 81       	ld	r24, Z
    40ba:	91 81       	ldd	r25, Z+1	; 0x01
    40bc:	11 96       	adiw	r26, 0x01	; 1
    40be:	9c 93       	st	X, r25
    40c0:	8e 93       	st	-X, r24
    40c2:	fe 01       	movw	r30, r28
    40c4:	e7 55       	subi	r30, 0x57	; 87
    40c6:	ff 4f       	sbci	r31, 0xFF	; 255
    40c8:	80 81       	ld	r24, Z
    40ca:	91 81       	ldd	r25, Z+1	; 0x01
    40cc:	01 97       	sbiw	r24, 0x01	; 1
    40ce:	f1 f7       	brne	.-4      	; 0x40cc <main+0x13ce>
    40d0:	fe 01       	movw	r30, r28
    40d2:	e7 55       	subi	r30, 0x57	; 87
    40d4:	ff 4f       	sbci	r31, 0xFF	; 255
    40d6:	91 83       	std	Z+1, r25	; 0x01
    40d8:	80 83       	st	Z, r24
    40da:	10 92 71 00 	sts	0x0071, r1
    40de:	10 92 70 00 	sts	0x0070, r1
    40e2:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <main+0xe4>

		}

		//set_temp
		else if(On_Off_Set_Flag == 2)
    40e6:	80 91 6e 00 	lds	r24, 0x006E
    40ea:	82 30       	cpi	r24, 0x02	; 2
    40ec:	11 f0       	breq	.+4      	; 0x40f2 <main+0x13f4>
    40ee:	0c 94 da 28 	jmp	0x51b4	; 0x51b4 <main+0x24b6>
		{
			//test to inc or dec the set temp.
			DIO_u8GetPinValue(PIN6,DIO_PORTD,&inc);
    40f2:	9e 01       	movw	r18, r28
    40f4:	29 5b       	subi	r18, 0xB9	; 185
    40f6:	3e 4f       	sbci	r19, 0xFE	; 254
    40f8:	86 e0       	ldi	r24, 0x06	; 6
    40fa:	63 e0       	ldi	r22, 0x03	; 3
    40fc:	a9 01       	movw	r20, r18
    40fe:	0e 94 05 09 	call	0x120a	; 0x120a <DIO_u8GetPinValue>
			DIO_u8GetPinValue(PIN0,DIO_PORTB,&dec);
    4102:	9e 01       	movw	r18, r28
    4104:	28 5b       	subi	r18, 0xB8	; 184
    4106:	3e 4f       	sbci	r19, 0xFE	; 254
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	61 e0       	ldi	r22, 0x01	; 1
    410c:	a9 01       	movw	r20, r18
    410e:	0e 94 05 09 	call	0x120a	; 0x120a <DIO_u8GetPinValue>
			if(inc){if(set_temp<75){set_temp+=5;}_delay_ms(150);Set_mode_count = 0;inc = 0;}
    4112:	fe 01       	movw	r30, r28
    4114:	e9 5b       	subi	r30, 0xB9	; 185
    4116:	fe 4f       	sbci	r31, 0xFE	; 254
    4118:	80 81       	ld	r24, Z
    411a:	88 23       	and	r24, r24
    411c:	09 f4       	brne	.+2      	; 0x4120 <main+0x1422>
    411e:	c5 c0       	rjmp	.+394    	; 0x42aa <main+0x15ac>
    4120:	80 91 68 00 	lds	r24, 0x0068
    4124:	8b 34       	cpi	r24, 0x4B	; 75
    4126:	28 f4       	brcc	.+10     	; 0x4132 <main+0x1434>
    4128:	80 91 68 00 	lds	r24, 0x0068
    412c:	8b 5f       	subi	r24, 0xFB	; 251
    412e:	80 93 68 00 	sts	0x0068, r24
    4132:	fe 01       	movw	r30, r28
    4134:	eb 55       	subi	r30, 0x5B	; 91
    4136:	ff 4f       	sbci	r31, 0xFF	; 255
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	a6 e1       	ldi	r26, 0x16	; 22
    413e:	b3 e4       	ldi	r27, 0x43	; 67
    4140:	80 83       	st	Z, r24
    4142:	91 83       	std	Z+1, r25	; 0x01
    4144:	a2 83       	std	Z+2, r26	; 0x02
    4146:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4148:	8e 01       	movw	r16, r28
    414a:	0f 55       	subi	r16, 0x5F	; 95
    414c:	1f 4f       	sbci	r17, 0xFF	; 255
    414e:	fe 01       	movw	r30, r28
    4150:	eb 55       	subi	r30, 0x5B	; 91
    4152:	ff 4f       	sbci	r31, 0xFF	; 255
    4154:	60 81       	ld	r22, Z
    4156:	71 81       	ldd	r23, Z+1	; 0x01
    4158:	82 81       	ldd	r24, Z+2	; 0x02
    415a:	93 81       	ldd	r25, Z+3	; 0x03
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	4a e7       	ldi	r20, 0x7A	; 122
    4162:	55 e4       	ldi	r21, 0x45	; 69
    4164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	f8 01       	movw	r30, r16
    416e:	80 83       	st	Z, r24
    4170:	91 83       	std	Z+1, r25	; 0x01
    4172:	a2 83       	std	Z+2, r26	; 0x02
    4174:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4176:	fe 01       	movw	r30, r28
    4178:	ef 55       	subi	r30, 0x5F	; 95
    417a:	ff 4f       	sbci	r31, 0xFF	; 255
    417c:	60 81       	ld	r22, Z
    417e:	71 81       	ldd	r23, Z+1	; 0x01
    4180:	82 81       	ldd	r24, Z+2	; 0x02
    4182:	93 81       	ldd	r25, Z+3	; 0x03
    4184:	20 e0       	ldi	r18, 0x00	; 0
    4186:	30 e0       	ldi	r19, 0x00	; 0
    4188:	40 e8       	ldi	r20, 0x80	; 128
    418a:	5f e3       	ldi	r21, 0x3F	; 63
    418c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4190:	88 23       	and	r24, r24
    4192:	44 f4       	brge	.+16     	; 0x41a4 <main+0x14a6>
		__ticks = 1;
    4194:	fe 01       	movw	r30, r28
    4196:	e1 56       	subi	r30, 0x61	; 97
    4198:	ff 4f       	sbci	r31, 0xFF	; 255
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	91 83       	std	Z+1, r25	; 0x01
    41a0:	80 83       	st	Z, r24
    41a2:	64 c0       	rjmp	.+200    	; 0x426c <main+0x156e>
	else if (__tmp > 65535)
    41a4:	fe 01       	movw	r30, r28
    41a6:	ef 55       	subi	r30, 0x5F	; 95
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	60 81       	ld	r22, Z
    41ac:	71 81       	ldd	r23, Z+1	; 0x01
    41ae:	82 81       	ldd	r24, Z+2	; 0x02
    41b0:	93 81       	ldd	r25, Z+3	; 0x03
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	3f ef       	ldi	r19, 0xFF	; 255
    41b6:	4f e7       	ldi	r20, 0x7F	; 127
    41b8:	57 e4       	ldi	r21, 0x47	; 71
    41ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41be:	18 16       	cp	r1, r24
    41c0:	0c f0       	brlt	.+2      	; 0x41c4 <main+0x14c6>
    41c2:	43 c0       	rjmp	.+134    	; 0x424a <main+0x154c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41c4:	fe 01       	movw	r30, r28
    41c6:	eb 55       	subi	r30, 0x5B	; 91
    41c8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ca:	60 81       	ld	r22, Z
    41cc:	71 81       	ldd	r23, Z+1	; 0x01
    41ce:	82 81       	ldd	r24, Z+2	; 0x02
    41d0:	93 81       	ldd	r25, Z+3	; 0x03
    41d2:	20 e0       	ldi	r18, 0x00	; 0
    41d4:	30 e0       	ldi	r19, 0x00	; 0
    41d6:	40 e2       	ldi	r20, 0x20	; 32
    41d8:	51 e4       	ldi	r21, 0x41	; 65
    41da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	8e 01       	movw	r16, r28
    41e4:	01 56       	subi	r16, 0x61	; 97
    41e6:	1f 4f       	sbci	r17, 0xFF	; 255
    41e8:	bc 01       	movw	r22, r24
    41ea:	cd 01       	movw	r24, r26
    41ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f0:	dc 01       	movw	r26, r24
    41f2:	cb 01       	movw	r24, r22
    41f4:	f8 01       	movw	r30, r16
    41f6:	91 83       	std	Z+1, r25	; 0x01
    41f8:	80 83       	st	Z, r24
    41fa:	1f c0       	rjmp	.+62     	; 0x423a <main+0x153c>
    41fc:	fe 01       	movw	r30, r28
    41fe:	e3 56       	subi	r30, 0x63	; 99
    4200:	ff 4f       	sbci	r31, 0xFF	; 255
    4202:	80 e9       	ldi	r24, 0x90	; 144
    4204:	91 e0       	ldi	r25, 0x01	; 1
    4206:	91 83       	std	Z+1, r25	; 0x01
    4208:	80 83       	st	Z, r24
    420a:	fe 01       	movw	r30, r28
    420c:	e3 56       	subi	r30, 0x63	; 99
    420e:	ff 4f       	sbci	r31, 0xFF	; 255
    4210:	80 81       	ld	r24, Z
    4212:	91 81       	ldd	r25, Z+1	; 0x01
    4214:	01 97       	sbiw	r24, 0x01	; 1
    4216:	f1 f7       	brne	.-4      	; 0x4214 <main+0x1516>
    4218:	fe 01       	movw	r30, r28
    421a:	e3 56       	subi	r30, 0x63	; 99
    421c:	ff 4f       	sbci	r31, 0xFF	; 255
    421e:	91 83       	std	Z+1, r25	; 0x01
    4220:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4222:	de 01       	movw	r26, r28
    4224:	a1 56       	subi	r26, 0x61	; 97
    4226:	bf 4f       	sbci	r27, 0xFF	; 255
    4228:	fe 01       	movw	r30, r28
    422a:	e1 56       	subi	r30, 0x61	; 97
    422c:	ff 4f       	sbci	r31, 0xFF	; 255
    422e:	80 81       	ld	r24, Z
    4230:	91 81       	ldd	r25, Z+1	; 0x01
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	11 96       	adiw	r26, 0x01	; 1
    4236:	9c 93       	st	X, r25
    4238:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    423a:	fe 01       	movw	r30, r28
    423c:	e1 56       	subi	r30, 0x61	; 97
    423e:	ff 4f       	sbci	r31, 0xFF	; 255
    4240:	80 81       	ld	r24, Z
    4242:	91 81       	ldd	r25, Z+1	; 0x01
    4244:	00 97       	sbiw	r24, 0x00	; 0
    4246:	d1 f6       	brne	.-76     	; 0x41fc <main+0x14fe>
    4248:	28 c0       	rjmp	.+80     	; 0x429a <main+0x159c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424a:	8e 01       	movw	r16, r28
    424c:	01 56       	subi	r16, 0x61	; 97
    424e:	1f 4f       	sbci	r17, 0xFF	; 255
    4250:	fe 01       	movw	r30, r28
    4252:	ef 55       	subi	r30, 0x5F	; 95
    4254:	ff 4f       	sbci	r31, 0xFF	; 255
    4256:	60 81       	ld	r22, Z
    4258:	71 81       	ldd	r23, Z+1	; 0x01
    425a:	82 81       	ldd	r24, Z+2	; 0x02
    425c:	93 81       	ldd	r25, Z+3	; 0x03
    425e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4262:	dc 01       	movw	r26, r24
    4264:	cb 01       	movw	r24, r22
    4266:	f8 01       	movw	r30, r16
    4268:	91 83       	std	Z+1, r25	; 0x01
    426a:	80 83       	st	Z, r24
    426c:	de 01       	movw	r26, r28
    426e:	a5 56       	subi	r26, 0x65	; 101
    4270:	bf 4f       	sbci	r27, 0xFF	; 255
    4272:	fe 01       	movw	r30, r28
    4274:	e1 56       	subi	r30, 0x61	; 97
    4276:	ff 4f       	sbci	r31, 0xFF	; 255
    4278:	80 81       	ld	r24, Z
    427a:	91 81       	ldd	r25, Z+1	; 0x01
    427c:	11 96       	adiw	r26, 0x01	; 1
    427e:	9c 93       	st	X, r25
    4280:	8e 93       	st	-X, r24
    4282:	fe 01       	movw	r30, r28
    4284:	e5 56       	subi	r30, 0x65	; 101
    4286:	ff 4f       	sbci	r31, 0xFF	; 255
    4288:	80 81       	ld	r24, Z
    428a:	91 81       	ldd	r25, Z+1	; 0x01
    428c:	01 97       	sbiw	r24, 0x01	; 1
    428e:	f1 f7       	brne	.-4      	; 0x428c <main+0x158e>
    4290:	fe 01       	movw	r30, r28
    4292:	e5 56       	subi	r30, 0x65	; 101
    4294:	ff 4f       	sbci	r31, 0xFF	; 255
    4296:	91 83       	std	Z+1, r25	; 0x01
    4298:	80 83       	st	Z, r24
    429a:	10 92 71 00 	sts	0x0071, r1
    429e:	10 92 70 00 	sts	0x0070, r1
    42a2:	fe 01       	movw	r30, r28
    42a4:	e9 5b       	subi	r30, 0xB9	; 185
    42a6:	fe 4f       	sbci	r31, 0xFE	; 254
    42a8:	10 82       	st	Z, r1
			if(dec){if(set_temp>35){set_temp-=5;}_delay_ms(150);Set_mode_count = 0;dec = 0;}
    42aa:	fe 01       	movw	r30, r28
    42ac:	e8 5b       	subi	r30, 0xB8	; 184
    42ae:	fe 4f       	sbci	r31, 0xFE	; 254
    42b0:	80 81       	ld	r24, Z
    42b2:	88 23       	and	r24, r24
    42b4:	09 f4       	brne	.+2      	; 0x42b8 <main+0x15ba>
    42b6:	c4 c0       	rjmp	.+392    	; 0x4440 <main+0x1742>
    42b8:	80 91 68 00 	lds	r24, 0x0068
    42bc:	84 32       	cpi	r24, 0x24	; 36
    42be:	28 f0       	brcs	.+10     	; 0x42ca <main+0x15cc>
    42c0:	80 91 68 00 	lds	r24, 0x0068
    42c4:	85 50       	subi	r24, 0x05	; 5
    42c6:	80 93 68 00 	sts	0x0068, r24
    42ca:	fe 01       	movw	r30, r28
    42cc:	e9 56       	subi	r30, 0x69	; 105
    42ce:	ff 4f       	sbci	r31, 0xFF	; 255
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	a6 e1       	ldi	r26, 0x16	; 22
    42d6:	b3 e4       	ldi	r27, 0x43	; 67
    42d8:	80 83       	st	Z, r24
    42da:	91 83       	std	Z+1, r25	; 0x01
    42dc:	a2 83       	std	Z+2, r26	; 0x02
    42de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42e0:	8e 01       	movw	r16, r28
    42e2:	0d 56       	subi	r16, 0x6D	; 109
    42e4:	1f 4f       	sbci	r17, 0xFF	; 255
    42e6:	fe 01       	movw	r30, r28
    42e8:	e9 56       	subi	r30, 0x69	; 105
    42ea:	ff 4f       	sbci	r31, 0xFF	; 255
    42ec:	60 81       	ld	r22, Z
    42ee:	71 81       	ldd	r23, Z+1	; 0x01
    42f0:	82 81       	ldd	r24, Z+2	; 0x02
    42f2:	93 81       	ldd	r25, Z+3	; 0x03
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	4a e7       	ldi	r20, 0x7A	; 122
    42fa:	55 e4       	ldi	r21, 0x45	; 69
    42fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4300:	dc 01       	movw	r26, r24
    4302:	cb 01       	movw	r24, r22
    4304:	f8 01       	movw	r30, r16
    4306:	80 83       	st	Z, r24
    4308:	91 83       	std	Z+1, r25	; 0x01
    430a:	a2 83       	std	Z+2, r26	; 0x02
    430c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    430e:	fe 01       	movw	r30, r28
    4310:	ed 56       	subi	r30, 0x6D	; 109
    4312:	ff 4f       	sbci	r31, 0xFF	; 255
    4314:	60 81       	ld	r22, Z
    4316:	71 81       	ldd	r23, Z+1	; 0x01
    4318:	82 81       	ldd	r24, Z+2	; 0x02
    431a:	93 81       	ldd	r25, Z+3	; 0x03
    431c:	20 e0       	ldi	r18, 0x00	; 0
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	40 e8       	ldi	r20, 0x80	; 128
    4322:	5f e3       	ldi	r21, 0x3F	; 63
    4324:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4328:	88 23       	and	r24, r24
    432a:	44 f4       	brge	.+16     	; 0x433c <main+0x163e>
		__ticks = 1;
    432c:	fe 01       	movw	r30, r28
    432e:	ef 56       	subi	r30, 0x6F	; 111
    4330:	ff 4f       	sbci	r31, 0xFF	; 255
    4332:	81 e0       	ldi	r24, 0x01	; 1
    4334:	90 e0       	ldi	r25, 0x00	; 0
    4336:	91 83       	std	Z+1, r25	; 0x01
    4338:	80 83       	st	Z, r24
    433a:	64 c0       	rjmp	.+200    	; 0x4404 <main+0x1706>
	else if (__tmp > 65535)
    433c:	fe 01       	movw	r30, r28
    433e:	ed 56       	subi	r30, 0x6D	; 109
    4340:	ff 4f       	sbci	r31, 0xFF	; 255
    4342:	60 81       	ld	r22, Z
    4344:	71 81       	ldd	r23, Z+1	; 0x01
    4346:	82 81       	ldd	r24, Z+2	; 0x02
    4348:	93 81       	ldd	r25, Z+3	; 0x03
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	3f ef       	ldi	r19, 0xFF	; 255
    434e:	4f e7       	ldi	r20, 0x7F	; 127
    4350:	57 e4       	ldi	r21, 0x47	; 71
    4352:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4356:	18 16       	cp	r1, r24
    4358:	0c f0       	brlt	.+2      	; 0x435c <main+0x165e>
    435a:	43 c0       	rjmp	.+134    	; 0x43e2 <main+0x16e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    435c:	fe 01       	movw	r30, r28
    435e:	e9 56       	subi	r30, 0x69	; 105
    4360:	ff 4f       	sbci	r31, 0xFF	; 255
    4362:	60 81       	ld	r22, Z
    4364:	71 81       	ldd	r23, Z+1	; 0x01
    4366:	82 81       	ldd	r24, Z+2	; 0x02
    4368:	93 81       	ldd	r25, Z+3	; 0x03
    436a:	20 e0       	ldi	r18, 0x00	; 0
    436c:	30 e0       	ldi	r19, 0x00	; 0
    436e:	40 e2       	ldi	r20, 0x20	; 32
    4370:	51 e4       	ldi	r21, 0x41	; 65
    4372:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4376:	dc 01       	movw	r26, r24
    4378:	cb 01       	movw	r24, r22
    437a:	8e 01       	movw	r16, r28
    437c:	0f 56       	subi	r16, 0x6F	; 111
    437e:	1f 4f       	sbci	r17, 0xFF	; 255
    4380:	bc 01       	movw	r22, r24
    4382:	cd 01       	movw	r24, r26
    4384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4388:	dc 01       	movw	r26, r24
    438a:	cb 01       	movw	r24, r22
    438c:	f8 01       	movw	r30, r16
    438e:	91 83       	std	Z+1, r25	; 0x01
    4390:	80 83       	st	Z, r24
    4392:	1f c0       	rjmp	.+62     	; 0x43d2 <main+0x16d4>
    4394:	fe 01       	movw	r30, r28
    4396:	e1 57       	subi	r30, 0x71	; 113
    4398:	ff 4f       	sbci	r31, 0xFF	; 255
    439a:	80 e9       	ldi	r24, 0x90	; 144
    439c:	91 e0       	ldi	r25, 0x01	; 1
    439e:	91 83       	std	Z+1, r25	; 0x01
    43a0:	80 83       	st	Z, r24
    43a2:	fe 01       	movw	r30, r28
    43a4:	e1 57       	subi	r30, 0x71	; 113
    43a6:	ff 4f       	sbci	r31, 0xFF	; 255
    43a8:	80 81       	ld	r24, Z
    43aa:	91 81       	ldd	r25, Z+1	; 0x01
    43ac:	01 97       	sbiw	r24, 0x01	; 1
    43ae:	f1 f7       	brne	.-4      	; 0x43ac <main+0x16ae>
    43b0:	fe 01       	movw	r30, r28
    43b2:	e1 57       	subi	r30, 0x71	; 113
    43b4:	ff 4f       	sbci	r31, 0xFF	; 255
    43b6:	91 83       	std	Z+1, r25	; 0x01
    43b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43ba:	de 01       	movw	r26, r28
    43bc:	af 56       	subi	r26, 0x6F	; 111
    43be:	bf 4f       	sbci	r27, 0xFF	; 255
    43c0:	fe 01       	movw	r30, r28
    43c2:	ef 56       	subi	r30, 0x6F	; 111
    43c4:	ff 4f       	sbci	r31, 0xFF	; 255
    43c6:	80 81       	ld	r24, Z
    43c8:	91 81       	ldd	r25, Z+1	; 0x01
    43ca:	01 97       	sbiw	r24, 0x01	; 1
    43cc:	11 96       	adiw	r26, 0x01	; 1
    43ce:	9c 93       	st	X, r25
    43d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43d2:	fe 01       	movw	r30, r28
    43d4:	ef 56       	subi	r30, 0x6F	; 111
    43d6:	ff 4f       	sbci	r31, 0xFF	; 255
    43d8:	80 81       	ld	r24, Z
    43da:	91 81       	ldd	r25, Z+1	; 0x01
    43dc:	00 97       	sbiw	r24, 0x00	; 0
    43de:	d1 f6       	brne	.-76     	; 0x4394 <main+0x1696>
    43e0:	27 c0       	rjmp	.+78     	; 0x4430 <main+0x1732>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e2:	8e 01       	movw	r16, r28
    43e4:	0f 56       	subi	r16, 0x6F	; 111
    43e6:	1f 4f       	sbci	r17, 0xFF	; 255
    43e8:	fe 01       	movw	r30, r28
    43ea:	ed 56       	subi	r30, 0x6D	; 109
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	60 81       	ld	r22, Z
    43f0:	71 81       	ldd	r23, Z+1	; 0x01
    43f2:	82 81       	ldd	r24, Z+2	; 0x02
    43f4:	93 81       	ldd	r25, Z+3	; 0x03
    43f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43fa:	dc 01       	movw	r26, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	f8 01       	movw	r30, r16
    4400:	91 83       	std	Z+1, r25	; 0x01
    4402:	80 83       	st	Z, r24
    4404:	de 01       	movw	r26, r28
    4406:	a3 57       	subi	r26, 0x73	; 115
    4408:	bf 4f       	sbci	r27, 0xFF	; 255
    440a:	fe 01       	movw	r30, r28
    440c:	ef 56       	subi	r30, 0x6F	; 111
    440e:	ff 4f       	sbci	r31, 0xFF	; 255
    4410:	80 81       	ld	r24, Z
    4412:	91 81       	ldd	r25, Z+1	; 0x01
    4414:	8d 93       	st	X+, r24
    4416:	9c 93       	st	X, r25
    4418:	fe 01       	movw	r30, r28
    441a:	e3 57       	subi	r30, 0x73	; 115
    441c:	ff 4f       	sbci	r31, 0xFF	; 255
    441e:	80 81       	ld	r24, Z
    4420:	91 81       	ldd	r25, Z+1	; 0x01
    4422:	01 97       	sbiw	r24, 0x01	; 1
    4424:	f1 f7       	brne	.-4      	; 0x4422 <main+0x1724>
    4426:	fe 01       	movw	r30, r28
    4428:	e3 57       	subi	r30, 0x73	; 115
    442a:	ff 4f       	sbci	r31, 0xFF	; 255
    442c:	91 83       	std	Z+1, r25	; 0x01
    442e:	80 83       	st	Z, r24
    4430:	10 92 71 00 	sts	0x0071, r1
    4434:	10 92 70 00 	sts	0x0070, r1
    4438:	fe 01       	movw	r30, r28
    443a:	e8 5b       	subi	r30, 0xB8	; 184
    443c:	fe 4f       	sbci	r31, 0xFE	; 254
    443e:	10 82       	st	Z, r1

			set_temp = EEPROM_u8ReadDataByte(11 , 0);
    4440:	8b e0       	ldi	r24, 0x0B	; 11
    4442:	60 e0       	ldi	r22, 0x00	; 0
    4444:	0e 94 5f 0c 	call	0x18be	; 0x18be <EEPROM_u8ReadDataByte>
    4448:	80 93 68 00 	sts	0x0068, r24
			tenth = set_temp/10;
    444c:	80 91 68 00 	lds	r24, 0x0068
    4450:	fe 01       	movw	r30, r28
    4452:	ea 5b       	subi	r30, 0xBA	; 186
    4454:	fe 4f       	sbci	r31, 0xFE	; 254
    4456:	9a e0       	ldi	r25, 0x0A	; 10
    4458:	69 2f       	mov	r22, r25
    445a:	0e 94 86 2a 	call	0x550c	; 0x550c <__udivmodqi4>
    445e:	80 83       	st	Z, r24
			units = set_temp%10;
    4460:	80 91 68 00 	lds	r24, 0x0068
    4464:	fe 01       	movw	r30, r28
    4466:	eb 5b       	subi	r30, 0xBB	; 187
    4468:	fe 4f       	sbci	r31, 0xFE	; 254
    446a:	9a e0       	ldi	r25, 0x0A	; 10
    446c:	69 2f       	mov	r22, r25
    446e:	0e 94 86 2a 	call	0x550c	; 0x550c <__udivmodqi4>
    4472:	89 2f       	mov	r24, r25
    4474:	80 83       	st	Z, r24

			//show set temp

			DIO_u8SetPinValue(PIN1,DIO_PORTB,LOW);
    4476:	81 e0       	ldi	r24, 0x01	; 1
    4478:	61 e0       	ldi	r22, 0x01	; 1
    447a:	40 e0       	ldi	r20, 0x00	; 0
    447c:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,HIGH);
    4480:	82 e0       	ldi	r24, 0x02	; 2
    4482:	61 e0       	ldi	r22, 0x01	; 1
    4484:	41 e0       	ldi	r20, 0x01	; 1
    4486:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,tenth);
    448a:	fe 01       	movw	r30, r28
    448c:	ea 5b       	subi	r30, 0xBA	; 186
    448e:	fe 4f       	sbci	r31, 0xFE	; 254
    4490:	81 e0       	ldi	r24, 0x01	; 1
    4492:	60 e0       	ldi	r22, 0x00	; 0
    4494:	40 81       	ld	r20, Z
    4496:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    449a:	fe 01       	movw	r30, r28
    449c:	e7 57       	subi	r30, 0x77	; 119
    449e:	ff 4f       	sbci	r31, 0xFF	; 255
    44a0:	80 e0       	ldi	r24, 0x00	; 0
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	a0 ea       	ldi	r26, 0xA0	; 160
    44a6:	b0 e4       	ldi	r27, 0x40	; 64
    44a8:	80 83       	st	Z, r24
    44aa:	91 83       	std	Z+1, r25	; 0x01
    44ac:	a2 83       	std	Z+2, r26	; 0x02
    44ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44b0:	8e 01       	movw	r16, r28
    44b2:	0b 57       	subi	r16, 0x7B	; 123
    44b4:	1f 4f       	sbci	r17, 0xFF	; 255
    44b6:	fe 01       	movw	r30, r28
    44b8:	e7 57       	subi	r30, 0x77	; 119
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	60 81       	ld	r22, Z
    44be:	71 81       	ldd	r23, Z+1	; 0x01
    44c0:	82 81       	ldd	r24, Z+2	; 0x02
    44c2:	93 81       	ldd	r25, Z+3	; 0x03
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	4a e7       	ldi	r20, 0x7A	; 122
    44ca:	55 e4       	ldi	r21, 0x45	; 69
    44cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d0:	dc 01       	movw	r26, r24
    44d2:	cb 01       	movw	r24, r22
    44d4:	f8 01       	movw	r30, r16
    44d6:	80 83       	st	Z, r24
    44d8:	91 83       	std	Z+1, r25	; 0x01
    44da:	a2 83       	std	Z+2, r26	; 0x02
    44dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44de:	fe 01       	movw	r30, r28
    44e0:	eb 57       	subi	r30, 0x7B	; 123
    44e2:	ff 4f       	sbci	r31, 0xFF	; 255
    44e4:	60 81       	ld	r22, Z
    44e6:	71 81       	ldd	r23, Z+1	; 0x01
    44e8:	82 81       	ldd	r24, Z+2	; 0x02
    44ea:	93 81       	ldd	r25, Z+3	; 0x03
    44ec:	20 e0       	ldi	r18, 0x00	; 0
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	40 e8       	ldi	r20, 0x80	; 128
    44f2:	5f e3       	ldi	r21, 0x3F	; 63
    44f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44f8:	88 23       	and	r24, r24
    44fa:	44 f4       	brge	.+16     	; 0x450c <main+0x180e>
		__ticks = 1;
    44fc:	fe 01       	movw	r30, r28
    44fe:	ed 57       	subi	r30, 0x7D	; 125
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	91 83       	std	Z+1, r25	; 0x01
    4508:	80 83       	st	Z, r24
    450a:	64 c0       	rjmp	.+200    	; 0x45d4 <main+0x18d6>
	else if (__tmp > 65535)
    450c:	fe 01       	movw	r30, r28
    450e:	eb 57       	subi	r30, 0x7B	; 123
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	60 81       	ld	r22, Z
    4514:	71 81       	ldd	r23, Z+1	; 0x01
    4516:	82 81       	ldd	r24, Z+2	; 0x02
    4518:	93 81       	ldd	r25, Z+3	; 0x03
    451a:	20 e0       	ldi	r18, 0x00	; 0
    451c:	3f ef       	ldi	r19, 0xFF	; 255
    451e:	4f e7       	ldi	r20, 0x7F	; 127
    4520:	57 e4       	ldi	r21, 0x47	; 71
    4522:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4526:	18 16       	cp	r1, r24
    4528:	0c f0       	brlt	.+2      	; 0x452c <main+0x182e>
    452a:	43 c0       	rjmp	.+134    	; 0x45b2 <main+0x18b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    452c:	fe 01       	movw	r30, r28
    452e:	e7 57       	subi	r30, 0x77	; 119
    4530:	ff 4f       	sbci	r31, 0xFF	; 255
    4532:	60 81       	ld	r22, Z
    4534:	71 81       	ldd	r23, Z+1	; 0x01
    4536:	82 81       	ldd	r24, Z+2	; 0x02
    4538:	93 81       	ldd	r25, Z+3	; 0x03
    453a:	20 e0       	ldi	r18, 0x00	; 0
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	40 e2       	ldi	r20, 0x20	; 32
    4540:	51 e4       	ldi	r21, 0x41	; 65
    4542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4546:	dc 01       	movw	r26, r24
    4548:	cb 01       	movw	r24, r22
    454a:	8e 01       	movw	r16, r28
    454c:	0d 57       	subi	r16, 0x7D	; 125
    454e:	1f 4f       	sbci	r17, 0xFF	; 255
    4550:	bc 01       	movw	r22, r24
    4552:	cd 01       	movw	r24, r26
    4554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4558:	dc 01       	movw	r26, r24
    455a:	cb 01       	movw	r24, r22
    455c:	f8 01       	movw	r30, r16
    455e:	91 83       	std	Z+1, r25	; 0x01
    4560:	80 83       	st	Z, r24
    4562:	1f c0       	rjmp	.+62     	; 0x45a2 <main+0x18a4>
    4564:	fe 01       	movw	r30, r28
    4566:	ef 57       	subi	r30, 0x7F	; 127
    4568:	ff 4f       	sbci	r31, 0xFF	; 255
    456a:	80 e9       	ldi	r24, 0x90	; 144
    456c:	91 e0       	ldi	r25, 0x01	; 1
    456e:	91 83       	std	Z+1, r25	; 0x01
    4570:	80 83       	st	Z, r24
    4572:	fe 01       	movw	r30, r28
    4574:	ef 57       	subi	r30, 0x7F	; 127
    4576:	ff 4f       	sbci	r31, 0xFF	; 255
    4578:	80 81       	ld	r24, Z
    457a:	91 81       	ldd	r25, Z+1	; 0x01
    457c:	01 97       	sbiw	r24, 0x01	; 1
    457e:	f1 f7       	brne	.-4      	; 0x457c <main+0x187e>
    4580:	fe 01       	movw	r30, r28
    4582:	ef 57       	subi	r30, 0x7F	; 127
    4584:	ff 4f       	sbci	r31, 0xFF	; 255
    4586:	91 83       	std	Z+1, r25	; 0x01
    4588:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    458a:	de 01       	movw	r26, r28
    458c:	ad 57       	subi	r26, 0x7D	; 125
    458e:	bf 4f       	sbci	r27, 0xFF	; 255
    4590:	fe 01       	movw	r30, r28
    4592:	ed 57       	subi	r30, 0x7D	; 125
    4594:	ff 4f       	sbci	r31, 0xFF	; 255
    4596:	80 81       	ld	r24, Z
    4598:	91 81       	ldd	r25, Z+1	; 0x01
    459a:	01 97       	sbiw	r24, 0x01	; 1
    459c:	11 96       	adiw	r26, 0x01	; 1
    459e:	9c 93       	st	X, r25
    45a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45a2:	fe 01       	movw	r30, r28
    45a4:	ed 57       	subi	r30, 0x7D	; 125
    45a6:	ff 4f       	sbci	r31, 0xFF	; 255
    45a8:	80 81       	ld	r24, Z
    45aa:	91 81       	ldd	r25, Z+1	; 0x01
    45ac:	00 97       	sbiw	r24, 0x00	; 0
    45ae:	d1 f6       	brne	.-76     	; 0x4564 <main+0x1866>
    45b0:	27 c0       	rjmp	.+78     	; 0x4600 <main+0x1902>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45b2:	8e 01       	movw	r16, r28
    45b4:	0d 57       	subi	r16, 0x7D	; 125
    45b6:	1f 4f       	sbci	r17, 0xFF	; 255
    45b8:	fe 01       	movw	r30, r28
    45ba:	eb 57       	subi	r30, 0x7B	; 123
    45bc:	ff 4f       	sbci	r31, 0xFF	; 255
    45be:	60 81       	ld	r22, Z
    45c0:	71 81       	ldd	r23, Z+1	; 0x01
    45c2:	82 81       	ldd	r24, Z+2	; 0x02
    45c4:	93 81       	ldd	r25, Z+3	; 0x03
    45c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ca:	dc 01       	movw	r26, r24
    45cc:	cb 01       	movw	r24, r22
    45ce:	f8 01       	movw	r30, r16
    45d0:	91 83       	std	Z+1, r25	; 0x01
    45d2:	80 83       	st	Z, r24
    45d4:	de 01       	movw	r26, r28
    45d6:	a1 58       	subi	r26, 0x81	; 129
    45d8:	bf 4f       	sbci	r27, 0xFF	; 255
    45da:	fe 01       	movw	r30, r28
    45dc:	ed 57       	subi	r30, 0x7D	; 125
    45de:	ff 4f       	sbci	r31, 0xFF	; 255
    45e0:	80 81       	ld	r24, Z
    45e2:	91 81       	ldd	r25, Z+1	; 0x01
    45e4:	8d 93       	st	X+, r24
    45e6:	9c 93       	st	X, r25
    45e8:	fe 01       	movw	r30, r28
    45ea:	e1 58       	subi	r30, 0x81	; 129
    45ec:	ff 4f       	sbci	r31, 0xFF	; 255
    45ee:	80 81       	ld	r24, Z
    45f0:	91 81       	ldd	r25, Z+1	; 0x01
    45f2:	01 97       	sbiw	r24, 0x01	; 1
    45f4:	f1 f7       	brne	.-4      	; 0x45f2 <main+0x18f4>
    45f6:	fe 01       	movw	r30, r28
    45f8:	e1 58       	subi	r30, 0x81	; 129
    45fa:	ff 4f       	sbci	r31, 0xFF	; 255
    45fc:	91 83       	std	Z+1, r25	; 0x01
    45fe:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_u8SetPinValue(PIN1,DIO_PORTB,HIGH);
    4600:	81 e0       	ldi	r24, 0x01	; 1
    4602:	61 e0       	ldi	r22, 0x01	; 1
    4604:	41 e0       	ldi	r20, 0x01	; 1
    4606:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,LOW);
    460a:	82 e0       	ldi	r24, 0x02	; 2
    460c:	61 e0       	ldi	r22, 0x01	; 1
    460e:	40 e0       	ldi	r20, 0x00	; 0
    4610:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,units);
    4614:	fe 01       	movw	r30, r28
    4616:	eb 5b       	subi	r30, 0xBB	; 187
    4618:	fe 4f       	sbci	r31, 0xFE	; 254
    461a:	81 e0       	ldi	r24, 0x01	; 1
    461c:	60 e0       	ldi	r22, 0x00	; 0
    461e:	40 81       	ld	r20, Z
    4620:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    4624:	fe 01       	movw	r30, r28
    4626:	e5 58       	subi	r30, 0x85	; 133
    4628:	ff 4f       	sbci	r31, 0xFF	; 255
    462a:	80 e0       	ldi	r24, 0x00	; 0
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	a0 ea       	ldi	r26, 0xA0	; 160
    4630:	b0 e4       	ldi	r27, 0x40	; 64
    4632:	80 83       	st	Z, r24
    4634:	91 83       	std	Z+1, r25	; 0x01
    4636:	a2 83       	std	Z+2, r26	; 0x02
    4638:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    463a:	8e 01       	movw	r16, r28
    463c:	09 58       	subi	r16, 0x89	; 137
    463e:	1f 4f       	sbci	r17, 0xFF	; 255
    4640:	fe 01       	movw	r30, r28
    4642:	e5 58       	subi	r30, 0x85	; 133
    4644:	ff 4f       	sbci	r31, 0xFF	; 255
    4646:	60 81       	ld	r22, Z
    4648:	71 81       	ldd	r23, Z+1	; 0x01
    464a:	82 81       	ldd	r24, Z+2	; 0x02
    464c:	93 81       	ldd	r25, Z+3	; 0x03
    464e:	20 e0       	ldi	r18, 0x00	; 0
    4650:	30 e0       	ldi	r19, 0x00	; 0
    4652:	4a e7       	ldi	r20, 0x7A	; 122
    4654:	55 e4       	ldi	r21, 0x45	; 69
    4656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    465a:	dc 01       	movw	r26, r24
    465c:	cb 01       	movw	r24, r22
    465e:	f8 01       	movw	r30, r16
    4660:	80 83       	st	Z, r24
    4662:	91 83       	std	Z+1, r25	; 0x01
    4664:	a2 83       	std	Z+2, r26	; 0x02
    4666:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4668:	fe 01       	movw	r30, r28
    466a:	e9 58       	subi	r30, 0x89	; 137
    466c:	ff 4f       	sbci	r31, 0xFF	; 255
    466e:	60 81       	ld	r22, Z
    4670:	71 81       	ldd	r23, Z+1	; 0x01
    4672:	82 81       	ldd	r24, Z+2	; 0x02
    4674:	93 81       	ldd	r25, Z+3	; 0x03
    4676:	20 e0       	ldi	r18, 0x00	; 0
    4678:	30 e0       	ldi	r19, 0x00	; 0
    467a:	40 e8       	ldi	r20, 0x80	; 128
    467c:	5f e3       	ldi	r21, 0x3F	; 63
    467e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4682:	88 23       	and	r24, r24
    4684:	44 f4       	brge	.+16     	; 0x4696 <main+0x1998>
		__ticks = 1;
    4686:	fe 01       	movw	r30, r28
    4688:	eb 58       	subi	r30, 0x8B	; 139
    468a:	ff 4f       	sbci	r31, 0xFF	; 255
    468c:	81 e0       	ldi	r24, 0x01	; 1
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	91 83       	std	Z+1, r25	; 0x01
    4692:	80 83       	st	Z, r24
    4694:	64 c0       	rjmp	.+200    	; 0x475e <main+0x1a60>
	else if (__tmp > 65535)
    4696:	fe 01       	movw	r30, r28
    4698:	e9 58       	subi	r30, 0x89	; 137
    469a:	ff 4f       	sbci	r31, 0xFF	; 255
    469c:	60 81       	ld	r22, Z
    469e:	71 81       	ldd	r23, Z+1	; 0x01
    46a0:	82 81       	ldd	r24, Z+2	; 0x02
    46a2:	93 81       	ldd	r25, Z+3	; 0x03
    46a4:	20 e0       	ldi	r18, 0x00	; 0
    46a6:	3f ef       	ldi	r19, 0xFF	; 255
    46a8:	4f e7       	ldi	r20, 0x7F	; 127
    46aa:	57 e4       	ldi	r21, 0x47	; 71
    46ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46b0:	18 16       	cp	r1, r24
    46b2:	0c f0       	brlt	.+2      	; 0x46b6 <main+0x19b8>
    46b4:	43 c0       	rjmp	.+134    	; 0x473c <main+0x1a3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46b6:	fe 01       	movw	r30, r28
    46b8:	e5 58       	subi	r30, 0x85	; 133
    46ba:	ff 4f       	sbci	r31, 0xFF	; 255
    46bc:	60 81       	ld	r22, Z
    46be:	71 81       	ldd	r23, Z+1	; 0x01
    46c0:	82 81       	ldd	r24, Z+2	; 0x02
    46c2:	93 81       	ldd	r25, Z+3	; 0x03
    46c4:	20 e0       	ldi	r18, 0x00	; 0
    46c6:	30 e0       	ldi	r19, 0x00	; 0
    46c8:	40 e2       	ldi	r20, 0x20	; 32
    46ca:	51 e4       	ldi	r21, 0x41	; 65
    46cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d0:	dc 01       	movw	r26, r24
    46d2:	cb 01       	movw	r24, r22
    46d4:	8e 01       	movw	r16, r28
    46d6:	0b 58       	subi	r16, 0x8B	; 139
    46d8:	1f 4f       	sbci	r17, 0xFF	; 255
    46da:	bc 01       	movw	r22, r24
    46dc:	cd 01       	movw	r24, r26
    46de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e2:	dc 01       	movw	r26, r24
    46e4:	cb 01       	movw	r24, r22
    46e6:	f8 01       	movw	r30, r16
    46e8:	91 83       	std	Z+1, r25	; 0x01
    46ea:	80 83       	st	Z, r24
    46ec:	1f c0       	rjmp	.+62     	; 0x472c <main+0x1a2e>
    46ee:	fe 01       	movw	r30, r28
    46f0:	ed 58       	subi	r30, 0x8D	; 141
    46f2:	ff 4f       	sbci	r31, 0xFF	; 255
    46f4:	80 e9       	ldi	r24, 0x90	; 144
    46f6:	91 e0       	ldi	r25, 0x01	; 1
    46f8:	91 83       	std	Z+1, r25	; 0x01
    46fa:	80 83       	st	Z, r24
    46fc:	fe 01       	movw	r30, r28
    46fe:	ed 58       	subi	r30, 0x8D	; 141
    4700:	ff 4f       	sbci	r31, 0xFF	; 255
    4702:	80 81       	ld	r24, Z
    4704:	91 81       	ldd	r25, Z+1	; 0x01
    4706:	01 97       	sbiw	r24, 0x01	; 1
    4708:	f1 f7       	brne	.-4      	; 0x4706 <main+0x1a08>
    470a:	fe 01       	movw	r30, r28
    470c:	ed 58       	subi	r30, 0x8D	; 141
    470e:	ff 4f       	sbci	r31, 0xFF	; 255
    4710:	91 83       	std	Z+1, r25	; 0x01
    4712:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4714:	de 01       	movw	r26, r28
    4716:	ab 58       	subi	r26, 0x8B	; 139
    4718:	bf 4f       	sbci	r27, 0xFF	; 255
    471a:	fe 01       	movw	r30, r28
    471c:	eb 58       	subi	r30, 0x8B	; 139
    471e:	ff 4f       	sbci	r31, 0xFF	; 255
    4720:	80 81       	ld	r24, Z
    4722:	91 81       	ldd	r25, Z+1	; 0x01
    4724:	01 97       	sbiw	r24, 0x01	; 1
    4726:	11 96       	adiw	r26, 0x01	; 1
    4728:	9c 93       	st	X, r25
    472a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    472c:	fe 01       	movw	r30, r28
    472e:	eb 58       	subi	r30, 0x8B	; 139
    4730:	ff 4f       	sbci	r31, 0xFF	; 255
    4732:	80 81       	ld	r24, Z
    4734:	91 81       	ldd	r25, Z+1	; 0x01
    4736:	00 97       	sbiw	r24, 0x00	; 0
    4738:	d1 f6       	brne	.-76     	; 0x46ee <main+0x19f0>
    473a:	27 c0       	rjmp	.+78     	; 0x478a <main+0x1a8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    473c:	8e 01       	movw	r16, r28
    473e:	0b 58       	subi	r16, 0x8B	; 139
    4740:	1f 4f       	sbci	r17, 0xFF	; 255
    4742:	fe 01       	movw	r30, r28
    4744:	e9 58       	subi	r30, 0x89	; 137
    4746:	ff 4f       	sbci	r31, 0xFF	; 255
    4748:	60 81       	ld	r22, Z
    474a:	71 81       	ldd	r23, Z+1	; 0x01
    474c:	82 81       	ldd	r24, Z+2	; 0x02
    474e:	93 81       	ldd	r25, Z+3	; 0x03
    4750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4754:	dc 01       	movw	r26, r24
    4756:	cb 01       	movw	r24, r22
    4758:	f8 01       	movw	r30, r16
    475a:	91 83       	std	Z+1, r25	; 0x01
    475c:	80 83       	st	Z, r24
    475e:	de 01       	movw	r26, r28
    4760:	af 58       	subi	r26, 0x8F	; 143
    4762:	bf 4f       	sbci	r27, 0xFF	; 255
    4764:	fe 01       	movw	r30, r28
    4766:	eb 58       	subi	r30, 0x8B	; 139
    4768:	ff 4f       	sbci	r31, 0xFF	; 255
    476a:	80 81       	ld	r24, Z
    476c:	91 81       	ldd	r25, Z+1	; 0x01
    476e:	8d 93       	st	X+, r24
    4770:	9c 93       	st	X, r25
    4772:	fe 01       	movw	r30, r28
    4774:	ef 58       	subi	r30, 0x8F	; 143
    4776:	ff 4f       	sbci	r31, 0xFF	; 255
    4778:	80 81       	ld	r24, Z
    477a:	91 81       	ldd	r25, Z+1	; 0x01
    477c:	01 97       	sbiw	r24, 0x01	; 1
    477e:	f1 f7       	brne	.-4      	; 0x477c <main+0x1a7e>
    4780:	fe 01       	movw	r30, r28
    4782:	ef 58       	subi	r30, 0x8F	; 143
    4784:	ff 4f       	sbci	r31, 0xFF	; 255
    4786:	91 83       	std	Z+1, r25	; 0x01
    4788:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_u8SetPinValue(PIN1,DIO_PORTB,LOW);
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	61 e0       	ldi	r22, 0x01	; 1
    478e:	40 e0       	ldi	r20, 0x00	; 0
    4790:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,HIGH);
    4794:	82 e0       	ldi	r24, 0x02	; 2
    4796:	61 e0       	ldi	r22, 0x01	; 1
    4798:	41 e0       	ldi	r20, 0x01	; 1
    479a:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,tenth);
    479e:	fe 01       	movw	r30, r28
    47a0:	ea 5b       	subi	r30, 0xBA	; 186
    47a2:	fe 4f       	sbci	r31, 0xFE	; 254
    47a4:	81 e0       	ldi	r24, 0x01	; 1
    47a6:	60 e0       	ldi	r22, 0x00	; 0
    47a8:	40 81       	ld	r20, Z
    47aa:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    47ae:	fe 01       	movw	r30, r28
    47b0:	e3 59       	subi	r30, 0x93	; 147
    47b2:	ff 4f       	sbci	r31, 0xFF	; 255
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	a0 ea       	ldi	r26, 0xA0	; 160
    47ba:	b0 e4       	ldi	r27, 0x40	; 64
    47bc:	80 83       	st	Z, r24
    47be:	91 83       	std	Z+1, r25	; 0x01
    47c0:	a2 83       	std	Z+2, r26	; 0x02
    47c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47c4:	8e 01       	movw	r16, r28
    47c6:	07 59       	subi	r16, 0x97	; 151
    47c8:	1f 4f       	sbci	r17, 0xFF	; 255
    47ca:	fe 01       	movw	r30, r28
    47cc:	e3 59       	subi	r30, 0x93	; 147
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	60 81       	ld	r22, Z
    47d2:	71 81       	ldd	r23, Z+1	; 0x01
    47d4:	82 81       	ldd	r24, Z+2	; 0x02
    47d6:	93 81       	ldd	r25, Z+3	; 0x03
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	4a e7       	ldi	r20, 0x7A	; 122
    47de:	55 e4       	ldi	r21, 0x45	; 69
    47e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47e4:	dc 01       	movw	r26, r24
    47e6:	cb 01       	movw	r24, r22
    47e8:	f8 01       	movw	r30, r16
    47ea:	80 83       	st	Z, r24
    47ec:	91 83       	std	Z+1, r25	; 0x01
    47ee:	a2 83       	std	Z+2, r26	; 0x02
    47f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47f2:	fe 01       	movw	r30, r28
    47f4:	e7 59       	subi	r30, 0x97	; 151
    47f6:	ff 4f       	sbci	r31, 0xFF	; 255
    47f8:	60 81       	ld	r22, Z
    47fa:	71 81       	ldd	r23, Z+1	; 0x01
    47fc:	82 81       	ldd	r24, Z+2	; 0x02
    47fe:	93 81       	ldd	r25, Z+3	; 0x03
    4800:	20 e0       	ldi	r18, 0x00	; 0
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	40 e8       	ldi	r20, 0x80	; 128
    4806:	5f e3       	ldi	r21, 0x3F	; 63
    4808:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    480c:	88 23       	and	r24, r24
    480e:	44 f4       	brge	.+16     	; 0x4820 <main+0x1b22>
		__ticks = 1;
    4810:	fe 01       	movw	r30, r28
    4812:	e9 59       	subi	r30, 0x99	; 153
    4814:	ff 4f       	sbci	r31, 0xFF	; 255
    4816:	81 e0       	ldi	r24, 0x01	; 1
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	91 83       	std	Z+1, r25	; 0x01
    481c:	80 83       	st	Z, r24
    481e:	64 c0       	rjmp	.+200    	; 0x48e8 <main+0x1bea>
	else if (__tmp > 65535)
    4820:	fe 01       	movw	r30, r28
    4822:	e7 59       	subi	r30, 0x97	; 151
    4824:	ff 4f       	sbci	r31, 0xFF	; 255
    4826:	60 81       	ld	r22, Z
    4828:	71 81       	ldd	r23, Z+1	; 0x01
    482a:	82 81       	ldd	r24, Z+2	; 0x02
    482c:	93 81       	ldd	r25, Z+3	; 0x03
    482e:	20 e0       	ldi	r18, 0x00	; 0
    4830:	3f ef       	ldi	r19, 0xFF	; 255
    4832:	4f e7       	ldi	r20, 0x7F	; 127
    4834:	57 e4       	ldi	r21, 0x47	; 71
    4836:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    483a:	18 16       	cp	r1, r24
    483c:	0c f0       	brlt	.+2      	; 0x4840 <main+0x1b42>
    483e:	43 c0       	rjmp	.+134    	; 0x48c6 <main+0x1bc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4840:	fe 01       	movw	r30, r28
    4842:	e3 59       	subi	r30, 0x93	; 147
    4844:	ff 4f       	sbci	r31, 0xFF	; 255
    4846:	60 81       	ld	r22, Z
    4848:	71 81       	ldd	r23, Z+1	; 0x01
    484a:	82 81       	ldd	r24, Z+2	; 0x02
    484c:	93 81       	ldd	r25, Z+3	; 0x03
    484e:	20 e0       	ldi	r18, 0x00	; 0
    4850:	30 e0       	ldi	r19, 0x00	; 0
    4852:	40 e2       	ldi	r20, 0x20	; 32
    4854:	51 e4       	ldi	r21, 0x41	; 65
    4856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    485a:	dc 01       	movw	r26, r24
    485c:	cb 01       	movw	r24, r22
    485e:	8e 01       	movw	r16, r28
    4860:	09 59       	subi	r16, 0x99	; 153
    4862:	1f 4f       	sbci	r17, 0xFF	; 255
    4864:	bc 01       	movw	r22, r24
    4866:	cd 01       	movw	r24, r26
    4868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    486c:	dc 01       	movw	r26, r24
    486e:	cb 01       	movw	r24, r22
    4870:	f8 01       	movw	r30, r16
    4872:	91 83       	std	Z+1, r25	; 0x01
    4874:	80 83       	st	Z, r24
    4876:	1f c0       	rjmp	.+62     	; 0x48b6 <main+0x1bb8>
    4878:	fe 01       	movw	r30, r28
    487a:	eb 59       	subi	r30, 0x9B	; 155
    487c:	ff 4f       	sbci	r31, 0xFF	; 255
    487e:	80 e9       	ldi	r24, 0x90	; 144
    4880:	91 e0       	ldi	r25, 0x01	; 1
    4882:	91 83       	std	Z+1, r25	; 0x01
    4884:	80 83       	st	Z, r24
    4886:	fe 01       	movw	r30, r28
    4888:	eb 59       	subi	r30, 0x9B	; 155
    488a:	ff 4f       	sbci	r31, 0xFF	; 255
    488c:	80 81       	ld	r24, Z
    488e:	91 81       	ldd	r25, Z+1	; 0x01
    4890:	01 97       	sbiw	r24, 0x01	; 1
    4892:	f1 f7       	brne	.-4      	; 0x4890 <main+0x1b92>
    4894:	fe 01       	movw	r30, r28
    4896:	eb 59       	subi	r30, 0x9B	; 155
    4898:	ff 4f       	sbci	r31, 0xFF	; 255
    489a:	91 83       	std	Z+1, r25	; 0x01
    489c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    489e:	de 01       	movw	r26, r28
    48a0:	a9 59       	subi	r26, 0x99	; 153
    48a2:	bf 4f       	sbci	r27, 0xFF	; 255
    48a4:	fe 01       	movw	r30, r28
    48a6:	e9 59       	subi	r30, 0x99	; 153
    48a8:	ff 4f       	sbci	r31, 0xFF	; 255
    48aa:	80 81       	ld	r24, Z
    48ac:	91 81       	ldd	r25, Z+1	; 0x01
    48ae:	01 97       	sbiw	r24, 0x01	; 1
    48b0:	11 96       	adiw	r26, 0x01	; 1
    48b2:	9c 93       	st	X, r25
    48b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48b6:	fe 01       	movw	r30, r28
    48b8:	e9 59       	subi	r30, 0x99	; 153
    48ba:	ff 4f       	sbci	r31, 0xFF	; 255
    48bc:	80 81       	ld	r24, Z
    48be:	91 81       	ldd	r25, Z+1	; 0x01
    48c0:	00 97       	sbiw	r24, 0x00	; 0
    48c2:	d1 f6       	brne	.-76     	; 0x4878 <main+0x1b7a>
    48c4:	27 c0       	rjmp	.+78     	; 0x4914 <main+0x1c16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48c6:	8e 01       	movw	r16, r28
    48c8:	09 59       	subi	r16, 0x99	; 153
    48ca:	1f 4f       	sbci	r17, 0xFF	; 255
    48cc:	fe 01       	movw	r30, r28
    48ce:	e7 59       	subi	r30, 0x97	; 151
    48d0:	ff 4f       	sbci	r31, 0xFF	; 255
    48d2:	60 81       	ld	r22, Z
    48d4:	71 81       	ldd	r23, Z+1	; 0x01
    48d6:	82 81       	ldd	r24, Z+2	; 0x02
    48d8:	93 81       	ldd	r25, Z+3	; 0x03
    48da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48de:	dc 01       	movw	r26, r24
    48e0:	cb 01       	movw	r24, r22
    48e2:	f8 01       	movw	r30, r16
    48e4:	91 83       	std	Z+1, r25	; 0x01
    48e6:	80 83       	st	Z, r24
    48e8:	de 01       	movw	r26, r28
    48ea:	ad 59       	subi	r26, 0x9D	; 157
    48ec:	bf 4f       	sbci	r27, 0xFF	; 255
    48ee:	fe 01       	movw	r30, r28
    48f0:	e9 59       	subi	r30, 0x99	; 153
    48f2:	ff 4f       	sbci	r31, 0xFF	; 255
    48f4:	80 81       	ld	r24, Z
    48f6:	91 81       	ldd	r25, Z+1	; 0x01
    48f8:	8d 93       	st	X+, r24
    48fa:	9c 93       	st	X, r25
    48fc:	fe 01       	movw	r30, r28
    48fe:	ed 59       	subi	r30, 0x9D	; 157
    4900:	ff 4f       	sbci	r31, 0xFF	; 255
    4902:	80 81       	ld	r24, Z
    4904:	91 81       	ldd	r25, Z+1	; 0x01
    4906:	01 97       	sbiw	r24, 0x01	; 1
    4908:	f1 f7       	brne	.-4      	; 0x4906 <main+0x1c08>
    490a:	fe 01       	movw	r30, r28
    490c:	ed 59       	subi	r30, 0x9D	; 157
    490e:	ff 4f       	sbci	r31, 0xFF	; 255
    4910:	91 83       	std	Z+1, r25	; 0x01
    4912:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_u8SetPinValue(PIN1,DIO_PORTB,HIGH);
    4914:	81 e0       	ldi	r24, 0x01	; 1
    4916:	61 e0       	ldi	r22, 0x01	; 1
    4918:	41 e0       	ldi	r20, 0x01	; 1
    491a:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,LOW);
    491e:	82 e0       	ldi	r24, 0x02	; 2
    4920:	61 e0       	ldi	r22, 0x01	; 1
    4922:	40 e0       	ldi	r20, 0x00	; 0
    4924:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,units);
    4928:	fe 01       	movw	r30, r28
    492a:	eb 5b       	subi	r30, 0xBB	; 187
    492c:	fe 4f       	sbci	r31, 0xFE	; 254
    492e:	81 e0       	ldi	r24, 0x01	; 1
    4930:	60 e0       	ldi	r22, 0x00	; 0
    4932:	40 81       	ld	r20, Z
    4934:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    4938:	fe 01       	movw	r30, r28
    493a:	e1 5a       	subi	r30, 0xA1	; 161
    493c:	ff 4f       	sbci	r31, 0xFF	; 255
    493e:	80 e0       	ldi	r24, 0x00	; 0
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	a0 ea       	ldi	r26, 0xA0	; 160
    4944:	b0 e4       	ldi	r27, 0x40	; 64
    4946:	80 83       	st	Z, r24
    4948:	91 83       	std	Z+1, r25	; 0x01
    494a:	a2 83       	std	Z+2, r26	; 0x02
    494c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    494e:	8e 01       	movw	r16, r28
    4950:	05 5a       	subi	r16, 0xA5	; 165
    4952:	1f 4f       	sbci	r17, 0xFF	; 255
    4954:	fe 01       	movw	r30, r28
    4956:	e1 5a       	subi	r30, 0xA1	; 161
    4958:	ff 4f       	sbci	r31, 0xFF	; 255
    495a:	60 81       	ld	r22, Z
    495c:	71 81       	ldd	r23, Z+1	; 0x01
    495e:	82 81       	ldd	r24, Z+2	; 0x02
    4960:	93 81       	ldd	r25, Z+3	; 0x03
    4962:	20 e0       	ldi	r18, 0x00	; 0
    4964:	30 e0       	ldi	r19, 0x00	; 0
    4966:	4a e7       	ldi	r20, 0x7A	; 122
    4968:	55 e4       	ldi	r21, 0x45	; 69
    496a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    496e:	dc 01       	movw	r26, r24
    4970:	cb 01       	movw	r24, r22
    4972:	f8 01       	movw	r30, r16
    4974:	80 83       	st	Z, r24
    4976:	91 83       	std	Z+1, r25	; 0x01
    4978:	a2 83       	std	Z+2, r26	; 0x02
    497a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    497c:	fe 01       	movw	r30, r28
    497e:	e5 5a       	subi	r30, 0xA5	; 165
    4980:	ff 4f       	sbci	r31, 0xFF	; 255
    4982:	60 81       	ld	r22, Z
    4984:	71 81       	ldd	r23, Z+1	; 0x01
    4986:	82 81       	ldd	r24, Z+2	; 0x02
    4988:	93 81       	ldd	r25, Z+3	; 0x03
    498a:	20 e0       	ldi	r18, 0x00	; 0
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	40 e8       	ldi	r20, 0x80	; 128
    4990:	5f e3       	ldi	r21, 0x3F	; 63
    4992:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4996:	88 23       	and	r24, r24
    4998:	44 f4       	brge	.+16     	; 0x49aa <main+0x1cac>
		__ticks = 1;
    499a:	fe 01       	movw	r30, r28
    499c:	e7 5a       	subi	r30, 0xA7	; 167
    499e:	ff 4f       	sbci	r31, 0xFF	; 255
    49a0:	81 e0       	ldi	r24, 0x01	; 1
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	91 83       	std	Z+1, r25	; 0x01
    49a6:	80 83       	st	Z, r24
    49a8:	64 c0       	rjmp	.+200    	; 0x4a72 <main+0x1d74>
	else if (__tmp > 65535)
    49aa:	fe 01       	movw	r30, r28
    49ac:	e5 5a       	subi	r30, 0xA5	; 165
    49ae:	ff 4f       	sbci	r31, 0xFF	; 255
    49b0:	60 81       	ld	r22, Z
    49b2:	71 81       	ldd	r23, Z+1	; 0x01
    49b4:	82 81       	ldd	r24, Z+2	; 0x02
    49b6:	93 81       	ldd	r25, Z+3	; 0x03
    49b8:	20 e0       	ldi	r18, 0x00	; 0
    49ba:	3f ef       	ldi	r19, 0xFF	; 255
    49bc:	4f e7       	ldi	r20, 0x7F	; 127
    49be:	57 e4       	ldi	r21, 0x47	; 71
    49c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49c4:	18 16       	cp	r1, r24
    49c6:	0c f0       	brlt	.+2      	; 0x49ca <main+0x1ccc>
    49c8:	43 c0       	rjmp	.+134    	; 0x4a50 <main+0x1d52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49ca:	fe 01       	movw	r30, r28
    49cc:	e1 5a       	subi	r30, 0xA1	; 161
    49ce:	ff 4f       	sbci	r31, 0xFF	; 255
    49d0:	60 81       	ld	r22, Z
    49d2:	71 81       	ldd	r23, Z+1	; 0x01
    49d4:	82 81       	ldd	r24, Z+2	; 0x02
    49d6:	93 81       	ldd	r25, Z+3	; 0x03
    49d8:	20 e0       	ldi	r18, 0x00	; 0
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	40 e2       	ldi	r20, 0x20	; 32
    49de:	51 e4       	ldi	r21, 0x41	; 65
    49e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49e4:	dc 01       	movw	r26, r24
    49e6:	cb 01       	movw	r24, r22
    49e8:	8e 01       	movw	r16, r28
    49ea:	07 5a       	subi	r16, 0xA7	; 167
    49ec:	1f 4f       	sbci	r17, 0xFF	; 255
    49ee:	bc 01       	movw	r22, r24
    49f0:	cd 01       	movw	r24, r26
    49f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49f6:	dc 01       	movw	r26, r24
    49f8:	cb 01       	movw	r24, r22
    49fa:	f8 01       	movw	r30, r16
    49fc:	91 83       	std	Z+1, r25	; 0x01
    49fe:	80 83       	st	Z, r24
    4a00:	1f c0       	rjmp	.+62     	; 0x4a40 <main+0x1d42>
    4a02:	fe 01       	movw	r30, r28
    4a04:	e9 5a       	subi	r30, 0xA9	; 169
    4a06:	ff 4f       	sbci	r31, 0xFF	; 255
    4a08:	80 e9       	ldi	r24, 0x90	; 144
    4a0a:	91 e0       	ldi	r25, 0x01	; 1
    4a0c:	91 83       	std	Z+1, r25	; 0x01
    4a0e:	80 83       	st	Z, r24
    4a10:	fe 01       	movw	r30, r28
    4a12:	e9 5a       	subi	r30, 0xA9	; 169
    4a14:	ff 4f       	sbci	r31, 0xFF	; 255
    4a16:	80 81       	ld	r24, Z
    4a18:	91 81       	ldd	r25, Z+1	; 0x01
    4a1a:	01 97       	sbiw	r24, 0x01	; 1
    4a1c:	f1 f7       	brne	.-4      	; 0x4a1a <main+0x1d1c>
    4a1e:	fe 01       	movw	r30, r28
    4a20:	e9 5a       	subi	r30, 0xA9	; 169
    4a22:	ff 4f       	sbci	r31, 0xFF	; 255
    4a24:	91 83       	std	Z+1, r25	; 0x01
    4a26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a28:	de 01       	movw	r26, r28
    4a2a:	a7 5a       	subi	r26, 0xA7	; 167
    4a2c:	bf 4f       	sbci	r27, 0xFF	; 255
    4a2e:	fe 01       	movw	r30, r28
    4a30:	e7 5a       	subi	r30, 0xA7	; 167
    4a32:	ff 4f       	sbci	r31, 0xFF	; 255
    4a34:	80 81       	ld	r24, Z
    4a36:	91 81       	ldd	r25, Z+1	; 0x01
    4a38:	01 97       	sbiw	r24, 0x01	; 1
    4a3a:	11 96       	adiw	r26, 0x01	; 1
    4a3c:	9c 93       	st	X, r25
    4a3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a40:	fe 01       	movw	r30, r28
    4a42:	e7 5a       	subi	r30, 0xA7	; 167
    4a44:	ff 4f       	sbci	r31, 0xFF	; 255
    4a46:	80 81       	ld	r24, Z
    4a48:	91 81       	ldd	r25, Z+1	; 0x01
    4a4a:	00 97       	sbiw	r24, 0x00	; 0
    4a4c:	d1 f6       	brne	.-76     	; 0x4a02 <main+0x1d04>
    4a4e:	27 c0       	rjmp	.+78     	; 0x4a9e <main+0x1da0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a50:	8e 01       	movw	r16, r28
    4a52:	07 5a       	subi	r16, 0xA7	; 167
    4a54:	1f 4f       	sbci	r17, 0xFF	; 255
    4a56:	fe 01       	movw	r30, r28
    4a58:	e5 5a       	subi	r30, 0xA5	; 165
    4a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5c:	60 81       	ld	r22, Z
    4a5e:	71 81       	ldd	r23, Z+1	; 0x01
    4a60:	82 81       	ldd	r24, Z+2	; 0x02
    4a62:	93 81       	ldd	r25, Z+3	; 0x03
    4a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a68:	dc 01       	movw	r26, r24
    4a6a:	cb 01       	movw	r24, r22
    4a6c:	f8 01       	movw	r30, r16
    4a6e:	91 83       	std	Z+1, r25	; 0x01
    4a70:	80 83       	st	Z, r24
    4a72:	de 01       	movw	r26, r28
    4a74:	ab 5a       	subi	r26, 0xAB	; 171
    4a76:	bf 4f       	sbci	r27, 0xFF	; 255
    4a78:	fe 01       	movw	r30, r28
    4a7a:	e7 5a       	subi	r30, 0xA7	; 167
    4a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a7e:	80 81       	ld	r24, Z
    4a80:	91 81       	ldd	r25, Z+1	; 0x01
    4a82:	8d 93       	st	X+, r24
    4a84:	9c 93       	st	X, r25
    4a86:	fe 01       	movw	r30, r28
    4a88:	eb 5a       	subi	r30, 0xAB	; 171
    4a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a8c:	80 81       	ld	r24, Z
    4a8e:	91 81       	ldd	r25, Z+1	; 0x01
    4a90:	01 97       	sbiw	r24, 0x01	; 1
    4a92:	f1 f7       	brne	.-4      	; 0x4a90 <main+0x1d92>
    4a94:	fe 01       	movw	r30, r28
    4a96:	eb 5a       	subi	r30, 0xAB	; 171
    4a98:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9a:	91 83       	std	Z+1, r25	; 0x01
    4a9c:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_u8SetPinValue(PIN1,DIO_PORTB,LOW);
    4a9e:	81 e0       	ldi	r24, 0x01	; 1
    4aa0:	61 e0       	ldi	r22, 0x01	; 1
    4aa2:	40 e0       	ldi	r20, 0x00	; 0
    4aa4:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,HIGH);
    4aa8:	82 e0       	ldi	r24, 0x02	; 2
    4aaa:	61 e0       	ldi	r22, 0x01	; 1
    4aac:	41 e0       	ldi	r20, 0x01	; 1
    4aae:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,tenth);
    4ab2:	fe 01       	movw	r30, r28
    4ab4:	ea 5b       	subi	r30, 0xBA	; 186
    4ab6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ab8:	81 e0       	ldi	r24, 0x01	; 1
    4aba:	60 e0       	ldi	r22, 0x00	; 0
    4abc:	40 81       	ld	r20, Z
    4abe:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    4ac2:	fe 01       	movw	r30, r28
    4ac4:	ef 5a       	subi	r30, 0xAF	; 175
    4ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac8:	80 e0       	ldi	r24, 0x00	; 0
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	a0 ea       	ldi	r26, 0xA0	; 160
    4ace:	b0 e4       	ldi	r27, 0x40	; 64
    4ad0:	80 83       	st	Z, r24
    4ad2:	91 83       	std	Z+1, r25	; 0x01
    4ad4:	a2 83       	std	Z+2, r26	; 0x02
    4ad6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ad8:	8e 01       	movw	r16, r28
    4ada:	03 5b       	subi	r16, 0xB3	; 179
    4adc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ade:	fe 01       	movw	r30, r28
    4ae0:	ef 5a       	subi	r30, 0xAF	; 175
    4ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae4:	60 81       	ld	r22, Z
    4ae6:	71 81       	ldd	r23, Z+1	; 0x01
    4ae8:	82 81       	ldd	r24, Z+2	; 0x02
    4aea:	93 81       	ldd	r25, Z+3	; 0x03
    4aec:	20 e0       	ldi	r18, 0x00	; 0
    4aee:	30 e0       	ldi	r19, 0x00	; 0
    4af0:	4a e7       	ldi	r20, 0x7A	; 122
    4af2:	55 e4       	ldi	r21, 0x45	; 69
    4af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af8:	dc 01       	movw	r26, r24
    4afa:	cb 01       	movw	r24, r22
    4afc:	f8 01       	movw	r30, r16
    4afe:	80 83       	st	Z, r24
    4b00:	91 83       	std	Z+1, r25	; 0x01
    4b02:	a2 83       	std	Z+2, r26	; 0x02
    4b04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b06:	fe 01       	movw	r30, r28
    4b08:	e3 5b       	subi	r30, 0xB3	; 179
    4b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0c:	60 81       	ld	r22, Z
    4b0e:	71 81       	ldd	r23, Z+1	; 0x01
    4b10:	82 81       	ldd	r24, Z+2	; 0x02
    4b12:	93 81       	ldd	r25, Z+3	; 0x03
    4b14:	20 e0       	ldi	r18, 0x00	; 0
    4b16:	30 e0       	ldi	r19, 0x00	; 0
    4b18:	40 e8       	ldi	r20, 0x80	; 128
    4b1a:	5f e3       	ldi	r21, 0x3F	; 63
    4b1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b20:	88 23       	and	r24, r24
    4b22:	44 f4       	brge	.+16     	; 0x4b34 <main+0x1e36>
		__ticks = 1;
    4b24:	fe 01       	movw	r30, r28
    4b26:	e5 5b       	subi	r30, 0xB5	; 181
    4b28:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2a:	81 e0       	ldi	r24, 0x01	; 1
    4b2c:	90 e0       	ldi	r25, 0x00	; 0
    4b2e:	91 83       	std	Z+1, r25	; 0x01
    4b30:	80 83       	st	Z, r24
    4b32:	64 c0       	rjmp	.+200    	; 0x4bfc <main+0x1efe>
	else if (__tmp > 65535)
    4b34:	fe 01       	movw	r30, r28
    4b36:	e3 5b       	subi	r30, 0xB3	; 179
    4b38:	ff 4f       	sbci	r31, 0xFF	; 255
    4b3a:	60 81       	ld	r22, Z
    4b3c:	71 81       	ldd	r23, Z+1	; 0x01
    4b3e:	82 81       	ldd	r24, Z+2	; 0x02
    4b40:	93 81       	ldd	r25, Z+3	; 0x03
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	3f ef       	ldi	r19, 0xFF	; 255
    4b46:	4f e7       	ldi	r20, 0x7F	; 127
    4b48:	57 e4       	ldi	r21, 0x47	; 71
    4b4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b4e:	18 16       	cp	r1, r24
    4b50:	0c f0       	brlt	.+2      	; 0x4b54 <main+0x1e56>
    4b52:	43 c0       	rjmp	.+134    	; 0x4bda <main+0x1edc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b54:	fe 01       	movw	r30, r28
    4b56:	ef 5a       	subi	r30, 0xAF	; 175
    4b58:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5a:	60 81       	ld	r22, Z
    4b5c:	71 81       	ldd	r23, Z+1	; 0x01
    4b5e:	82 81       	ldd	r24, Z+2	; 0x02
    4b60:	93 81       	ldd	r25, Z+3	; 0x03
    4b62:	20 e0       	ldi	r18, 0x00	; 0
    4b64:	30 e0       	ldi	r19, 0x00	; 0
    4b66:	40 e2       	ldi	r20, 0x20	; 32
    4b68:	51 e4       	ldi	r21, 0x41	; 65
    4b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b6e:	dc 01       	movw	r26, r24
    4b70:	cb 01       	movw	r24, r22
    4b72:	8e 01       	movw	r16, r28
    4b74:	05 5b       	subi	r16, 0xB5	; 181
    4b76:	1f 4f       	sbci	r17, 0xFF	; 255
    4b78:	bc 01       	movw	r22, r24
    4b7a:	cd 01       	movw	r24, r26
    4b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b80:	dc 01       	movw	r26, r24
    4b82:	cb 01       	movw	r24, r22
    4b84:	f8 01       	movw	r30, r16
    4b86:	91 83       	std	Z+1, r25	; 0x01
    4b88:	80 83       	st	Z, r24
    4b8a:	1f c0       	rjmp	.+62     	; 0x4bca <main+0x1ecc>
    4b8c:	fe 01       	movw	r30, r28
    4b8e:	e7 5b       	subi	r30, 0xB7	; 183
    4b90:	ff 4f       	sbci	r31, 0xFF	; 255
    4b92:	80 e9       	ldi	r24, 0x90	; 144
    4b94:	91 e0       	ldi	r25, 0x01	; 1
    4b96:	91 83       	std	Z+1, r25	; 0x01
    4b98:	80 83       	st	Z, r24
    4b9a:	fe 01       	movw	r30, r28
    4b9c:	e7 5b       	subi	r30, 0xB7	; 183
    4b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba0:	80 81       	ld	r24, Z
    4ba2:	91 81       	ldd	r25, Z+1	; 0x01
    4ba4:	01 97       	sbiw	r24, 0x01	; 1
    4ba6:	f1 f7       	brne	.-4      	; 0x4ba4 <main+0x1ea6>
    4ba8:	fe 01       	movw	r30, r28
    4baa:	e7 5b       	subi	r30, 0xB7	; 183
    4bac:	ff 4f       	sbci	r31, 0xFF	; 255
    4bae:	91 83       	std	Z+1, r25	; 0x01
    4bb0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bb2:	de 01       	movw	r26, r28
    4bb4:	a5 5b       	subi	r26, 0xB5	; 181
    4bb6:	bf 4f       	sbci	r27, 0xFF	; 255
    4bb8:	fe 01       	movw	r30, r28
    4bba:	e5 5b       	subi	r30, 0xB5	; 181
    4bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bbe:	80 81       	ld	r24, Z
    4bc0:	91 81       	ldd	r25, Z+1	; 0x01
    4bc2:	01 97       	sbiw	r24, 0x01	; 1
    4bc4:	11 96       	adiw	r26, 0x01	; 1
    4bc6:	9c 93       	st	X, r25
    4bc8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bca:	fe 01       	movw	r30, r28
    4bcc:	e5 5b       	subi	r30, 0xB5	; 181
    4bce:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd0:	80 81       	ld	r24, Z
    4bd2:	91 81       	ldd	r25, Z+1	; 0x01
    4bd4:	00 97       	sbiw	r24, 0x00	; 0
    4bd6:	d1 f6       	brne	.-76     	; 0x4b8c <main+0x1e8e>
    4bd8:	27 c0       	rjmp	.+78     	; 0x4c28 <main+0x1f2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bda:	8e 01       	movw	r16, r28
    4bdc:	05 5b       	subi	r16, 0xB5	; 181
    4bde:	1f 4f       	sbci	r17, 0xFF	; 255
    4be0:	fe 01       	movw	r30, r28
    4be2:	e3 5b       	subi	r30, 0xB3	; 179
    4be4:	ff 4f       	sbci	r31, 0xFF	; 255
    4be6:	60 81       	ld	r22, Z
    4be8:	71 81       	ldd	r23, Z+1	; 0x01
    4bea:	82 81       	ldd	r24, Z+2	; 0x02
    4bec:	93 81       	ldd	r25, Z+3	; 0x03
    4bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bf2:	dc 01       	movw	r26, r24
    4bf4:	cb 01       	movw	r24, r22
    4bf6:	f8 01       	movw	r30, r16
    4bf8:	91 83       	std	Z+1, r25	; 0x01
    4bfa:	80 83       	st	Z, r24
    4bfc:	de 01       	movw	r26, r28
    4bfe:	a9 5b       	subi	r26, 0xB9	; 185
    4c00:	bf 4f       	sbci	r27, 0xFF	; 255
    4c02:	fe 01       	movw	r30, r28
    4c04:	e5 5b       	subi	r30, 0xB5	; 181
    4c06:	ff 4f       	sbci	r31, 0xFF	; 255
    4c08:	80 81       	ld	r24, Z
    4c0a:	91 81       	ldd	r25, Z+1	; 0x01
    4c0c:	8d 93       	st	X+, r24
    4c0e:	9c 93       	st	X, r25
    4c10:	fe 01       	movw	r30, r28
    4c12:	e9 5b       	subi	r30, 0xB9	; 185
    4c14:	ff 4f       	sbci	r31, 0xFF	; 255
    4c16:	80 81       	ld	r24, Z
    4c18:	91 81       	ldd	r25, Z+1	; 0x01
    4c1a:	01 97       	sbiw	r24, 0x01	; 1
    4c1c:	f1 f7       	brne	.-4      	; 0x4c1a <main+0x1f1c>
    4c1e:	fe 01       	movw	r30, r28
    4c20:	e9 5b       	subi	r30, 0xB9	; 185
    4c22:	ff 4f       	sbci	r31, 0xFF	; 255
    4c24:	91 83       	std	Z+1, r25	; 0x01
    4c26:	80 83       	st	Z, r24
			_delay_ms(5);
			DIO_u8SetPinValue(PIN1,DIO_PORTB,HIGH);
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	61 e0       	ldi	r22, 0x01	; 1
    4c2c:	41 e0       	ldi	r20, 0x01	; 1
    4c2e:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,LOW);
    4c32:	82 e0       	ldi	r24, 0x02	; 2
    4c34:	61 e0       	ldi	r22, 0x01	; 1
    4c36:	40 e0       	ldi	r20, 0x00	; 0
    4c38:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,units);
    4c3c:	fe 01       	movw	r30, r28
    4c3e:	eb 5b       	subi	r30, 0xBB	; 187
    4c40:	fe 4f       	sbci	r31, 0xFE	; 254
    4c42:	81 e0       	ldi	r24, 0x01	; 1
    4c44:	60 e0       	ldi	r22, 0x00	; 0
    4c46:	40 81       	ld	r20, Z
    4c48:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    4c4c:	fe 01       	movw	r30, r28
    4c4e:	ed 5b       	subi	r30, 0xBD	; 189
    4c50:	ff 4f       	sbci	r31, 0xFF	; 255
    4c52:	80 e0       	ldi	r24, 0x00	; 0
    4c54:	90 e0       	ldi	r25, 0x00	; 0
    4c56:	a0 ea       	ldi	r26, 0xA0	; 160
    4c58:	b0 e4       	ldi	r27, 0x40	; 64
    4c5a:	80 83       	st	Z, r24
    4c5c:	91 83       	std	Z+1, r25	; 0x01
    4c5e:	a2 83       	std	Z+2, r26	; 0x02
    4c60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c62:	8e 01       	movw	r16, r28
    4c64:	01 5c       	subi	r16, 0xC1	; 193
    4c66:	1f 4f       	sbci	r17, 0xFF	; 255
    4c68:	fe 01       	movw	r30, r28
    4c6a:	ed 5b       	subi	r30, 0xBD	; 189
    4c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6e:	60 81       	ld	r22, Z
    4c70:	71 81       	ldd	r23, Z+1	; 0x01
    4c72:	82 81       	ldd	r24, Z+2	; 0x02
    4c74:	93 81       	ldd	r25, Z+3	; 0x03
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	4a e7       	ldi	r20, 0x7A	; 122
    4c7c:	55 e4       	ldi	r21, 0x45	; 69
    4c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c82:	dc 01       	movw	r26, r24
    4c84:	cb 01       	movw	r24, r22
    4c86:	f8 01       	movw	r30, r16
    4c88:	80 83       	st	Z, r24
    4c8a:	91 83       	std	Z+1, r25	; 0x01
    4c8c:	a2 83       	std	Z+2, r26	; 0x02
    4c8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c90:	fe 01       	movw	r30, r28
    4c92:	ff 96       	adiw	r30, 0x3f	; 63
    4c94:	60 81       	ld	r22, Z
    4c96:	71 81       	ldd	r23, Z+1	; 0x01
    4c98:	82 81       	ldd	r24, Z+2	; 0x02
    4c9a:	93 81       	ldd	r25, Z+3	; 0x03
    4c9c:	20 e0       	ldi	r18, 0x00	; 0
    4c9e:	30 e0       	ldi	r19, 0x00	; 0
    4ca0:	40 e8       	ldi	r20, 0x80	; 128
    4ca2:	5f e3       	ldi	r21, 0x3F	; 63
    4ca4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ca8:	88 23       	and	r24, r24
    4caa:	2c f4       	brge	.+10     	; 0x4cb6 <main+0x1fb8>
		__ticks = 1;
    4cac:	81 e0       	ldi	r24, 0x01	; 1
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	9e af       	std	Y+62, r25	; 0x3e
    4cb2:	8d af       	std	Y+61, r24	; 0x3d
    4cb4:	46 c0       	rjmp	.+140    	; 0x4d42 <main+0x2044>
	else if (__tmp > 65535)
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	ff 96       	adiw	r30, 0x3f	; 63
    4cba:	60 81       	ld	r22, Z
    4cbc:	71 81       	ldd	r23, Z+1	; 0x01
    4cbe:	82 81       	ldd	r24, Z+2	; 0x02
    4cc0:	93 81       	ldd	r25, Z+3	; 0x03
    4cc2:	20 e0       	ldi	r18, 0x00	; 0
    4cc4:	3f ef       	ldi	r19, 0xFF	; 255
    4cc6:	4f e7       	ldi	r20, 0x7F	; 127
    4cc8:	57 e4       	ldi	r21, 0x47	; 71
    4cca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cce:	18 16       	cp	r1, r24
    4cd0:	64 f5       	brge	.+88     	; 0x4d2a <main+0x202c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cd2:	fe 01       	movw	r30, r28
    4cd4:	ed 5b       	subi	r30, 0xBD	; 189
    4cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd8:	60 81       	ld	r22, Z
    4cda:	71 81       	ldd	r23, Z+1	; 0x01
    4cdc:	82 81       	ldd	r24, Z+2	; 0x02
    4cde:	93 81       	ldd	r25, Z+3	; 0x03
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	40 e2       	ldi	r20, 0x20	; 32
    4ce6:	51 e4       	ldi	r21, 0x41	; 65
    4ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cec:	dc 01       	movw	r26, r24
    4cee:	cb 01       	movw	r24, r22
    4cf0:	bc 01       	movw	r22, r24
    4cf2:	cd 01       	movw	r24, r26
    4cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf8:	dc 01       	movw	r26, r24
    4cfa:	cb 01       	movw	r24, r22
    4cfc:	9e af       	std	Y+62, r25	; 0x3e
    4cfe:	8d af       	std	Y+61, r24	; 0x3d
    4d00:	0f c0       	rjmp	.+30     	; 0x4d20 <main+0x2022>
    4d02:	80 e9       	ldi	r24, 0x90	; 144
    4d04:	91 e0       	ldi	r25, 0x01	; 1
    4d06:	9c af       	std	Y+60, r25	; 0x3c
    4d08:	8b af       	std	Y+59, r24	; 0x3b
    4d0a:	8b ad       	ldd	r24, Y+59	; 0x3b
    4d0c:	9c ad       	ldd	r25, Y+60	; 0x3c
    4d0e:	01 97       	sbiw	r24, 0x01	; 1
    4d10:	f1 f7       	brne	.-4      	; 0x4d0e <main+0x2010>
    4d12:	9c af       	std	Y+60, r25	; 0x3c
    4d14:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d16:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d18:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d1a:	01 97       	sbiw	r24, 0x01	; 1
    4d1c:	9e af       	std	Y+62, r25	; 0x3e
    4d1e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d20:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d22:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d24:	00 97       	sbiw	r24, 0x00	; 0
    4d26:	69 f7       	brne	.-38     	; 0x4d02 <main+0x2004>
    4d28:	16 c0       	rjmp	.+44     	; 0x4d56 <main+0x2058>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d2a:	fe 01       	movw	r30, r28
    4d2c:	ff 96       	adiw	r30, 0x3f	; 63
    4d2e:	60 81       	ld	r22, Z
    4d30:	71 81       	ldd	r23, Z+1	; 0x01
    4d32:	82 81       	ldd	r24, Z+2	; 0x02
    4d34:	93 81       	ldd	r25, Z+3	; 0x03
    4d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d3a:	dc 01       	movw	r26, r24
    4d3c:	cb 01       	movw	r24, r22
    4d3e:	9e af       	std	Y+62, r25	; 0x3e
    4d40:	8d af       	std	Y+61, r24	; 0x3d
    4d42:	8d ad       	ldd	r24, Y+61	; 0x3d
    4d44:	9e ad       	ldd	r25, Y+62	; 0x3e
    4d46:	9a af       	std	Y+58, r25	; 0x3a
    4d48:	89 af       	std	Y+57, r24	; 0x39
    4d4a:	89 ad       	ldd	r24, Y+57	; 0x39
    4d4c:	9a ad       	ldd	r25, Y+58	; 0x3a
    4d4e:	01 97       	sbiw	r24, 0x01	; 1
    4d50:	f1 f7       	brne	.-4      	; 0x4d4e <main+0x2050>
    4d52:	9a af       	std	Y+58, r25	; 0x3a
    4d54:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(5);
			DIO_u8SetPinValue(PIN1,DIO_PORTB,LOW);
    4d56:	81 e0       	ldi	r24, 0x01	; 1
    4d58:	61 e0       	ldi	r22, 0x01	; 1
    4d5a:	40 e0       	ldi	r20, 0x00	; 0
    4d5c:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,HIGH);
    4d60:	82 e0       	ldi	r24, 0x02	; 2
    4d62:	61 e0       	ldi	r22, 0x01	; 1
    4d64:	41 e0       	ldi	r20, 0x01	; 1
    4d66:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,tenth);
    4d6a:	fe 01       	movw	r30, r28
    4d6c:	ea 5b       	subi	r30, 0xBA	; 186
    4d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    4d70:	81 e0       	ldi	r24, 0x01	; 1
    4d72:	60 e0       	ldi	r22, 0x00	; 0
    4d74:	40 81       	ld	r20, Z
    4d76:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    4d7a:	80 e0       	ldi	r24, 0x00	; 0
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	a0 ea       	ldi	r26, 0xA0	; 160
    4d80:	b0 e4       	ldi	r27, 0x40	; 64
    4d82:	8d ab       	std	Y+53, r24	; 0x35
    4d84:	9e ab       	std	Y+54, r25	; 0x36
    4d86:	af ab       	std	Y+55, r26	; 0x37
    4d88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d8a:	6d a9       	ldd	r22, Y+53	; 0x35
    4d8c:	7e a9       	ldd	r23, Y+54	; 0x36
    4d8e:	8f a9       	ldd	r24, Y+55	; 0x37
    4d90:	98 ad       	ldd	r25, Y+56	; 0x38
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	4a e7       	ldi	r20, 0x7A	; 122
    4d98:	55 e4       	ldi	r21, 0x45	; 69
    4d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d9e:	dc 01       	movw	r26, r24
    4da0:	cb 01       	movw	r24, r22
    4da2:	89 ab       	std	Y+49, r24	; 0x31
    4da4:	9a ab       	std	Y+50, r25	; 0x32
    4da6:	ab ab       	std	Y+51, r26	; 0x33
    4da8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4daa:	69 a9       	ldd	r22, Y+49	; 0x31
    4dac:	7a a9       	ldd	r23, Y+50	; 0x32
    4dae:	8b a9       	ldd	r24, Y+51	; 0x33
    4db0:	9c a9       	ldd	r25, Y+52	; 0x34
    4db2:	20 e0       	ldi	r18, 0x00	; 0
    4db4:	30 e0       	ldi	r19, 0x00	; 0
    4db6:	40 e8       	ldi	r20, 0x80	; 128
    4db8:	5f e3       	ldi	r21, 0x3F	; 63
    4dba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4dbe:	88 23       	and	r24, r24
    4dc0:	2c f4       	brge	.+10     	; 0x4dcc <main+0x20ce>
		__ticks = 1;
    4dc2:	81 e0       	ldi	r24, 0x01	; 1
    4dc4:	90 e0       	ldi	r25, 0x00	; 0
    4dc6:	98 ab       	std	Y+48, r25	; 0x30
    4dc8:	8f a7       	std	Y+47, r24	; 0x2f
    4dca:	3f c0       	rjmp	.+126    	; 0x4e4a <main+0x214c>
	else if (__tmp > 65535)
    4dcc:	69 a9       	ldd	r22, Y+49	; 0x31
    4dce:	7a a9       	ldd	r23, Y+50	; 0x32
    4dd0:	8b a9       	ldd	r24, Y+51	; 0x33
    4dd2:	9c a9       	ldd	r25, Y+52	; 0x34
    4dd4:	20 e0       	ldi	r18, 0x00	; 0
    4dd6:	3f ef       	ldi	r19, 0xFF	; 255
    4dd8:	4f e7       	ldi	r20, 0x7F	; 127
    4dda:	57 e4       	ldi	r21, 0x47	; 71
    4ddc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4de0:	18 16       	cp	r1, r24
    4de2:	4c f5       	brge	.+82     	; 0x4e36 <main+0x2138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4de4:	6d a9       	ldd	r22, Y+53	; 0x35
    4de6:	7e a9       	ldd	r23, Y+54	; 0x36
    4de8:	8f a9       	ldd	r24, Y+55	; 0x37
    4dea:	98 ad       	ldd	r25, Y+56	; 0x38
    4dec:	20 e0       	ldi	r18, 0x00	; 0
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	40 e2       	ldi	r20, 0x20	; 32
    4df2:	51 e4       	ldi	r21, 0x41	; 65
    4df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4df8:	dc 01       	movw	r26, r24
    4dfa:	cb 01       	movw	r24, r22
    4dfc:	bc 01       	movw	r22, r24
    4dfe:	cd 01       	movw	r24, r26
    4e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e04:	dc 01       	movw	r26, r24
    4e06:	cb 01       	movw	r24, r22
    4e08:	98 ab       	std	Y+48, r25	; 0x30
    4e0a:	8f a7       	std	Y+47, r24	; 0x2f
    4e0c:	0f c0       	rjmp	.+30     	; 0x4e2c <main+0x212e>
    4e0e:	80 e9       	ldi	r24, 0x90	; 144
    4e10:	91 e0       	ldi	r25, 0x01	; 1
    4e12:	9e a7       	std	Y+46, r25	; 0x2e
    4e14:	8d a7       	std	Y+45, r24	; 0x2d
    4e16:	8d a5       	ldd	r24, Y+45	; 0x2d
    4e18:	9e a5       	ldd	r25, Y+46	; 0x2e
    4e1a:	01 97       	sbiw	r24, 0x01	; 1
    4e1c:	f1 f7       	brne	.-4      	; 0x4e1a <main+0x211c>
    4e1e:	9e a7       	std	Y+46, r25	; 0x2e
    4e20:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e22:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e24:	98 a9       	ldd	r25, Y+48	; 0x30
    4e26:	01 97       	sbiw	r24, 0x01	; 1
    4e28:	98 ab       	std	Y+48, r25	; 0x30
    4e2a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e2e:	98 a9       	ldd	r25, Y+48	; 0x30
    4e30:	00 97       	sbiw	r24, 0x00	; 0
    4e32:	69 f7       	brne	.-38     	; 0x4e0e <main+0x2110>
    4e34:	14 c0       	rjmp	.+40     	; 0x4e5e <main+0x2160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e36:	69 a9       	ldd	r22, Y+49	; 0x31
    4e38:	7a a9       	ldd	r23, Y+50	; 0x32
    4e3a:	8b a9       	ldd	r24, Y+51	; 0x33
    4e3c:	9c a9       	ldd	r25, Y+52	; 0x34
    4e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e42:	dc 01       	movw	r26, r24
    4e44:	cb 01       	movw	r24, r22
    4e46:	98 ab       	std	Y+48, r25	; 0x30
    4e48:	8f a7       	std	Y+47, r24	; 0x2f
    4e4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e4c:	98 a9       	ldd	r25, Y+48	; 0x30
    4e4e:	9c a7       	std	Y+44, r25	; 0x2c
    4e50:	8b a7       	std	Y+43, r24	; 0x2b
    4e52:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e54:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e56:	01 97       	sbiw	r24, 0x01	; 1
    4e58:	f1 f7       	brne	.-4      	; 0x4e56 <main+0x2158>
    4e5a:	9c a7       	std	Y+44, r25	; 0x2c
    4e5c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(5);
			DIO_u8SetPinValue(PIN1,DIO_PORTB,HIGH);
    4e5e:	81 e0       	ldi	r24, 0x01	; 1
    4e60:	61 e0       	ldi	r22, 0x01	; 1
    4e62:	41 e0       	ldi	r20, 0x01	; 1
    4e64:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,LOW);
    4e68:	82 e0       	ldi	r24, 0x02	; 2
    4e6a:	61 e0       	ldi	r22, 0x01	; 1
    4e6c:	40 e0       	ldi	r20, 0x00	; 0
    4e6e:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8Set4PinValue(MSB,DIO_PORTA,units);
    4e72:	fe 01       	movw	r30, r28
    4e74:	eb 5b       	subi	r30, 0xBB	; 187
    4e76:	fe 4f       	sbci	r31, 0xFE	; 254
    4e78:	81 e0       	ldi	r24, 0x01	; 1
    4e7a:	60 e0       	ldi	r22, 0x00	; 0
    4e7c:	40 81       	ld	r20, Z
    4e7e:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_u8Set4PinValue>
    4e82:	80 e0       	ldi	r24, 0x00	; 0
    4e84:	90 e0       	ldi	r25, 0x00	; 0
    4e86:	a0 ea       	ldi	r26, 0xA0	; 160
    4e88:	b0 e4       	ldi	r27, 0x40	; 64
    4e8a:	8f a3       	std	Y+39, r24	; 0x27
    4e8c:	98 a7       	std	Y+40, r25	; 0x28
    4e8e:	a9 a7       	std	Y+41, r26	; 0x29
    4e90:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e92:	6f a1       	ldd	r22, Y+39	; 0x27
    4e94:	78 a5       	ldd	r23, Y+40	; 0x28
    4e96:	89 a5       	ldd	r24, Y+41	; 0x29
    4e98:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e9a:	20 e0       	ldi	r18, 0x00	; 0
    4e9c:	30 e0       	ldi	r19, 0x00	; 0
    4e9e:	4a e7       	ldi	r20, 0x7A	; 122
    4ea0:	55 e4       	ldi	r21, 0x45	; 69
    4ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ea6:	dc 01       	movw	r26, r24
    4ea8:	cb 01       	movw	r24, r22
    4eaa:	8b a3       	std	Y+35, r24	; 0x23
    4eac:	9c a3       	std	Y+36, r25	; 0x24
    4eae:	ad a3       	std	Y+37, r26	; 0x25
    4eb0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4eb2:	6b a1       	ldd	r22, Y+35	; 0x23
    4eb4:	7c a1       	ldd	r23, Y+36	; 0x24
    4eb6:	8d a1       	ldd	r24, Y+37	; 0x25
    4eb8:	9e a1       	ldd	r25, Y+38	; 0x26
    4eba:	20 e0       	ldi	r18, 0x00	; 0
    4ebc:	30 e0       	ldi	r19, 0x00	; 0
    4ebe:	40 e8       	ldi	r20, 0x80	; 128
    4ec0:	5f e3       	ldi	r21, 0x3F	; 63
    4ec2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ec6:	88 23       	and	r24, r24
    4ec8:	2c f4       	brge	.+10     	; 0x4ed4 <main+0x21d6>
		__ticks = 1;
    4eca:	81 e0       	ldi	r24, 0x01	; 1
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	9a a3       	std	Y+34, r25	; 0x22
    4ed0:	89 a3       	std	Y+33, r24	; 0x21
    4ed2:	3f c0       	rjmp	.+126    	; 0x4f52 <main+0x2254>
	else if (__tmp > 65535)
    4ed4:	6b a1       	ldd	r22, Y+35	; 0x23
    4ed6:	7c a1       	ldd	r23, Y+36	; 0x24
    4ed8:	8d a1       	ldd	r24, Y+37	; 0x25
    4eda:	9e a1       	ldd	r25, Y+38	; 0x26
    4edc:	20 e0       	ldi	r18, 0x00	; 0
    4ede:	3f ef       	ldi	r19, 0xFF	; 255
    4ee0:	4f e7       	ldi	r20, 0x7F	; 127
    4ee2:	57 e4       	ldi	r21, 0x47	; 71
    4ee4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ee8:	18 16       	cp	r1, r24
    4eea:	4c f5       	brge	.+82     	; 0x4f3e <main+0x2240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eec:	6f a1       	ldd	r22, Y+39	; 0x27
    4eee:	78 a5       	ldd	r23, Y+40	; 0x28
    4ef0:	89 a5       	ldd	r24, Y+41	; 0x29
    4ef2:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	40 e2       	ldi	r20, 0x20	; 32
    4efa:	51 e4       	ldi	r21, 0x41	; 65
    4efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f00:	dc 01       	movw	r26, r24
    4f02:	cb 01       	movw	r24, r22
    4f04:	bc 01       	movw	r22, r24
    4f06:	cd 01       	movw	r24, r26
    4f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f0c:	dc 01       	movw	r26, r24
    4f0e:	cb 01       	movw	r24, r22
    4f10:	9a a3       	std	Y+34, r25	; 0x22
    4f12:	89 a3       	std	Y+33, r24	; 0x21
    4f14:	0f c0       	rjmp	.+30     	; 0x4f34 <main+0x2236>
    4f16:	80 e9       	ldi	r24, 0x90	; 144
    4f18:	91 e0       	ldi	r25, 0x01	; 1
    4f1a:	98 a3       	std	Y+32, r25	; 0x20
    4f1c:	8f 8f       	std	Y+31, r24	; 0x1f
    4f1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f20:	98 a1       	ldd	r25, Y+32	; 0x20
    4f22:	01 97       	sbiw	r24, 0x01	; 1
    4f24:	f1 f7       	brne	.-4      	; 0x4f22 <main+0x2224>
    4f26:	98 a3       	std	Y+32, r25	; 0x20
    4f28:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f2a:	89 a1       	ldd	r24, Y+33	; 0x21
    4f2c:	9a a1       	ldd	r25, Y+34	; 0x22
    4f2e:	01 97       	sbiw	r24, 0x01	; 1
    4f30:	9a a3       	std	Y+34, r25	; 0x22
    4f32:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f34:	89 a1       	ldd	r24, Y+33	; 0x21
    4f36:	9a a1       	ldd	r25, Y+34	; 0x22
    4f38:	00 97       	sbiw	r24, 0x00	; 0
    4f3a:	69 f7       	brne	.-38     	; 0x4f16 <main+0x2218>
    4f3c:	14 c0       	rjmp	.+40     	; 0x4f66 <main+0x2268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f3e:	6b a1       	ldd	r22, Y+35	; 0x23
    4f40:	7c a1       	ldd	r23, Y+36	; 0x24
    4f42:	8d a1       	ldd	r24, Y+37	; 0x25
    4f44:	9e a1       	ldd	r25, Y+38	; 0x26
    4f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f4a:	dc 01       	movw	r26, r24
    4f4c:	cb 01       	movw	r24, r22
    4f4e:	9a a3       	std	Y+34, r25	; 0x22
    4f50:	89 a3       	std	Y+33, r24	; 0x21
    4f52:	89 a1       	ldd	r24, Y+33	; 0x21
    4f54:	9a a1       	ldd	r25, Y+34	; 0x22
    4f56:	9e 8f       	std	Y+30, r25	; 0x1e
    4f58:	8d 8f       	std	Y+29, r24	; 0x1d
    4f5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f5e:	01 97       	sbiw	r24, 0x01	; 1
    4f60:	f1 f7       	brne	.-4      	; 0x4f5e <main+0x2260>
    4f62:	9e 8f       	std	Y+30, r25	; 0x1e
    4f64:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(5);

			//test to inc or dec the set temp.
			DIO_u8GetPinValue(PIN6,DIO_PORTD,&inc);
    4f66:	9e 01       	movw	r18, r28
    4f68:	29 5b       	subi	r18, 0xB9	; 185
    4f6a:	3e 4f       	sbci	r19, 0xFE	; 254
    4f6c:	86 e0       	ldi	r24, 0x06	; 6
    4f6e:	63 e0       	ldi	r22, 0x03	; 3
    4f70:	a9 01       	movw	r20, r18
    4f72:	0e 94 05 09 	call	0x120a	; 0x120a <DIO_u8GetPinValue>
			DIO_u8GetPinValue(PIN0,DIO_PORTB,&dec);
    4f76:	9e 01       	movw	r18, r28
    4f78:	28 5b       	subi	r18, 0xB8	; 184
    4f7a:	3e 4f       	sbci	r19, 0xFE	; 254
    4f7c:	80 e0       	ldi	r24, 0x00	; 0
    4f7e:	61 e0       	ldi	r22, 0x01	; 1
    4f80:	a9 01       	movw	r20, r18
    4f82:	0e 94 05 09 	call	0x120a	; 0x120a <DIO_u8GetPinValue>
			if(inc){if(set_temp<75){set_temp+=5;}_delay_ms(150);Set_mode_count = 0;inc = 0;}
    4f86:	fe 01       	movw	r30, r28
    4f88:	e9 5b       	subi	r30, 0xB9	; 185
    4f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    4f8c:	80 81       	ld	r24, Z
    4f8e:	88 23       	and	r24, r24
    4f90:	09 f4       	brne	.+2      	; 0x4f94 <main+0x2296>
    4f92:	83 c0       	rjmp	.+262    	; 0x509a <main+0x239c>
    4f94:	80 91 68 00 	lds	r24, 0x0068
    4f98:	8b 34       	cpi	r24, 0x4B	; 75
    4f9a:	28 f4       	brcc	.+10     	; 0x4fa6 <main+0x22a8>
    4f9c:	80 91 68 00 	lds	r24, 0x0068
    4fa0:	8b 5f       	subi	r24, 0xFB	; 251
    4fa2:	80 93 68 00 	sts	0x0068, r24
    4fa6:	80 e0       	ldi	r24, 0x00	; 0
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	a6 e1       	ldi	r26, 0x16	; 22
    4fac:	b3 e4       	ldi	r27, 0x43	; 67
    4fae:	89 8f       	std	Y+25, r24	; 0x19
    4fb0:	9a 8f       	std	Y+26, r25	; 0x1a
    4fb2:	ab 8f       	std	Y+27, r26	; 0x1b
    4fb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fb6:	69 8d       	ldd	r22, Y+25	; 0x19
    4fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fbe:	20 e0       	ldi	r18, 0x00	; 0
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	4a e7       	ldi	r20, 0x7A	; 122
    4fc4:	55 e4       	ldi	r21, 0x45	; 69
    4fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fca:	dc 01       	movw	r26, r24
    4fcc:	cb 01       	movw	r24, r22
    4fce:	8d 8b       	std	Y+21, r24	; 0x15
    4fd0:	9e 8b       	std	Y+22, r25	; 0x16
    4fd2:	af 8b       	std	Y+23, r26	; 0x17
    4fd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4fd6:	6d 89       	ldd	r22, Y+21	; 0x15
    4fd8:	7e 89       	ldd	r23, Y+22	; 0x16
    4fda:	8f 89       	ldd	r24, Y+23	; 0x17
    4fdc:	98 8d       	ldd	r25, Y+24	; 0x18
    4fde:	20 e0       	ldi	r18, 0x00	; 0
    4fe0:	30 e0       	ldi	r19, 0x00	; 0
    4fe2:	40 e8       	ldi	r20, 0x80	; 128
    4fe4:	5f e3       	ldi	r21, 0x3F	; 63
    4fe6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fea:	88 23       	and	r24, r24
    4fec:	2c f4       	brge	.+10     	; 0x4ff8 <main+0x22fa>
		__ticks = 1;
    4fee:	81 e0       	ldi	r24, 0x01	; 1
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	9c 8b       	std	Y+20, r25	; 0x14
    4ff4:	8b 8b       	std	Y+19, r24	; 0x13
    4ff6:	3f c0       	rjmp	.+126    	; 0x5076 <main+0x2378>
	else if (__tmp > 65535)
    4ff8:	6d 89       	ldd	r22, Y+21	; 0x15
    4ffa:	7e 89       	ldd	r23, Y+22	; 0x16
    4ffc:	8f 89       	ldd	r24, Y+23	; 0x17
    4ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    5000:	20 e0       	ldi	r18, 0x00	; 0
    5002:	3f ef       	ldi	r19, 0xFF	; 255
    5004:	4f e7       	ldi	r20, 0x7F	; 127
    5006:	57 e4       	ldi	r21, 0x47	; 71
    5008:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    500c:	18 16       	cp	r1, r24
    500e:	4c f5       	brge	.+82     	; 0x5062 <main+0x2364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5010:	69 8d       	ldd	r22, Y+25	; 0x19
    5012:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5014:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5016:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5018:	20 e0       	ldi	r18, 0x00	; 0
    501a:	30 e0       	ldi	r19, 0x00	; 0
    501c:	40 e2       	ldi	r20, 0x20	; 32
    501e:	51 e4       	ldi	r21, 0x41	; 65
    5020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5024:	dc 01       	movw	r26, r24
    5026:	cb 01       	movw	r24, r22
    5028:	bc 01       	movw	r22, r24
    502a:	cd 01       	movw	r24, r26
    502c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5030:	dc 01       	movw	r26, r24
    5032:	cb 01       	movw	r24, r22
    5034:	9c 8b       	std	Y+20, r25	; 0x14
    5036:	8b 8b       	std	Y+19, r24	; 0x13
    5038:	0f c0       	rjmp	.+30     	; 0x5058 <main+0x235a>
    503a:	80 e9       	ldi	r24, 0x90	; 144
    503c:	91 e0       	ldi	r25, 0x01	; 1
    503e:	9a 8b       	std	Y+18, r25	; 0x12
    5040:	89 8b       	std	Y+17, r24	; 0x11
    5042:	89 89       	ldd	r24, Y+17	; 0x11
    5044:	9a 89       	ldd	r25, Y+18	; 0x12
    5046:	01 97       	sbiw	r24, 0x01	; 1
    5048:	f1 f7       	brne	.-4      	; 0x5046 <main+0x2348>
    504a:	9a 8b       	std	Y+18, r25	; 0x12
    504c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    504e:	8b 89       	ldd	r24, Y+19	; 0x13
    5050:	9c 89       	ldd	r25, Y+20	; 0x14
    5052:	01 97       	sbiw	r24, 0x01	; 1
    5054:	9c 8b       	std	Y+20, r25	; 0x14
    5056:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5058:	8b 89       	ldd	r24, Y+19	; 0x13
    505a:	9c 89       	ldd	r25, Y+20	; 0x14
    505c:	00 97       	sbiw	r24, 0x00	; 0
    505e:	69 f7       	brne	.-38     	; 0x503a <main+0x233c>
    5060:	14 c0       	rjmp	.+40     	; 0x508a <main+0x238c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5062:	6d 89       	ldd	r22, Y+21	; 0x15
    5064:	7e 89       	ldd	r23, Y+22	; 0x16
    5066:	8f 89       	ldd	r24, Y+23	; 0x17
    5068:	98 8d       	ldd	r25, Y+24	; 0x18
    506a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    506e:	dc 01       	movw	r26, r24
    5070:	cb 01       	movw	r24, r22
    5072:	9c 8b       	std	Y+20, r25	; 0x14
    5074:	8b 8b       	std	Y+19, r24	; 0x13
    5076:	8b 89       	ldd	r24, Y+19	; 0x13
    5078:	9c 89       	ldd	r25, Y+20	; 0x14
    507a:	98 8b       	std	Y+16, r25	; 0x10
    507c:	8f 87       	std	Y+15, r24	; 0x0f
    507e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5080:	98 89       	ldd	r25, Y+16	; 0x10
    5082:	01 97       	sbiw	r24, 0x01	; 1
    5084:	f1 f7       	brne	.-4      	; 0x5082 <main+0x2384>
    5086:	98 8b       	std	Y+16, r25	; 0x10
    5088:	8f 87       	std	Y+15, r24	; 0x0f
    508a:	10 92 71 00 	sts	0x0071, r1
    508e:	10 92 70 00 	sts	0x0070, r1
    5092:	fe 01       	movw	r30, r28
    5094:	e9 5b       	subi	r30, 0xB9	; 185
    5096:	fe 4f       	sbci	r31, 0xFE	; 254
    5098:	10 82       	st	Z, r1
			if(dec){if(set_temp>35){set_temp-=5;}_delay_ms(150);Set_mode_count = 0;dec = 0;}
    509a:	fe 01       	movw	r30, r28
    509c:	e8 5b       	subi	r30, 0xB8	; 184
    509e:	fe 4f       	sbci	r31, 0xFE	; 254
    50a0:	80 81       	ld	r24, Z
    50a2:	88 23       	and	r24, r24
    50a4:	11 f4       	brne	.+4      	; 0x50aa <main+0x23ac>
    50a6:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <main+0xe4>
    50aa:	80 91 68 00 	lds	r24, 0x0068
    50ae:	84 32       	cpi	r24, 0x24	; 36
    50b0:	28 f0       	brcs	.+10     	; 0x50bc <main+0x23be>
    50b2:	80 91 68 00 	lds	r24, 0x0068
    50b6:	85 50       	subi	r24, 0x05	; 5
    50b8:	80 93 68 00 	sts	0x0068, r24
    50bc:	80 e0       	ldi	r24, 0x00	; 0
    50be:	90 e0       	ldi	r25, 0x00	; 0
    50c0:	a6 e1       	ldi	r26, 0x16	; 22
    50c2:	b3 e4       	ldi	r27, 0x43	; 67
    50c4:	8b 87       	std	Y+11, r24	; 0x0b
    50c6:	9c 87       	std	Y+12, r25	; 0x0c
    50c8:	ad 87       	std	Y+13, r26	; 0x0d
    50ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    50ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    50d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    50d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    50d4:	20 e0       	ldi	r18, 0x00	; 0
    50d6:	30 e0       	ldi	r19, 0x00	; 0
    50d8:	4a e7       	ldi	r20, 0x7A	; 122
    50da:	55 e4       	ldi	r21, 0x45	; 69
    50dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50e0:	dc 01       	movw	r26, r24
    50e2:	cb 01       	movw	r24, r22
    50e4:	8f 83       	std	Y+7, r24	; 0x07
    50e6:	98 87       	std	Y+8, r25	; 0x08
    50e8:	a9 87       	std	Y+9, r26	; 0x09
    50ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    50ec:	6f 81       	ldd	r22, Y+7	; 0x07
    50ee:	78 85       	ldd	r23, Y+8	; 0x08
    50f0:	89 85       	ldd	r24, Y+9	; 0x09
    50f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    50f4:	20 e0       	ldi	r18, 0x00	; 0
    50f6:	30 e0       	ldi	r19, 0x00	; 0
    50f8:	40 e8       	ldi	r20, 0x80	; 128
    50fa:	5f e3       	ldi	r21, 0x3F	; 63
    50fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5100:	88 23       	and	r24, r24
    5102:	2c f4       	brge	.+10     	; 0x510e <main+0x2410>
		__ticks = 1;
    5104:	81 e0       	ldi	r24, 0x01	; 1
    5106:	90 e0       	ldi	r25, 0x00	; 0
    5108:	9e 83       	std	Y+6, r25	; 0x06
    510a:	8d 83       	std	Y+5, r24	; 0x05
    510c:	3f c0       	rjmp	.+126    	; 0x518c <main+0x248e>
	else if (__tmp > 65535)
    510e:	6f 81       	ldd	r22, Y+7	; 0x07
    5110:	78 85       	ldd	r23, Y+8	; 0x08
    5112:	89 85       	ldd	r24, Y+9	; 0x09
    5114:	9a 85       	ldd	r25, Y+10	; 0x0a
    5116:	20 e0       	ldi	r18, 0x00	; 0
    5118:	3f ef       	ldi	r19, 0xFF	; 255
    511a:	4f e7       	ldi	r20, 0x7F	; 127
    511c:	57 e4       	ldi	r21, 0x47	; 71
    511e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5122:	18 16       	cp	r1, r24
    5124:	4c f5       	brge	.+82     	; 0x5178 <main+0x247a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5126:	6b 85       	ldd	r22, Y+11	; 0x0b
    5128:	7c 85       	ldd	r23, Y+12	; 0x0c
    512a:	8d 85       	ldd	r24, Y+13	; 0x0d
    512c:	9e 85       	ldd	r25, Y+14	; 0x0e
    512e:	20 e0       	ldi	r18, 0x00	; 0
    5130:	30 e0       	ldi	r19, 0x00	; 0
    5132:	40 e2       	ldi	r20, 0x20	; 32
    5134:	51 e4       	ldi	r21, 0x41	; 65
    5136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    513a:	dc 01       	movw	r26, r24
    513c:	cb 01       	movw	r24, r22
    513e:	bc 01       	movw	r22, r24
    5140:	cd 01       	movw	r24, r26
    5142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5146:	dc 01       	movw	r26, r24
    5148:	cb 01       	movw	r24, r22
    514a:	9e 83       	std	Y+6, r25	; 0x06
    514c:	8d 83       	std	Y+5, r24	; 0x05
    514e:	0f c0       	rjmp	.+30     	; 0x516e <main+0x2470>
    5150:	80 e9       	ldi	r24, 0x90	; 144
    5152:	91 e0       	ldi	r25, 0x01	; 1
    5154:	9c 83       	std	Y+4, r25	; 0x04
    5156:	8b 83       	std	Y+3, r24	; 0x03
    5158:	8b 81       	ldd	r24, Y+3	; 0x03
    515a:	9c 81       	ldd	r25, Y+4	; 0x04
    515c:	01 97       	sbiw	r24, 0x01	; 1
    515e:	f1 f7       	brne	.-4      	; 0x515c <main+0x245e>
    5160:	9c 83       	std	Y+4, r25	; 0x04
    5162:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5164:	8d 81       	ldd	r24, Y+5	; 0x05
    5166:	9e 81       	ldd	r25, Y+6	; 0x06
    5168:	01 97       	sbiw	r24, 0x01	; 1
    516a:	9e 83       	std	Y+6, r25	; 0x06
    516c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    516e:	8d 81       	ldd	r24, Y+5	; 0x05
    5170:	9e 81       	ldd	r25, Y+6	; 0x06
    5172:	00 97       	sbiw	r24, 0x00	; 0
    5174:	69 f7       	brne	.-38     	; 0x5150 <main+0x2452>
    5176:	14 c0       	rjmp	.+40     	; 0x51a0 <main+0x24a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5178:	6f 81       	ldd	r22, Y+7	; 0x07
    517a:	78 85       	ldd	r23, Y+8	; 0x08
    517c:	89 85       	ldd	r24, Y+9	; 0x09
    517e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5184:	dc 01       	movw	r26, r24
    5186:	cb 01       	movw	r24, r22
    5188:	9e 83       	std	Y+6, r25	; 0x06
    518a:	8d 83       	std	Y+5, r24	; 0x05
    518c:	8d 81       	ldd	r24, Y+5	; 0x05
    518e:	9e 81       	ldd	r25, Y+6	; 0x06
    5190:	9a 83       	std	Y+2, r25	; 0x02
    5192:	89 83       	std	Y+1, r24	; 0x01
    5194:	89 81       	ldd	r24, Y+1	; 0x01
    5196:	9a 81       	ldd	r25, Y+2	; 0x02
    5198:	01 97       	sbiw	r24, 0x01	; 1
    519a:	f1 f7       	brne	.-4      	; 0x5198 <main+0x249a>
    519c:	9a 83       	std	Y+2, r25	; 0x02
    519e:	89 83       	std	Y+1, r24	; 0x01
    51a0:	10 92 71 00 	sts	0x0071, r1
    51a4:	10 92 70 00 	sts	0x0070, r1
    51a8:	fe 01       	movw	r30, r28
    51aa:	e8 5b       	subi	r30, 0xB8	; 184
    51ac:	fe 4f       	sbci	r31, 0xFE	; 254
    51ae:	10 82       	st	Z, r1
    51b0:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <main+0xe4>


		}
		//offstate
		else if(On_Off_Set_Flag == 0)
    51b4:	80 91 6e 00 	lds	r24, 0x006E
    51b8:	88 23       	and	r24, r24
    51ba:	11 f0       	breq	.+4      	; 0x51c0 <main+0x24c2>
    51bc:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <main+0xe4>
		{
			//turn everything off
			DIO_u8SetPinValue(PIN1,DIO_PORTB,LOW);
    51c0:	81 e0       	ldi	r24, 0x01	; 1
    51c2:	61 e0       	ldi	r22, 0x01	; 1
    51c4:	40 e0       	ldi	r20, 0x00	; 0
    51c6:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(PIN2,DIO_PORTB,LOW);
    51ca:	82 e0       	ldi	r24, 0x02	; 2
    51cc:	61 e0       	ldi	r22, 0x01	; 1
    51ce:	40 e0       	ldi	r20, 0x00	; 0
    51d0:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(HEATING_LED,LED_PORT,LOW);
    51d4:	82 e0       	ldi	r24, 0x02	; 2
    51d6:	62 e0       	ldi	r22, 0x02	; 2
    51d8:	40 e0       	ldi	r20, 0x00	; 0
    51da:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(COOLING_LED,LED_PORT,LOW);
    51de:	87 e0       	ldi	r24, 0x07	; 7
    51e0:	62 e0       	ldi	r22, 0x02	; 2
    51e2:	40 e0       	ldi	r20, 0x00	; 0
    51e4:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
			H_voidPeltier_OFF();
    51e8:	0e 94 c9 0c 	call	0x1992	; 0x1992 <H_voidPeltier_OFF>
    51ec:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <main+0xe4>

000051f0 <__vector_1>:

void __vector_1(void)      __attribute__((signal));	 //External_Interrupt0


void __vector_1(void)
{
    51f0:	1f 92       	push	r1
    51f2:	0f 92       	push	r0
    51f4:	0f b6       	in	r0, 0x3f	; 63
    51f6:	0f 92       	push	r0
    51f8:	11 24       	eor	r1, r1
    51fa:	2f 93       	push	r18
    51fc:	3f 93       	push	r19
    51fe:	4f 93       	push	r20
    5200:	5f 93       	push	r21
    5202:	6f 93       	push	r22
    5204:	7f 93       	push	r23
    5206:	8f 93       	push	r24
    5208:	9f 93       	push	r25
    520a:	af 93       	push	r26
    520c:	bf 93       	push	r27
    520e:	ef 93       	push	r30
    5210:	ff 93       	push	r31
    5212:	df 93       	push	r29
    5214:	cf 93       	push	r28
    5216:	cd b7       	in	r28, 0x3d	; 61
    5218:	de b7       	in	r29, 0x3e	; 62
    521a:	2e 97       	sbiw	r28, 0x0e	; 14
    521c:	de bf       	out	0x3e, r29	; 62
    521e:	cd bf       	out	0x3d, r28	; 61
if(On_Off_Set_Flag == 0) {On_Off_Set_Flag = 1;}
    5220:	80 91 6e 00 	lds	r24, 0x006E
    5224:	88 23       	and	r24, r24
    5226:	21 f4       	brne	.+8      	; 0x5230 <__vector_1+0x40>
    5228:	81 e0       	ldi	r24, 0x01	; 1
    522a:	80 93 6e 00 	sts	0x006E, r24
    522e:	02 c0       	rjmp	.+4      	; 0x5234 <__vector_1+0x44>
else  {On_Off_Set_Flag = 0;}
    5230:	10 92 6e 00 	sts	0x006E, r1
    5234:	80 e0       	ldi	r24, 0x00	; 0
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	a6 e1       	ldi	r26, 0x16	; 22
    523a:	b3 e4       	ldi	r27, 0x43	; 67
    523c:	8b 87       	std	Y+11, r24	; 0x0b
    523e:	9c 87       	std	Y+12, r25	; 0x0c
    5240:	ad 87       	std	Y+13, r26	; 0x0d
    5242:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5244:	6b 85       	ldd	r22, Y+11	; 0x0b
    5246:	7c 85       	ldd	r23, Y+12	; 0x0c
    5248:	8d 85       	ldd	r24, Y+13	; 0x0d
    524a:	9e 85       	ldd	r25, Y+14	; 0x0e
    524c:	20 e0       	ldi	r18, 0x00	; 0
    524e:	30 e0       	ldi	r19, 0x00	; 0
    5250:	4a e7       	ldi	r20, 0x7A	; 122
    5252:	55 e4       	ldi	r21, 0x45	; 69
    5254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5258:	dc 01       	movw	r26, r24
    525a:	cb 01       	movw	r24, r22
    525c:	8f 83       	std	Y+7, r24	; 0x07
    525e:	98 87       	std	Y+8, r25	; 0x08
    5260:	a9 87       	std	Y+9, r26	; 0x09
    5262:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5264:	6f 81       	ldd	r22, Y+7	; 0x07
    5266:	78 85       	ldd	r23, Y+8	; 0x08
    5268:	89 85       	ldd	r24, Y+9	; 0x09
    526a:	9a 85       	ldd	r25, Y+10	; 0x0a
    526c:	20 e0       	ldi	r18, 0x00	; 0
    526e:	30 e0       	ldi	r19, 0x00	; 0
    5270:	40 e8       	ldi	r20, 0x80	; 128
    5272:	5f e3       	ldi	r21, 0x3F	; 63
    5274:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5278:	88 23       	and	r24, r24
    527a:	2c f4       	brge	.+10     	; 0x5286 <__vector_1+0x96>
		__ticks = 1;
    527c:	81 e0       	ldi	r24, 0x01	; 1
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	9e 83       	std	Y+6, r25	; 0x06
    5282:	8d 83       	std	Y+5, r24	; 0x05
    5284:	3f c0       	rjmp	.+126    	; 0x5304 <__vector_1+0x114>
	else if (__tmp > 65535)
    5286:	6f 81       	ldd	r22, Y+7	; 0x07
    5288:	78 85       	ldd	r23, Y+8	; 0x08
    528a:	89 85       	ldd	r24, Y+9	; 0x09
    528c:	9a 85       	ldd	r25, Y+10	; 0x0a
    528e:	20 e0       	ldi	r18, 0x00	; 0
    5290:	3f ef       	ldi	r19, 0xFF	; 255
    5292:	4f e7       	ldi	r20, 0x7F	; 127
    5294:	57 e4       	ldi	r21, 0x47	; 71
    5296:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    529a:	18 16       	cp	r1, r24
    529c:	4c f5       	brge	.+82     	; 0x52f0 <__vector_1+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    529e:	6b 85       	ldd	r22, Y+11	; 0x0b
    52a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    52a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    52a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    52a6:	20 e0       	ldi	r18, 0x00	; 0
    52a8:	30 e0       	ldi	r19, 0x00	; 0
    52aa:	40 e2       	ldi	r20, 0x20	; 32
    52ac:	51 e4       	ldi	r21, 0x41	; 65
    52ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52b2:	dc 01       	movw	r26, r24
    52b4:	cb 01       	movw	r24, r22
    52b6:	bc 01       	movw	r22, r24
    52b8:	cd 01       	movw	r24, r26
    52ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52be:	dc 01       	movw	r26, r24
    52c0:	cb 01       	movw	r24, r22
    52c2:	9e 83       	std	Y+6, r25	; 0x06
    52c4:	8d 83       	std	Y+5, r24	; 0x05
    52c6:	0f c0       	rjmp	.+30     	; 0x52e6 <__vector_1+0xf6>
    52c8:	80 e9       	ldi	r24, 0x90	; 144
    52ca:	91 e0       	ldi	r25, 0x01	; 1
    52cc:	9c 83       	std	Y+4, r25	; 0x04
    52ce:	8b 83       	std	Y+3, r24	; 0x03
    52d0:	8b 81       	ldd	r24, Y+3	; 0x03
    52d2:	9c 81       	ldd	r25, Y+4	; 0x04
    52d4:	01 97       	sbiw	r24, 0x01	; 1
    52d6:	f1 f7       	brne	.-4      	; 0x52d4 <__vector_1+0xe4>
    52d8:	9c 83       	std	Y+4, r25	; 0x04
    52da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52dc:	8d 81       	ldd	r24, Y+5	; 0x05
    52de:	9e 81       	ldd	r25, Y+6	; 0x06
    52e0:	01 97       	sbiw	r24, 0x01	; 1
    52e2:	9e 83       	std	Y+6, r25	; 0x06
    52e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52e6:	8d 81       	ldd	r24, Y+5	; 0x05
    52e8:	9e 81       	ldd	r25, Y+6	; 0x06
    52ea:	00 97       	sbiw	r24, 0x00	; 0
    52ec:	69 f7       	brne	.-38     	; 0x52c8 <__vector_1+0xd8>
    52ee:	14 c0       	rjmp	.+40     	; 0x5318 <__vector_1+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52f0:	6f 81       	ldd	r22, Y+7	; 0x07
    52f2:	78 85       	ldd	r23, Y+8	; 0x08
    52f4:	89 85       	ldd	r24, Y+9	; 0x09
    52f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    52f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52fc:	dc 01       	movw	r26, r24
    52fe:	cb 01       	movw	r24, r22
    5300:	9e 83       	std	Y+6, r25	; 0x06
    5302:	8d 83       	std	Y+5, r24	; 0x05
    5304:	8d 81       	ldd	r24, Y+5	; 0x05
    5306:	9e 81       	ldd	r25, Y+6	; 0x06
    5308:	9a 83       	std	Y+2, r25	; 0x02
    530a:	89 83       	std	Y+1, r24	; 0x01
    530c:	89 81       	ldd	r24, Y+1	; 0x01
    530e:	9a 81       	ldd	r25, Y+2	; 0x02
    5310:	01 97       	sbiw	r24, 0x01	; 1
    5312:	f1 f7       	brne	.-4      	; 0x5310 <__vector_1+0x120>
    5314:	9a 83       	std	Y+2, r25	; 0x02
    5316:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(150);
}
    5318:	2e 96       	adiw	r28, 0x0e	; 14
    531a:	de bf       	out	0x3e, r29	; 62
    531c:	cd bf       	out	0x3d, r28	; 61
    531e:	cf 91       	pop	r28
    5320:	df 91       	pop	r29
    5322:	ff 91       	pop	r31
    5324:	ef 91       	pop	r30
    5326:	bf 91       	pop	r27
    5328:	af 91       	pop	r26
    532a:	9f 91       	pop	r25
    532c:	8f 91       	pop	r24
    532e:	7f 91       	pop	r23
    5330:	6f 91       	pop	r22
    5332:	5f 91       	pop	r21
    5334:	4f 91       	pop	r20
    5336:	3f 91       	pop	r19
    5338:	2f 91       	pop	r18
    533a:	0f 90       	pop	r0
    533c:	0f be       	out	0x3f, r0	; 63
    533e:	0f 90       	pop	r0
    5340:	1f 90       	pop	r1
    5342:	18 95       	reti

00005344 <__vector_10>:

void __vector_10(void)      __attribute__((signal));  //Timer_interrupt
void __vector_10(void)
{
    5344:	1f 92       	push	r1
    5346:	0f 92       	push	r0
    5348:	0f b6       	in	r0, 0x3f	; 63
    534a:	0f 92       	push	r0
    534c:	11 24       	eor	r1, r1
    534e:	2f 93       	push	r18
    5350:	3f 93       	push	r19
    5352:	4f 93       	push	r20
    5354:	5f 93       	push	r21
    5356:	6f 93       	push	r22
    5358:	7f 93       	push	r23
    535a:	8f 93       	push	r24
    535c:	9f 93       	push	r25
    535e:	af 93       	push	r26
    5360:	bf 93       	push	r27
    5362:	ef 93       	push	r30
    5364:	ff 93       	push	r31
    5366:	df 93       	push	r29
    5368:	cf 93       	push	r28
    536a:	cd b7       	in	r28, 0x3d	; 61
    536c:	de b7       	in	r29, 0x3e	; 62
static u8 j = 0;			 //getting temperatures location variable
static u8 led_flag = 0 ;	 //used to light the corresponding led to mode
static u8 flicker_set_temp=0;//used to make the set temp flicker

//measuring temperature mode
if(On_Off_Set_Flag ==1)
    536e:	80 91 6e 00 	lds	r24, 0x006E
    5372:	81 30       	cpi	r24, 0x01	; 1
    5374:	09 f0       	breq	.+2      	; 0x5378 <__vector_10+0x34>
    5376:	90 c0       	rjmp	.+288    	; 0x5498 <__vector_10+0x154>
{
Count++;
    5378:	80 91 76 00 	lds	r24, 0x0076
    537c:	8f 5f       	subi	r24, 0xFF	; 255
    537e:	80 93 76 00 	sts	0x0076, r24

//every 100 ms
if(Count%10 == 0)
    5382:	80 91 76 00 	lds	r24, 0x0076
    5386:	9a e0       	ldi	r25, 0x0A	; 10
    5388:	69 2f       	mov	r22, r25
    538a:	0e 94 86 2a 	call	0x550c	; 0x550c <__udivmodqi4>
    538e:	89 2f       	mov	r24, r25
    5390:	88 23       	and	r24, r24
    5392:	29 f5       	brne	.+74     	; 0x53de <__vector_10+0x9a>
{
//set new temp
	digit = therm_u8read_temperature(&decimal);
    5394:	8a e7       	ldi	r24, 0x7A	; 122
    5396:	90 e0       	ldi	r25, 0x00	; 0
    5398:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <therm_u8read_temperature>
    539c:	80 93 79 00 	sts	0x0079, r24
	EEPROM_voidSendDataByte(digit , i , 0);
    53a0:	80 91 79 00 	lds	r24, 0x0079
    53a4:	90 91 75 00 	lds	r25, 0x0075
    53a8:	69 2f       	mov	r22, r25
    53aa:	40 e0       	ldi	r20, 0x00	; 0
    53ac:	0e 94 c7 0b 	call	0x178e	; 0x178e <EEPROM_voidSendDataByte>
	i++;
    53b0:	80 91 75 00 	lds	r24, 0x0075
    53b4:	8f 5f       	subi	r24, 0xFF	; 255
    53b6:	80 93 75 00 	sts	0x0075, r24
	if(i==10){i=0;}
    53ba:	80 91 75 00 	lds	r24, 0x0075
    53be:	8a 30       	cpi	r24, 0x0A	; 10
    53c0:	11 f4       	brne	.+4      	; 0x53c6 <__vector_10+0x82>
    53c2:	10 92 75 00 	sts	0x0075, r1
	if(led_flag){DIO_u8SetPinValue(current_led , LED_PORT , LOW);led_flag = 0;}
    53c6:	80 91 73 00 	lds	r24, 0x0073
    53ca:	88 23       	and	r24, r24
    53cc:	41 f0       	breq	.+16     	; 0x53de <__vector_10+0x9a>
    53ce:	80 91 6f 00 	lds	r24, 0x006F
    53d2:	62 e0       	ldi	r22, 0x02	; 2
    53d4:	40 e0       	ldi	r20, 0x00	; 0
    53d6:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    53da:	10 92 73 00 	sts	0x0073, r1
}

//Every 1 sec
if((Count%100 == 0))
    53de:	80 91 76 00 	lds	r24, 0x0076
    53e2:	94 e6       	ldi	r25, 0x64	; 100
    53e4:	69 2f       	mov	r22, r25
    53e6:	0e 94 86 2a 	call	0x550c	; 0x550c <__udivmodqi4>
    53ea:	89 2f       	mov	r24, r25
    53ec:	88 23       	and	r24, r24
    53ee:	09 f0       	breq	.+2      	; 0x53f2 <__vector_10+0xae>
    53f0:	7a c0       	rjmp	.+244    	; 0x54e6 <__vector_10+0x1a2>
{
	Count = 0;
    53f2:	10 92 76 00 	sts	0x0076, r1

if(current_led!=0)
    53f6:	80 91 6f 00 	lds	r24, 0x006F
    53fa:	88 23       	and	r24, r24
    53fc:	49 f0       	breq	.+18     	; 0x5410 <__vector_10+0xcc>
	{
	//to fliker led
	DIO_u8SetPinValue(current_led , LED_PORT , HIGH);led_flag = 1;
    53fe:	80 91 6f 00 	lds	r24, 0x006F
    5402:	62 e0       	ldi	r22, 0x02	; 2
    5404:	41 e0       	ldi	r20, 0x01	; 1
    5406:	0e 94 52 07 	call	0xea4	; 0xea4 <DIO_u8SetPinValue>
    540a:	81 e0       	ldi	r24, 0x01	; 1
    540c:	80 93 73 00 	sts	0x0073, r24
	}
	//get sum of the previous temps.
	for(j = 0 ; j<10 ; j++)
    5410:	10 92 74 00 	sts	0x0074, r1
    5414:	22 c0       	rjmp	.+68     	; 0x545a <__vector_10+0x116>
	{

		current_temp += EEPROM_u8ReadDataByte(j,0);
    5416:	80 91 74 00 	lds	r24, 0x0074
    541a:	60 e0       	ldi	r22, 0x00	; 0
    541c:	0e 94 5f 0c 	call	0x18be	; 0x18be <EEPROM_u8ReadDataByte>
    5420:	28 2f       	mov	r18, r24
    5422:	30 e0       	ldi	r19, 0x00	; 0
    5424:	40 e0       	ldi	r20, 0x00	; 0
    5426:	50 e0       	ldi	r21, 0x00	; 0
    5428:	80 91 69 00 	lds	r24, 0x0069
    542c:	90 91 6a 00 	lds	r25, 0x006A
    5430:	a0 91 6b 00 	lds	r26, 0x006B
    5434:	b0 91 6c 00 	lds	r27, 0x006C
    5438:	82 0f       	add	r24, r18
    543a:	93 1f       	adc	r25, r19
    543c:	a4 1f       	adc	r26, r20
    543e:	b5 1f       	adc	r27, r21
    5440:	80 93 69 00 	sts	0x0069, r24
    5444:	90 93 6a 00 	sts	0x006A, r25
    5448:	a0 93 6b 00 	sts	0x006B, r26
    544c:	b0 93 6c 00 	sts	0x006C, r27
	{
	//to fliker led
	DIO_u8SetPinValue(current_led , LED_PORT , HIGH);led_flag = 1;
	}
	//get sum of the previous temps.
	for(j = 0 ; j<10 ; j++)
    5450:	80 91 74 00 	lds	r24, 0x0074
    5454:	8f 5f       	subi	r24, 0xFF	; 255
    5456:	80 93 74 00 	sts	0x0074, r24
    545a:	80 91 74 00 	lds	r24, 0x0074
    545e:	8a 30       	cpi	r24, 0x0A	; 10
    5460:	d0 f2       	brcs	.-76     	; 0x5416 <__vector_10+0xd2>
	{

		current_temp += EEPROM_u8ReadDataByte(j,0);
	}
	//get the average
	current_temp/=10;
    5462:	80 91 69 00 	lds	r24, 0x0069
    5466:	90 91 6a 00 	lds	r25, 0x006A
    546a:	a0 91 6b 00 	lds	r26, 0x006B
    546e:	b0 91 6c 00 	lds	r27, 0x006C
    5472:	2a e0       	ldi	r18, 0x0A	; 10
    5474:	30 e0       	ldi	r19, 0x00	; 0
    5476:	40 e0       	ldi	r20, 0x00	; 0
    5478:	50 e0       	ldi	r21, 0x00	; 0
    547a:	bc 01       	movw	r22, r24
    547c:	cd 01       	movw	r24, r26
    547e:	0e 94 92 2a 	call	0x5524	; 0x5524 <__udivmodsi4>
    5482:	da 01       	movw	r26, r20
    5484:	c9 01       	movw	r24, r18
    5486:	80 93 69 00 	sts	0x0069, r24
    548a:	90 93 6a 00 	sts	0x006A, r25
    548e:	a0 93 6b 00 	sts	0x006B, r26
    5492:	b0 93 6c 00 	sts	0x006C, r27
    5496:	27 c0       	rjmp	.+78     	; 0x54e6 <__vector_10+0x1a2>

	}
}
//set temperature mode
else if(On_Off_Set_Flag ==2)
    5498:	80 91 6e 00 	lds	r24, 0x006E
    549c:	82 30       	cpi	r24, 0x02	; 2
    549e:	19 f5       	brne	.+70     	; 0x54e6 <__vector_10+0x1a2>
{

	//to count the 5 sec so temperature is set
	Set_mode_count++;
    54a0:	80 91 70 00 	lds	r24, 0x0070
    54a4:	90 91 71 00 	lds	r25, 0x0071
    54a8:	01 96       	adiw	r24, 0x01	; 1
    54aa:	90 93 71 00 	sts	0x0071, r25
    54ae:	80 93 70 00 	sts	0x0070, r24
	//to flicker the set temperature
	flicker_set_temp++;
    54b2:	80 91 72 00 	lds	r24, 0x0072
    54b6:	8f 5f       	subi	r24, 0xFF	; 255
    54b8:	80 93 72 00 	sts	0x0072, r24
	if(flicker_set_temp == 100)
	{


	}
	if(Set_mode_count == 500)
    54bc:	80 91 70 00 	lds	r24, 0x0070
    54c0:	90 91 71 00 	lds	r25, 0x0071
    54c4:	21 e0       	ldi	r18, 0x01	; 1
    54c6:	84 3f       	cpi	r24, 0xF4	; 244
    54c8:	92 07       	cpc	r25, r18
    54ca:	69 f4       	brne	.+26     	; 0x54e6 <__vector_10+0x1a2>
	{
		EEPROM_voidSendDataByte(set_temp , 11 , 0);
    54cc:	80 91 68 00 	lds	r24, 0x0068
    54d0:	6b e0       	ldi	r22, 0x0B	; 11
    54d2:	40 e0       	ldi	r20, 0x00	; 0
    54d4:	0e 94 c7 0b 	call	0x178e	; 0x178e <EEPROM_voidSendDataByte>
		Set_mode_count = 0;
    54d8:	10 92 71 00 	sts	0x0071, r1
    54dc:	10 92 70 00 	sts	0x0070, r1
		On_Off_Set_Flag = 1;
    54e0:	81 e0       	ldi	r24, 0x01	; 1
    54e2:	80 93 6e 00 	sts	0x006E, r24
else
{
	//Nothing;
}

}
    54e6:	cf 91       	pop	r28
    54e8:	df 91       	pop	r29
    54ea:	ff 91       	pop	r31
    54ec:	ef 91       	pop	r30
    54ee:	bf 91       	pop	r27
    54f0:	af 91       	pop	r26
    54f2:	9f 91       	pop	r25
    54f4:	8f 91       	pop	r24
    54f6:	7f 91       	pop	r23
    54f8:	6f 91       	pop	r22
    54fa:	5f 91       	pop	r21
    54fc:	4f 91       	pop	r20
    54fe:	3f 91       	pop	r19
    5500:	2f 91       	pop	r18
    5502:	0f 90       	pop	r0
    5504:	0f be       	out	0x3f, r0	; 63
    5506:	0f 90       	pop	r0
    5508:	1f 90       	pop	r1
    550a:	18 95       	reti

0000550c <__udivmodqi4>:
    550c:	99 1b       	sub	r25, r25
    550e:	79 e0       	ldi	r23, 0x09	; 9
    5510:	04 c0       	rjmp	.+8      	; 0x551a <__udivmodqi4_ep>

00005512 <__udivmodqi4_loop>:
    5512:	99 1f       	adc	r25, r25
    5514:	96 17       	cp	r25, r22
    5516:	08 f0       	brcs	.+2      	; 0x551a <__udivmodqi4_ep>
    5518:	96 1b       	sub	r25, r22

0000551a <__udivmodqi4_ep>:
    551a:	88 1f       	adc	r24, r24
    551c:	7a 95       	dec	r23
    551e:	c9 f7       	brne	.-14     	; 0x5512 <__udivmodqi4_loop>
    5520:	80 95       	com	r24
    5522:	08 95       	ret

00005524 <__udivmodsi4>:
    5524:	a1 e2       	ldi	r26, 0x21	; 33
    5526:	1a 2e       	mov	r1, r26
    5528:	aa 1b       	sub	r26, r26
    552a:	bb 1b       	sub	r27, r27
    552c:	fd 01       	movw	r30, r26
    552e:	0d c0       	rjmp	.+26     	; 0x554a <__udivmodsi4_ep>

00005530 <__udivmodsi4_loop>:
    5530:	aa 1f       	adc	r26, r26
    5532:	bb 1f       	adc	r27, r27
    5534:	ee 1f       	adc	r30, r30
    5536:	ff 1f       	adc	r31, r31
    5538:	a2 17       	cp	r26, r18
    553a:	b3 07       	cpc	r27, r19
    553c:	e4 07       	cpc	r30, r20
    553e:	f5 07       	cpc	r31, r21
    5540:	20 f0       	brcs	.+8      	; 0x554a <__udivmodsi4_ep>
    5542:	a2 1b       	sub	r26, r18
    5544:	b3 0b       	sbc	r27, r19
    5546:	e4 0b       	sbc	r30, r20
    5548:	f5 0b       	sbc	r31, r21

0000554a <__udivmodsi4_ep>:
    554a:	66 1f       	adc	r22, r22
    554c:	77 1f       	adc	r23, r23
    554e:	88 1f       	adc	r24, r24
    5550:	99 1f       	adc	r25, r25
    5552:	1a 94       	dec	r1
    5554:	69 f7       	brne	.-38     	; 0x5530 <__udivmodsi4_loop>
    5556:	60 95       	com	r22
    5558:	70 95       	com	r23
    555a:	80 95       	com	r24
    555c:	90 95       	com	r25
    555e:	9b 01       	movw	r18, r22
    5560:	ac 01       	movw	r20, r24
    5562:	bd 01       	movw	r22, r26
    5564:	cf 01       	movw	r24, r30
    5566:	08 95       	ret

00005568 <__prologue_saves__>:
    5568:	2f 92       	push	r2
    556a:	3f 92       	push	r3
    556c:	4f 92       	push	r4
    556e:	5f 92       	push	r5
    5570:	6f 92       	push	r6
    5572:	7f 92       	push	r7
    5574:	8f 92       	push	r8
    5576:	9f 92       	push	r9
    5578:	af 92       	push	r10
    557a:	bf 92       	push	r11
    557c:	cf 92       	push	r12
    557e:	df 92       	push	r13
    5580:	ef 92       	push	r14
    5582:	ff 92       	push	r15
    5584:	0f 93       	push	r16
    5586:	1f 93       	push	r17
    5588:	cf 93       	push	r28
    558a:	df 93       	push	r29
    558c:	cd b7       	in	r28, 0x3d	; 61
    558e:	de b7       	in	r29, 0x3e	; 62
    5590:	ca 1b       	sub	r28, r26
    5592:	db 0b       	sbc	r29, r27
    5594:	0f b6       	in	r0, 0x3f	; 63
    5596:	f8 94       	cli
    5598:	de bf       	out	0x3e, r29	; 62
    559a:	0f be       	out	0x3f, r0	; 63
    559c:	cd bf       	out	0x3d, r28	; 61
    559e:	09 94       	ijmp

000055a0 <__epilogue_restores__>:
    55a0:	2a 88       	ldd	r2, Y+18	; 0x12
    55a2:	39 88       	ldd	r3, Y+17	; 0x11
    55a4:	48 88       	ldd	r4, Y+16	; 0x10
    55a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    55a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    55aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    55ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    55ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    55b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    55b2:	b9 84       	ldd	r11, Y+9	; 0x09
    55b4:	c8 84       	ldd	r12, Y+8	; 0x08
    55b6:	df 80       	ldd	r13, Y+7	; 0x07
    55b8:	ee 80       	ldd	r14, Y+6	; 0x06
    55ba:	fd 80       	ldd	r15, Y+5	; 0x05
    55bc:	0c 81       	ldd	r16, Y+4	; 0x04
    55be:	1b 81       	ldd	r17, Y+3	; 0x03
    55c0:	aa 81       	ldd	r26, Y+2	; 0x02
    55c2:	b9 81       	ldd	r27, Y+1	; 0x01
    55c4:	ce 0f       	add	r28, r30
    55c6:	d1 1d       	adc	r29, r1
    55c8:	0f b6       	in	r0, 0x3f	; 63
    55ca:	f8 94       	cli
    55cc:	de bf       	out	0x3e, r29	; 62
    55ce:	0f be       	out	0x3f, r0	; 63
    55d0:	cd bf       	out	0x3d, r28	; 61
    55d2:	ed 01       	movw	r28, r26
    55d4:	08 95       	ret

000055d6 <_exit>:
    55d6:	f8 94       	cli

000055d8 <__stop_program>:
    55d8:	ff cf       	rjmp	.-2      	; 0x55d8 <__stop_program>
